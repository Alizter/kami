Rule map:
LdHit, LdDeferred -> Ld
StHit, StDeferred -> St

Address a is always implicit throughout. mem is the last Level cache and m is
the specification memory.

Theta:
if c is the lowest in S or M, then data(c)
else if c is the lowest first cToP response msg and dir(c) = M, then data(msg)
else if c is the lowest pToC response msg and cs(c) = I, then data(msg)
else mem

Invariants:

1. if c is in S or M, then data(c) = m
2. if first cToP response msg for c and dir(c) = M, then data(msg) = m
3. if pToC response msg for c and cs(c) = I, then data(msg) = m
4. if forall i. dir(i) <= S, then mem = m

Extra invariants as and when they are needed:
5. Directory is conservative (dir(c) >= cs(c))
6. Directory is compatible (if one entry is M, all other entries are I)

Beyond this, there is only one cache that we deal with.
7. if cToP response msg for c to state x, then cs(c) <= x and dir(c) > x
8. if pToC response msg for c to state x, then cs(x) < x and dir(c) = x
9. if cToP req r for c from state y to x and dir(c) <= y, then there cannot
be any resp cToP for c or dir(c) is waiting.
10. There is at most only one pToC response msg for cache c.
11. If dir(c) > cs(c), there is a response msg from c.
12. There cannot be a response in cToP and response in pToC for c.
13. If there are multiple response messages in cToP for c, then the first
message's toState > second message's toState and so on.
14. For the last cToP message from c to state x, cs(c) = x.
15. If there is a pToC request ahead of a pToC response for c, then cs(c) = I.
16. cache c is waiting iff either there is a request in cToP for c with
matching toState and fromState >= cs(c), (exclusive) or a response from pToC
for c with matching toState.
    -- 16a: Request in cToP, 16b: Response in pToC
17. If there is a pToC request to c and dir(c) is not waiting, then cs(c) = I.
18. If there is a pToC request to c and cToP response from c, then
toState(response) = I.
19. If there is a pToC request to c and dir(c) is not waiting, then there is no
pToC response to c ahead of the request.
20. If there are two pToC requests to c, then cs(c) = I.
21. If there is a non-voluntary cToP response from c, then dir(c) is in
wait-state.
22. If two cToP responses are present, one of them in voluntary.
23. If a cToP request is present such that dir(c) <= fromState(req), there
cannot be a voluntary cToP response.
24. There can be at most 2 responses in cToP for c.
25. In any cToP request, from < to.
26. For voluntary response, from = I

Proofs:
1.
a) If c is currently I and became S or M, it updates data. By (3), data is m,
and m does not get changed
b) If c is currently S or M
   - if Store, data is updated in m and c correctly.
   - no other cache can perform store that changes m because of (5) and (6).
   - response to parent will downgrade it (to S) - data and m remain unchanged.
   - response from parent, data and m remain unchanged.
   - otherwise data remains unchanged.

2.
a) If it's not first message (second or third or nth message) and becomes first
message next. Parent received response. By invariant (7), it is downgrade to
parent. So dir(c) cannot be M.
b) If it was not a message, and becomes first message next. Child sends
response. Cache must downgrade from S or M, so must be sending data(msg) = m by
(1), and m remains unchanged.
c) If it was first message and directory is not M, directory cannot become M
unless message is dequeued, satisfying invariant, or another message is sent
which must be an upgrade. However, that means dir(c) is not waiting and there
is a request to directory from c to upgrade to M from state y and dir(c) <= y.
There cannot be any msg now because of (9).
d) If it was first message and directory is M. By (5) and (6), no other cache can
do store. By (7), current cache can also not do store.

3.
a) There is already a pToC response message for c.
By (10), there is at most only one pToC response message for c. Let's say it's for
state x > I. By (8), dir(c) = x. So no other cache can perform store. Also by
(7), cs(c) < x, so it also cannot perform store. So the invariant holds as m
remains same.
b) a pToC response message for c is created. This means that dir(c) is not
waiting.  This means dir(i) for other caches must be <= S because of (6), and
dir(c) < M since a response message was created. Thus, mem = m. If dir(c) = S
but cs(c) = I, then by (11), there is a response msg from c. But by (9), there
is no such response as there is a request that can be processed. So dir(c) = I.
Thus, data(msg) = m.

4.
a) If forall i, dir(i) <= S now, because of (5) and (6) no other store can take
place in any cache. We never update mem with any msg, so mem = m remains true.
b) If some dir(c) = M and became S or I now. This must happen by receiving a
response msg in cToP for c to state S or I. By (2) (since this is first msg),
the msg must have data(msg) = m. Thus, mem = m.

5.
This cannot be violated because of (7) and (8) -- child only sends downgrade response
and parent only sends upgrade response. Response received by child, because of (8)
preserves the invariant and response received by parent, because of (7) preserves
the invariant.

Dependencies: 7, 8, 25

6.
True because of (7). Upgrade sent by parent ensures things are compatible and response
received by parent is always downgrade which keeps compatibility.

Dependencies: 7, 25

7.
When such a message is created, because of (5), this holds. Because of (12),
child cannot upgrade when such a message is in cToP responses. Because of (13),
when parent downgrades directory, the invariant still holds for the remaining
message.

Dependencies: 5, 12, 13, 25

8.
When such a message is created, because of (5), this holds. Because of (12),
parent cannot downgrade directory for c when such a message is in pToC
responses for c. Because of (10), when such a message is present, there is no
other message and the child cannot upgrade because of the "other" message, thus
preserving the invariant.

Dependencies: 5, 10, 12, 25

9.
a) cToP request is created:
fromState(req) = cs(c). If there is a cToP response to state z, then cs(c) <= z
and dir(c) > z by (7). Thus, dir(c) > fromState(req) creating a contradiction.
b) cToP response is created:
If dir(c) is not waiting then if pToC request exists, cs(c) = I by (17). So 
whether or not pToC exists, the newly created cToP response must be voluntary.
Since there is a cToP request, by (16a), cache must be in wait state, and hence
voluntary response cannot be created.
c) cToP response is dequeued (or dir(c) becomes non-wait or dir(c) downgrades):
If there is no other cToP response present, the hypothesis holds. Otherwise,
the first one cannot be voluntary because it will violate (26), (13). The second
one has to be voluntary by (22). By (23), this is not possible.

Dependencies: 7, 13, 16a, 17, 22, 23, 26

10.
If there's already a pToC response message to c for state x, then since
dir(c) = x by (8), if another response message to c is sent by pToC, it
must be for state > x, which violates (8) for the first pToC response msg.

Dependencies: 8

11.
If there's only one cToP message for c, and it is removed in the current
transition, then by (14), dir(c) = cs(c).

Dependencies: 14

12.
a) Consider when a cToP response is created anew and there's a pending pToC
response for cache c. Because of (16b), the wait-state of cache c is set, which
means that it cannot execute rule-writeback. So there must be a pToC request.
By (15), this request must be dropped.
b) Consider when a pToC response is created anew and there's a pending cToP
response for cache c. There must be a cToP request from state y to x with
dir(c) <= y. By (9), dir(c) must be in wait-state, which means that a response
to child c cannot be sent.

Dependencies: 9, 15, 16b

13.
When a cToP response is created, this invariant holds because of (7).

Dependencies: 7

14 .
Whenever a cToP response is created, this invariant holds. By (12), when such a
response is present, the child cannot upgrade.

Dependencies: 12

15.
Consider the case when a pToC response is created and there is already a pToC
request ahead. This means dir(c) is not waiting. By (17), cs(c) = I.
Child cannot upgrade because there cannot be another pToC response by (10).

Dependencies: 10, 17

16, 16a, 16b.
When wait of a cache changes from False to True, there is a request sent
satisfying the criteria, and no request is already present by induction
hypothesis (16b). When it changes from True to False, an appropriate pToC response is
dequeued and that is the only response present by induction hypothesis (10). When a
response is created at the parent, a request is removed, and wait state at
child remains as is. So in all these cases (when wait-state changes, or when
request is created or when response is created), the invariant is satisfied.

Dependencies: 16, 16a, 16b, 10

17.
We have to consider 3 cases:
a) When a pToC request is sent to c, then wait-state of dir(c) is set, so
hypothesis holds
b) When wait-state of dir(c) is unset, there must be a response in cToP from
c, and by (18), its toState must be I. Thus, by (7), cs(c) = I
c) When cs(c) changes to S or M, it must receive response in pToC, which is
forbidden by (19) if there is a pToC request and dir(c) is not waiting.

Dependencies: 7, 18, 19

18.
a) If a new non-voluntary cToP response is created, there is another pToC
request, since if we remove the only one present, the hypothesis follows.
Because of (20), cs(c) = I leading to a contradiction.
b) If a new pToC request is created, dir(c) must not be in wait-state. If cToP
response is non-voluntary, dir(c) must be in wait-state by (21) leading to a
contradiction.

Dependencies: 20, 21

19.
a) When a request in pToC is created, then dir(c) is set to wait satisfying the
invariant.
b) When dir(c) is set to non-waiting, then a response in cToP is dequeued. But
by (12), there cannot be a response in cToP and pToC simultaneously.

Dependencies: 12

20.
Consider when the second pToC request is created. dir(c) is not in wait-state,
so by (17), cs(c) = I.

Dependencies: 17

21.
a) Consider when a non-voluntary cToP response is created. By (17), dir(c) must be
in wait-state as cs(c) cannot be I.
b) Consider when dir(c) becomes non-waiting. There must be a cToP response that is
dequeued. Consider the case where there is another non-voluntary cToP response. By
(22), the first cToP response must be voluntary, and hence by (13) the toState of
the second response must be < I leading to a contradiction.

Dependencies: 13, 17, 22

22.
Consider when the second cToP response is created.  Let's say the first cToP
response is non-voluntary. If the second one is also non-voluntary, there is a
pToC request present simultaneously with a cToP response. The toState of the
first response is I by (18) and hence by (7), cs(c) = I, and hence the pToC
request would be dropped.

Dependencies: 7, 18

23. If a cToP request is present such that dir(c) <= fromState(req), there
cannot be a voluntary cToP response.
23.
a) Consider the case when a cToP response is created. A voluntary cToP response
cannot be created because by (16) the cache is in wait-state.
b) Consider the case when a cToP request is created. If a voluntary cToP response
is present then by (7), cs(c) = I, and dir(c) > I. But dir(c) = I by this hypothesis.
So such a request cannot be created.
c) Consider the case when dir(c) downgrades. If there is no other cToP
response present, the hypothesis holds. Otherwise, the first one cannot be
voluntary because it will violate (13). The second one has to be voluntary by
(22) which is not possible because of induction hypothesis.

Dependencies: 7, 13, 16, 22

24. If there multiple messages, then to(first) > to(second) > to(third) by (13) …
Since each to(x) can be S or I, there can only be two! 

Dependencies: 13

25. Trivial from rules

Dependencies: None

26. Trivial from rules

Dependencies: None
