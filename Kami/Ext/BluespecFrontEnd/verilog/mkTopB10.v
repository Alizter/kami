//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Aug 14 20:07:24 EDT 2019
//
//
// Ports:
// Name                         I/O  size props
// obtain_rq_get                  O    65 reg
// RDY_obtain_rq_get              O     1 reg
// RDY_send_rs_put                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_rs_put                    I    32 reg
// EN_send_rs_put                 I     1
// EN_obtain_rq_get               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop(CLK,
	     RST_N,

	     EN_obtain_rq_get,
	     obtain_rq_get,
	     RDY_obtain_rq_get,

	     send_rs_put,
	     EN_send_rs_put,
	     RDY_send_rs_put);
  input  CLK;
  input  RST_N;

  // actionvalue method obtain_rq_get
  input  EN_obtain_rq_get;
  output [64 : 0] obtain_rq_get;
  output RDY_obtain_rq_get;

  // action method send_rs_put
  input  [31 : 0] send_rs_put;
  input  EN_send_rs_put;
  output RDY_send_rs_put;

  // signals for module outputs
  wire [64 : 0] obtain_rq_get;
  wire RDY_obtain_rq_get, RDY_send_rs_put;

  // inlined wires
  reg [160 : 0] proc_m5_pff_rv$port1__write_1;
  wire [192 : 0] proc_m8_pff_rv$port1__read,
		 proc_m8_pff_rv$port1__write_1,
		 proc_m8_pff_rv$port2__read;
  wire [160 : 0] proc_m5_pff_rv$port1__read, proc_m5_pff_rv$port2__read;
  wire [57 : 0] proc_m2_pff_rv$port1__read,
		proc_m2_pff_rv$port1__write_1,
		proc_m2_pff_rv$port2__read,
		proc_m2_pff_rv$port3__read;
  wire [12 : 0] proc_m6_pff_rv$port0__write_1,
		proc_m6_pff_rv$port1__read,
		proc_m6_pff_rv$port2__read;
  wire proc_m2_pff_rv$EN_port0__write,
       proc_m5_pff_rv$EN_port0__write,
       proc_m5_pff_rv$EN_port1__write,
       proc_m6_pff_rv$EN_port0__write,
       proc_m8_pff_rv$EN_port0__write,
       proc_m8_pff_rv$EN_port1__write;

  // register proc_m12_lastPc
  reg [11 : 0] proc_m12_lastPc;
  wire [11 : 0] proc_m12_lastPc$D_IN;
  wire proc_m12_lastPc$EN;

  // register proc_m12_stall
  reg proc_m12_stall;
  wire proc_m12_stall$D_IN, proc_m12_stall$EN;

  // register proc_m12_stalled
  reg [159 : 0] proc_m12_stalled;
  wire [159 : 0] proc_m12_stalled$D_IN;
  wire proc_m12_stalled$EN;

  // register proc_m1_readRq
  reg proc_m1_readRq;
  wire proc_m1_readRq$D_IN, proc_m1_readRq$EN;

  // register proc_m2_pff_rv
  reg [57 : 0] proc_m2_pff_rv;
  wire [57 : 0] proc_m2_pff_rv$D_IN;
  wire proc_m2_pff_rv$EN;

  // register proc_m3_rf
  reg [1023 : 0] proc_m3_rf;
  wire [1023 : 0] proc_m3_rf$D_IN;
  wire proc_m3_rf$EN;

  // register proc_m4_sbFlags
  reg [31 : 0] proc_m4_sbFlags;
  reg [31 : 0] proc_m4_sbFlags$D_IN;
  wire proc_m4_sbFlags$EN;

  // register proc_m5_pff_rv
  reg [160 : 0] proc_m5_pff_rv;
  wire [160 : 0] proc_m5_pff_rv$D_IN;
  wire proc_m5_pff_rv$EN;

  // register proc_m6_pff_rv
  reg [12 : 0] proc_m6_pff_rv;
  wire [12 : 0] proc_m6_pff_rv$D_IN;
  wire proc_m6_pff_rv$EN;

  // register proc_m7_eEpoch
  reg proc_m7_eEpoch;
  wire proc_m7_eEpoch$D_IN, proc_m7_eEpoch$EN;

  // register proc_m8_pff_rv
  reg [192 : 0] proc_m8_pff_rv;
  wire [192 : 0] proc_m8_pff_rv$D_IN;
  wire proc_m8_pff_rv$EN;

  // register proc_m9_fEpoch
  reg proc_m9_fEpoch;
  wire proc_m9_fEpoch$D_IN, proc_m9_fEpoch$EN;

  // register proc_m9_pc
  reg [11 : 0] proc_m9_pc;
  wire [11 : 0] proc_m9_pc$D_IN;
  wire proc_m9_pc$EN;

  // register proc_m9_pcUpdated
  reg proc_m9_pcUpdated;
  wire proc_m9_pcUpdated$D_IN, proc_m9_pcUpdated$EN;

  // register proc_m9_pinit
  reg proc_m9_pinit;
  wire proc_m9_pinit$D_IN, proc_m9_pinit$EN;

  // register proc_m9_pinitRq
  reg proc_m9_pinitRq;
  wire proc_m9_pinitRq$D_IN, proc_m9_pinitRq$EN;

  // register proc_m9_pinitRqOfs
  reg [9 : 0] proc_m9_pinitRqOfs;
  wire [9 : 0] proc_m9_pinitRqOfs$D_IN;
  wire proc_m9_pinitRqOfs$EN;

  // register proc_m9_pinitRsOfs
  reg [9 : 0] proc_m9_pinitRsOfs;
  wire [9 : 0] proc_m9_pinitRsOfs$D_IN;
  wire proc_m9_pinitRsOfs$EN;

  // ports of submodule proc_m1_bram
  wire [31 : 0] proc_m1_bram$readRs, proc_m1_bram$write_d;
  wire [9 : 0] proc_m1_bram$readRq_idx, proc_m1_bram$write_idx;
  wire proc_m1_bram$EN_readRq, proc_m1_bram$EN_write;

  // ports of submodule rqs
  reg [64 : 0] rqs$D_IN;
  wire [64 : 0] rqs$D_OUT;
  wire rqs$CLR, rqs$DEQ, rqs$EMPTY_N, rqs$ENQ, rqs$FULL_N;

  // ports of submodule rss
  wire [31 : 0] rss$D_IN, rss$D_OUT;
  wire rss$CLR, rss$DEQ, rss$EMPTY_N, rss$ENQ, rss$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_proc_m10_decodeLd,
       WILL_FIRE_RL_proc_m10_decodeNm,
       WILL_FIRE_RL_proc_m10_decodeSt,
       WILL_FIRE_RL_proc_m11_execBypass,
       WILL_FIRE_RL_proc_m11_execNm,
       WILL_FIRE_RL_proc_m12_repLd,
       WILL_FIRE_RL_proc_m12_repLdZ,
       WILL_FIRE_RL_proc_m12_repSt,
       WILL_FIRE_RL_proc_m12_reqLd,
       WILL_FIRE_RL_proc_m12_reqSt,
       WILL_FIRE_RL_proc_m12_wbNm,
       WILL_FIRE_RL_proc_m12_wbNmZ,
       WILL_FIRE_RL_proc_m12_wrongEpoch,
       WILL_FIRE_RL_proc_m9_instFetchRq,
       WILL_FIRE_RL_proc_m9_instFetchRs,
       WILL_FIRE_RL_proc_m9_instFetchRsIgnore,
       WILL_FIRE_RL_proc_m9_modifyPc,
       WILL_FIRE_RL_proc_m9_pgmInitRq,
       WILL_FIRE_RL_proc_m9_pgmInitRqEnd,
       WILL_FIRE_RL_proc_m9_pgmInitRs,
       WILL_FIRE_RL_proc_m9_pgmInitRsEnd;

  // inputs to muxes for submodule ports
  wire [1023 : 0] MUX_proc_m3_rf$write_1__VAL_1,
		  MUX_proc_m3_rf$write_1__VAL_2;
  wire [192 : 0] MUX_proc_m8_pff_rv$port1__write_1__VAL_1,
		 MUX_proc_m8_pff_rv$port1__write_1__VAL_2;
  wire [160 : 0] MUX_proc_m5_pff_rv$port1__write_1__VAL_1,
		 MUX_proc_m5_pff_rv$port1__write_1__VAL_2,
		 MUX_proc_m5_pff_rv$port1__write_1__VAL_3;
  wire [64 : 0] MUX_rqs$enq_1__VAL_1,
		MUX_rqs$enq_1__VAL_2,
		MUX_rqs$enq_1__VAL_3;
  wire [31 : 0] MUX_proc_m4_sbFlags$write_1__VAL_1,
		MUX_proc_m4_sbFlags$write_1__VAL_3,
		MUX_proc_m4_sbFlags$write_1__VAL_4,
		MUX_proc_m4_sbFlags$write_1__VAL_5;
  wire [12 : 0] MUX_proc_m6_pff_rv$port0__write_1__VAL_1,
		MUX_proc_m6_pff_rv$port0__write_1__VAL_2;
  wire [9 : 0] MUX_proc_m9_pinitRqOfs$write_1__VAL_1,
	       MUX_proc_m9_pinitRsOfs$write_1__VAL_1;
  wire MUX_proc_m12_stall$write_1__SEL_2,
       MUX_proc_m1_readRq$write_1__SEL_1,
       MUX_proc_m4_sbFlags$write_1__SEL_1,
       MUX_proc_m4_sbFlags$write_1__SEL_3,
       MUX_proc_m6_pff_rv$port0__write_1__PSEL_1,
       MUX_proc_m6_pff_rv$port0__write_1__PSEL_2,
       MUX_proc_m6_pff_rv$port0__write_1__SEL_1,
       MUX_proc_m7_eEpoch$write_1__SEL_1,
       MUX_rqs$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8,
	       CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13,
	       IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406,
	       IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430,
	       IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442,
	       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151,
	       x_6__h36086,
	       x_9__h41143,
	       x__h32659,
	       x__h47073,
	       x__h60701,
	       y__h47208,
	       y__h60836;
  reg [11 : 0] IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840,
	       IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951,
	       x_13__h60534,
	       x_15__h46904;
  reg [7 : 0] CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11;
  reg [1 : 0] x_4__h26373;
  reg CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14,
      CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15,
      SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240,
      SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99;
  wire [959 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d717;
  wire [895 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d712;
  wire [831 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d707;
  wire [767 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d702;
  wire [703 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d697;
  wire [639 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d692;
  wire [575 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d687;
  wire [511 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d682;
  wire [447 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d677;
  wire [383 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d672;
  wire [319 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d667;
  wire [255 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d662;
  wire [191 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d657;
  wire [127 : 0] IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d652,
		 _0_CONCAT_proc_m5_pff_rv_port0__read__50_BITS_1_ETC___d437;
  wire [31 : 0] SEXT_rss_first__9_BITS_31_TO_24_20___d621,
		proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414,
		proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420,
		x0701_MINUS_y0836__q12,
		x7073_MINUS_y7208__q3,
		x_9__h28041,
		x__h25049,
		x__h28140,
		x__h32567,
		x__h36308,
		x__h40732,
		y__h36449,
		y__h36549;
  wire [15 : 0] rssD_OUT_BITS_15_TO_0__q10, rssD_OUT_BITS_31_TO_16__q9;
  wire [11 : 0] IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d828,
		IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d829,
		IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d938,
		IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d940,
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823,
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822,
		proc_m2_pff_rv_BITS_56_TO_45__q1,
		proc_m5_pff_rv_BITS_56_TO_45__q2,
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930,
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931,
		x_4__h25900,
		x__h32617,
		x__h36359,
		y__h46957,
		y__h47320,
		y__h60585,
		y__h60948;
  wire [9 : 0] x__h25017, x__h25294;
  wire [7 : 0] rssD_OUT_BITS_15_TO_8__q6,
	       rssD_OUT_BITS_23_TO_16__q7,
	       rssD_OUT_BITS_31_TO_24__q4,
	       rssD_OUT_BITS_7_TO_0__q5;
  wire [4 : 0] x_5__h32875;
  wire NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846,
       NOT_IF_proc_m8_pff_rv_port0__read__55_BITS_63__ETC___d957,
       NOT_SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4__ETC___d264,
       NOT_proc_m6_pff_rv_port0__read__9_BIT_12_0_1_A_ETC___d245,
       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d816,
       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d831,
       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d924,
       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d942,
       proc_m2_pff_rv_port0__read__2_BIT_57_3_AND_NOT_ETC___d112,
       proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459;

  // actionvalue method obtain_rq_get
  assign obtain_rq_get = rqs$D_OUT ;
  assign RDY_obtain_rq_get = rqs$EMPTY_N ;

  // action method send_rs_put
  assign RDY_send_rs_put = rss$FULL_N ;

  // submodule proc_m1_bram
  mkBramInst proc_m1_bram(.CLK(CLK),
			  .RST_N(RST_N),
			  .readRq_idx(proc_m1_bram$readRq_idx),
			  .write_d(proc_m1_bram$write_d),
			  .write_idx(proc_m1_bram$write_idx),
			  .EN_readRq(proc_m1_bram$EN_readRq),
			  .EN_write(proc_m1_bram$EN_write),
			  .RDY_readRq(),
			  .readRs(proc_m1_bram$readRs),
			  .RDY_readRs(),
			  .RDY_write());

  // submodule rqs
  FIFO2 #(.width(32'd65), .guarded(32'd1)) rqs(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rqs$D_IN),
					       .ENQ(rqs$ENQ),
					       .DEQ(rqs$DEQ),
					       .CLR(rqs$CLR),
					       .D_OUT(rqs$D_OUT),
					       .FULL_N(rqs$FULL_N),
					       .EMPTY_N(rqs$EMPTY_N));

  // submodule rss
  FIFO2 #(.width(32'd32), .guarded(32'd1)) rss(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rss$D_IN),
					       .ENQ(rss$ENQ),
					       .DEQ(rss$DEQ),
					       .CLR(rss$CLR),
					       .D_OUT(rss$D_OUT),
					       .FULL_N(rss$FULL_N),
					       .EMPTY_N(rss$EMPTY_N));

  // rule RL_proc_m9_pgmInitRq
  assign WILL_FIRE_RL_proc_m9_pgmInitRq =
	     !proc_m9_pinit && !proc_m9_pinitRq && x__h25017 != 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m9_pgmInitRqEnd
  assign WILL_FIRE_RL_proc_m9_pgmInitRqEnd =
	     !proc_m9_pinit && !proc_m9_pinitRq && x__h25017 == 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m9_pgmInitRs
  assign WILL_FIRE_RL_proc_m9_pgmInitRs =
	     !proc_m9_pinit && x__h25294 != 10'h0 && !proc_m1_readRq &&
	     rss$EMPTY_N ;

  // rule RL_proc_m9_pgmInitRsEnd
  assign WILL_FIRE_RL_proc_m9_pgmInitRsEnd =
	     !proc_m9_pinit && !proc_m1_readRq && x__h25294 == 10'h0 &&
	     rss$EMPTY_N ;

  // rule RL_proc_m9_instFetchRq
  assign WILL_FIRE_RL_proc_m9_instFetchRq = !proc_m1_readRq && proc_m9_pinit ;

  // rule RL_proc_m9_instFetchRsIgnore
  assign WILL_FIRE_RL_proc_m9_instFetchRsIgnore =
	     proc_m9_pinit && proc_m1_readRq && proc_m9_pcUpdated ;

  // rule RL_proc_m12_wrongEpoch
  assign WILL_FIRE_RL_proc_m12_wrongEpoch =
	     !proc_m12_stall && proc_m8_pff_rv[192] &&
	     !proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 ;

  // rule RL_proc_m12_reqLd
  assign WILL_FIRE_RL_proc_m12_reqLd =
	     !proc_m12_stall && proc_m8_pff_rv[192] &&
	     proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 &&
	     proc_m8_pff_rv[191:190] == 2'h0 &&
	     rqs$FULL_N &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRq ;

  // rule RL_proc_m12_reqSt
  assign WILL_FIRE_RL_proc_m12_reqSt =
	     !proc_m12_stall && proc_m8_pff_rv[192] &&
	     proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 &&
	     proc_m8_pff_rv[191:190] == 2'h1 &&
	     rqs$FULL_N &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRq ;

  // rule RL_proc_m12_wbNm
  assign WILL_FIRE_RL_proc_m12_wbNm =
	     !proc_m12_stall && proc_m8_pff_rv[192] &&
	     proc_m8_pff_rv[189:185] != 5'd0 &&
	     proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 &&
	     proc_m8_pff_rv[191:190] == 2'h3 &&
	     !proc_m6_pff_rv[12] ;

  // rule RL_proc_m12_wbNmZ
  assign WILL_FIRE_RL_proc_m12_wbNmZ =
	     !proc_m12_stall && proc_m8_pff_rv[192] &&
	     proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 &&
	     proc_m8_pff_rv[191:190] == 2'h3 &&
	     proc_m8_pff_rv[189:185] == 5'd0 &&
	     !proc_m6_pff_rv[12] ;

  // rule RL_proc_m11_execNm
  assign WILL_FIRE_RL_proc_m11_execNm =
	     proc_m5_pff_rv[160] && proc_m5_pff_rv[159:158] == 2'h3 &&
	     !proc_m8_pff_rv$port1__read[192] ;

  // rule RL_proc_m11_execBypass
  assign WILL_FIRE_RL_proc_m11_execBypass =
	     proc_m5_pff_rv[160] && proc_m5_pff_rv[159:158] != 2'h3 &&
	     !proc_m8_pff_rv$port1__read[192] &&
	     !WILL_FIRE_RL_proc_m12_wrongEpoch ;

  // rule RL_proc_m10_decodeLd
  assign WILL_FIRE_RL_proc_m10_decodeLd =
	     !proc_m6_pff_rv[12] &&
	     proc_m2_pff_rv_port0__read__2_BIT_57_3_AND_NOT_ETC___d112 &&
	     !WILL_FIRE_RL_proc_m12_wbNmZ &&
	     !WILL_FIRE_RL_proc_m12_wbNm &&
	     !WILL_FIRE_RL_proc_m12_repLdZ &&
	     !WILL_FIRE_RL_proc_m12_repLd &&
	     !WILL_FIRE_RL_proc_m12_wrongEpoch ;

  // rule RL_proc_m10_decodeSt
  assign WILL_FIRE_RL_proc_m10_decodeSt =
	     proc_m2_pff_rv[57] &&
	     NOT_proc_m6_pff_rv_port0__read__9_BIT_12_0_1_A_ETC___d245 &&
	     !WILL_FIRE_RL_proc_m11_execNm &&
	     !WILL_FIRE_RL_proc_m12_wbNmZ &&
	     !WILL_FIRE_RL_proc_m12_wbNm &&
	     !WILL_FIRE_RL_proc_m12_wrongEpoch ;

  // rule RL_proc_m10_decodeNm
  assign WILL_FIRE_RL_proc_m10_decodeNm =
	     proc_m2_pff_rv[57] && !proc_m6_pff_rv[12] &&
	     NOT_SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4__ETC___d264 &&
	     !WILL_FIRE_RL_proc_m12_wbNmZ &&
	     !WILL_FIRE_RL_proc_m12_wbNm &&
	     !WILL_FIRE_RL_proc_m12_repLdZ &&
	     !WILL_FIRE_RL_proc_m12_repLd &&
	     !WILL_FIRE_RL_proc_m12_wrongEpoch ;

  // rule RL_proc_m9_instFetchRs
  assign WILL_FIRE_RL_proc_m9_instFetchRs =
	     !proc_m9_pcUpdated && proc_m9_pinit && proc_m1_readRq &&
	     !proc_m2_pff_rv$port1__read[57] ;

  // rule RL_proc_m12_repLd
  assign WILL_FIRE_RL_proc_m12_repLd =
	     proc_m12_stalled[157:153] != 5'h0 &&
	     proc_m12_stalled[159:158] == 2'h0 &&
	     rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_pff_rv[12] &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m12_repLdZ
  assign WILL_FIRE_RL_proc_m12_repLdZ =
	     proc_m12_stalled[159:158] == 2'h0 &&
	     proc_m12_stalled[157:153] == 5'h0 &&
	     rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_pff_rv[12] &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m12_repSt
  assign WILL_FIRE_RL_proc_m12_repSt =
	     proc_m12_stalled[159:158] == 2'h1 && rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_pff_rv[12] &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m9_modifyPc
  assign WILL_FIRE_RL_proc_m9_modifyPc =
	     proc_m6_pff_rv$port1__read[12] && proc_m9_pinit ;

  // inputs to muxes for submodule ports
  assign MUX_proc_m12_stall$write_1__SEL_2 =
	     WILL_FIRE_RL_proc_m12_reqSt || WILL_FIRE_RL_proc_m12_reqLd ;
  assign MUX_proc_m1_readRq$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m9_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m9_instFetchRs ;
  assign MUX_proc_m4_sbFlags$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m12_wrongEpoch &&
	     (proc_m8_pff_rv[191:190] == 2'h0 ||
	      proc_m8_pff_rv[191:190] == 2'h3) ;
  assign MUX_proc_m4_sbFlags$write_1__SEL_3 =
	     WILL_FIRE_RL_proc_m12_repLdZ || WILL_FIRE_RL_proc_m12_repLd ;
  assign MUX_proc_m6_pff_rv$port0__write_1__PSEL_1 =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ;
  assign MUX_proc_m6_pff_rv$port0__write_1__SEL_1 =
	     MUX_proc_m6_pff_rv$port0__write_1__PSEL_1 &&
	     NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846 ;
  assign MUX_proc_m6_pff_rv$port0__write_1__PSEL_2 =
	     WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm ;
  assign MUX_proc_m7_eEpoch$write_1__SEL_1 =
	     MUX_proc_m6_pff_rv$port0__write_1__PSEL_1 &&
	     NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846 ;
  assign MUX_rqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_proc_m9_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRq ;
  assign MUX_proc_m3_rf$write_1__VAL_1 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d717,
	       (proc_m12_stalled[157:153] == 5'd1) ?
		 x_9__h41143 :
		 proc_m3_rf[63:32],
	       proc_m3_rf[31:0] } ;
  assign MUX_proc_m3_rf$write_1__VAL_2 =
	     { (proc_m8_pff_rv[189:185] == 5'd31) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[1023:992],
	       (proc_m8_pff_rv[189:185] == 5'd30) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[991:960],
	       (proc_m8_pff_rv[189:185] == 5'd29) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[959:928],
	       (proc_m8_pff_rv[189:185] == 5'd28) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[927:896],
	       (proc_m8_pff_rv[189:185] == 5'd27) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[895:864],
	       (proc_m8_pff_rv[189:185] == 5'd26) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[863:832],
	       (proc_m8_pff_rv[189:185] == 5'd25) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[831:800],
	       (proc_m8_pff_rv[189:185] == 5'd24) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[799:768],
	       (proc_m8_pff_rv[189:185] == 5'd23) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[767:736],
	       (proc_m8_pff_rv[189:185] == 5'd22) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[735:704],
	       (proc_m8_pff_rv[189:185] == 5'd21) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[703:672],
	       (proc_m8_pff_rv[189:185] == 5'd20) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[671:640],
	       (proc_m8_pff_rv[189:185] == 5'd19) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[639:608],
	       (proc_m8_pff_rv[189:185] == 5'd18) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[607:576],
	       (proc_m8_pff_rv[189:185] == 5'd17) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[575:544],
	       (proc_m8_pff_rv[189:185] == 5'd16) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[543:512],
	       (proc_m8_pff_rv[189:185] == 5'd15) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[511:480],
	       (proc_m8_pff_rv[189:185] == 5'd14) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[479:448],
	       (proc_m8_pff_rv[189:185] == 5'd13) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[447:416],
	       (proc_m8_pff_rv[189:185] == 5'd12) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[415:384],
	       (proc_m8_pff_rv[189:185] == 5'd11) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[383:352],
	       (proc_m8_pff_rv[189:185] == 5'd10) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[351:320],
	       (proc_m8_pff_rv[189:185] == 5'd9) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[319:288],
	       (proc_m8_pff_rv[189:185] == 5'd8) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[287:256],
	       (proc_m8_pff_rv[189:185] == 5'd7) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[255:224],
	       (proc_m8_pff_rv[189:185] == 5'd6) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[223:192],
	       (proc_m8_pff_rv[189:185] == 5'd5) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[191:160],
	       (proc_m8_pff_rv[189:185] == 5'd4) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[159:128],
	       (proc_m8_pff_rv[189:185] == 5'd3) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[127:96],
	       (proc_m8_pff_rv[189:185] == 5'd2) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[95:64],
	       (proc_m8_pff_rv[189:185] == 5'd1) ?
		 proc_m8_pff_rv[31:0] :
		 proc_m3_rf[63:32],
	       proc_m3_rf[31:0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_1 =
	     { proc_m8_pff_rv[189:185] != 5'd31 && proc_m4_sbFlags[31],
	       proc_m8_pff_rv[189:185] != 5'd30 && proc_m4_sbFlags[30],
	       proc_m8_pff_rv[189:185] != 5'd29 && proc_m4_sbFlags[29],
	       proc_m8_pff_rv[189:185] != 5'd28 && proc_m4_sbFlags[28],
	       proc_m8_pff_rv[189:185] != 5'd27 && proc_m4_sbFlags[27],
	       proc_m8_pff_rv[189:185] != 5'd26 && proc_m4_sbFlags[26],
	       proc_m8_pff_rv[189:185] != 5'd25 && proc_m4_sbFlags[25],
	       proc_m8_pff_rv[189:185] != 5'd24 && proc_m4_sbFlags[24],
	       proc_m8_pff_rv[189:185] != 5'd23 && proc_m4_sbFlags[23],
	       proc_m8_pff_rv[189:185] != 5'd22 && proc_m4_sbFlags[22],
	       proc_m8_pff_rv[189:185] != 5'd21 && proc_m4_sbFlags[21],
	       proc_m8_pff_rv[189:185] != 5'd20 && proc_m4_sbFlags[20],
	       proc_m8_pff_rv[189:185] != 5'd19 && proc_m4_sbFlags[19],
	       proc_m8_pff_rv[189:185] != 5'd18 && proc_m4_sbFlags[18],
	       proc_m8_pff_rv[189:185] != 5'd17 && proc_m4_sbFlags[17],
	       proc_m8_pff_rv[189:185] != 5'd16 && proc_m4_sbFlags[16],
	       proc_m8_pff_rv[189:185] != 5'd15 && proc_m4_sbFlags[15],
	       proc_m8_pff_rv[189:185] != 5'd14 && proc_m4_sbFlags[14],
	       proc_m8_pff_rv[189:185] != 5'd13 && proc_m4_sbFlags[13],
	       proc_m8_pff_rv[189:185] != 5'd12 && proc_m4_sbFlags[12],
	       proc_m8_pff_rv[189:185] != 5'd11 && proc_m4_sbFlags[11],
	       proc_m8_pff_rv[189:185] != 5'd10 && proc_m4_sbFlags[10],
	       proc_m8_pff_rv[189:185] != 5'd9 && proc_m4_sbFlags[9],
	       proc_m8_pff_rv[189:185] != 5'd8 && proc_m4_sbFlags[8],
	       proc_m8_pff_rv[189:185] != 5'd7 && proc_m4_sbFlags[7],
	       proc_m8_pff_rv[189:185] != 5'd6 && proc_m4_sbFlags[6],
	       proc_m8_pff_rv[189:185] != 5'd5 && proc_m4_sbFlags[5],
	       proc_m8_pff_rv[189:185] != 5'd4 && proc_m4_sbFlags[4],
	       proc_m8_pff_rv[189:185] != 5'd3 && proc_m4_sbFlags[3],
	       proc_m8_pff_rv[189:185] != 5'd2 && proc_m4_sbFlags[2],
	       proc_m8_pff_rv[189:185] != 5'd1 && proc_m4_sbFlags[1],
	       proc_m8_pff_rv[189:185] != 5'd0 && proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_3 =
	     { proc_m12_stalled[157:153] != 5'd31 && proc_m4_sbFlags[31],
	       proc_m12_stalled[157:153] != 5'd30 && proc_m4_sbFlags[30],
	       proc_m12_stalled[157:153] != 5'd29 && proc_m4_sbFlags[29],
	       proc_m12_stalled[157:153] != 5'd28 && proc_m4_sbFlags[28],
	       proc_m12_stalled[157:153] != 5'd27 && proc_m4_sbFlags[27],
	       proc_m12_stalled[157:153] != 5'd26 && proc_m4_sbFlags[26],
	       proc_m12_stalled[157:153] != 5'd25 && proc_m4_sbFlags[25],
	       proc_m12_stalled[157:153] != 5'd24 && proc_m4_sbFlags[24],
	       proc_m12_stalled[157:153] != 5'd23 && proc_m4_sbFlags[23],
	       proc_m12_stalled[157:153] != 5'd22 && proc_m4_sbFlags[22],
	       proc_m12_stalled[157:153] != 5'd21 && proc_m4_sbFlags[21],
	       proc_m12_stalled[157:153] != 5'd20 && proc_m4_sbFlags[20],
	       proc_m12_stalled[157:153] != 5'd19 && proc_m4_sbFlags[19],
	       proc_m12_stalled[157:153] != 5'd18 && proc_m4_sbFlags[18],
	       proc_m12_stalled[157:153] != 5'd17 && proc_m4_sbFlags[17],
	       proc_m12_stalled[157:153] != 5'd16 && proc_m4_sbFlags[16],
	       proc_m12_stalled[157:153] != 5'd15 && proc_m4_sbFlags[15],
	       proc_m12_stalled[157:153] != 5'd14 && proc_m4_sbFlags[14],
	       proc_m12_stalled[157:153] != 5'd13 && proc_m4_sbFlags[13],
	       proc_m12_stalled[157:153] != 5'd12 && proc_m4_sbFlags[12],
	       proc_m12_stalled[157:153] != 5'd11 && proc_m4_sbFlags[11],
	       proc_m12_stalled[157:153] != 5'd10 && proc_m4_sbFlags[10],
	       proc_m12_stalled[157:153] != 5'd9 && proc_m4_sbFlags[9],
	       proc_m12_stalled[157:153] != 5'd8 && proc_m4_sbFlags[8],
	       proc_m12_stalled[157:153] != 5'd7 && proc_m4_sbFlags[7],
	       proc_m12_stalled[157:153] != 5'd6 && proc_m4_sbFlags[6],
	       proc_m12_stalled[157:153] != 5'd5 && proc_m4_sbFlags[5],
	       proc_m12_stalled[157:153] != 5'd4 && proc_m4_sbFlags[4],
	       proc_m12_stalled[157:153] != 5'd3 && proc_m4_sbFlags[3],
	       proc_m12_stalled[157:153] != 5'd2 && proc_m4_sbFlags[2],
	       proc_m12_stalled[157:153] != 5'd1 && proc_m4_sbFlags[1],
	       proc_m12_stalled[157:153] != 5'h0 && proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_4 =
	     { proc_m2_pff_rv[36:32] == 5'd31 || proc_m4_sbFlags[31],
	       proc_m2_pff_rv[36:32] == 5'd30 || proc_m4_sbFlags[30],
	       proc_m2_pff_rv[36:32] == 5'd29 || proc_m4_sbFlags[29],
	       proc_m2_pff_rv[36:32] == 5'd28 || proc_m4_sbFlags[28],
	       proc_m2_pff_rv[36:32] == 5'd27 || proc_m4_sbFlags[27],
	       proc_m2_pff_rv[36:32] == 5'd26 || proc_m4_sbFlags[26],
	       proc_m2_pff_rv[36:32] == 5'd25 || proc_m4_sbFlags[25],
	       proc_m2_pff_rv[36:32] == 5'd24 || proc_m4_sbFlags[24],
	       proc_m2_pff_rv[36:32] == 5'd23 || proc_m4_sbFlags[23],
	       proc_m2_pff_rv[36:32] == 5'd22 || proc_m4_sbFlags[22],
	       proc_m2_pff_rv[36:32] == 5'd21 || proc_m4_sbFlags[21],
	       proc_m2_pff_rv[36:32] == 5'd20 || proc_m4_sbFlags[20],
	       proc_m2_pff_rv[36:32] == 5'd19 || proc_m4_sbFlags[19],
	       proc_m2_pff_rv[36:32] == 5'd18 || proc_m4_sbFlags[18],
	       proc_m2_pff_rv[36:32] == 5'd17 || proc_m4_sbFlags[17],
	       proc_m2_pff_rv[36:32] == 5'd16 || proc_m4_sbFlags[16],
	       proc_m2_pff_rv[36:32] == 5'd15 || proc_m4_sbFlags[15],
	       proc_m2_pff_rv[36:32] == 5'd14 || proc_m4_sbFlags[14],
	       proc_m2_pff_rv[36:32] == 5'd13 || proc_m4_sbFlags[13],
	       proc_m2_pff_rv[36:32] == 5'd12 || proc_m4_sbFlags[12],
	       proc_m2_pff_rv[36:32] == 5'd11 || proc_m4_sbFlags[11],
	       proc_m2_pff_rv[36:32] == 5'd10 || proc_m4_sbFlags[10],
	       proc_m2_pff_rv[36:32] == 5'd9 || proc_m4_sbFlags[9],
	       proc_m2_pff_rv[36:32] == 5'd8 || proc_m4_sbFlags[8],
	       proc_m2_pff_rv[36:32] == 5'd7 || proc_m4_sbFlags[7],
	       proc_m2_pff_rv[36:32] == 5'd6 || proc_m4_sbFlags[6],
	       proc_m2_pff_rv[36:32] == 5'd5 || proc_m4_sbFlags[5],
	       proc_m2_pff_rv[36:32] == 5'd4 || proc_m4_sbFlags[4],
	       proc_m2_pff_rv[36:32] == 5'd3 || proc_m4_sbFlags[3],
	       proc_m2_pff_rv[36:32] == 5'd2 || proc_m4_sbFlags[2],
	       proc_m2_pff_rv[36:32] == 5'd1 || proc_m4_sbFlags[1],
	       proc_m2_pff_rv[36:32] == 5'd0 || proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_5 =
	     { x_5__h32875 == 5'd31 || proc_m4_sbFlags[31],
	       x_5__h32875 == 5'd30 || proc_m4_sbFlags[30],
	       x_5__h32875 == 5'd29 || proc_m4_sbFlags[29],
	       x_5__h32875 == 5'd28 || proc_m4_sbFlags[28],
	       x_5__h32875 == 5'd27 || proc_m4_sbFlags[27],
	       x_5__h32875 == 5'd26 || proc_m4_sbFlags[26],
	       x_5__h32875 == 5'd25 || proc_m4_sbFlags[25],
	       x_5__h32875 == 5'd24 || proc_m4_sbFlags[24],
	       x_5__h32875 == 5'd23 || proc_m4_sbFlags[23],
	       x_5__h32875 == 5'd22 || proc_m4_sbFlags[22],
	       x_5__h32875 == 5'd21 || proc_m4_sbFlags[21],
	       x_5__h32875 == 5'd20 || proc_m4_sbFlags[20],
	       x_5__h32875 == 5'd19 || proc_m4_sbFlags[19],
	       x_5__h32875 == 5'd18 || proc_m4_sbFlags[18],
	       x_5__h32875 == 5'd17 || proc_m4_sbFlags[17],
	       x_5__h32875 == 5'd16 || proc_m4_sbFlags[16],
	       x_5__h32875 == 5'd15 || proc_m4_sbFlags[15],
	       x_5__h32875 == 5'd14 || proc_m4_sbFlags[14],
	       x_5__h32875 == 5'd13 || proc_m4_sbFlags[13],
	       x_5__h32875 == 5'd12 || proc_m4_sbFlags[12],
	       x_5__h32875 == 5'd11 || proc_m4_sbFlags[11],
	       x_5__h32875 == 5'd10 || proc_m4_sbFlags[10],
	       x_5__h32875 == 5'd9 || proc_m4_sbFlags[9],
	       x_5__h32875 == 5'd8 || proc_m4_sbFlags[8],
	       x_5__h32875 == 5'd7 || proc_m4_sbFlags[7],
	       x_5__h32875 == 5'd6 || proc_m4_sbFlags[6],
	       x_5__h32875 == 5'd5 || proc_m4_sbFlags[5],
	       x_5__h32875 == 5'd4 || proc_m4_sbFlags[4],
	       x_5__h32875 == 5'd3 || proc_m4_sbFlags[3],
	       x_5__h32875 == 5'd2 || proc_m4_sbFlags[2],
	       x_5__h32875 == 5'd1 || proc_m4_sbFlags[1],
	       x_5__h32875 == 5'd0 || proc_m4_sbFlags[0] } ;
  assign MUX_proc_m5_pff_rv$port1__write_1__VAL_1 =
	     { 1'd1,
	       x_4__h26373,
	       proc_m2_pff_rv[36:32],
	       x__h28140,
	       64'd0,
	       proc_m2_pff_rv[56:0] } ;
  assign MUX_proc_m5_pff_rv$port1__write_1__VAL_2 =
	     { 1'd1,
	       x_4__h26373,
	       5'h0,
	       x__h32567,
	       x__h32659,
	       32'h0,
	       proc_m2_pff_rv[56:0] } ;
  assign MUX_proc_m5_pff_rv$port1__write_1__VAL_3 =
	     { 1'd1,
	       x_4__h26373,
	       x_5__h32875,
	       32'h0,
	       SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151,
	       x__h32659,
	       proc_m2_pff_rv[56:0] } ;
  assign MUX_proc_m6_pff_rv$port0__write_1__VAL_1 = { 1'd1, x_15__h46904 } ;
  assign MUX_proc_m6_pff_rv$port0__write_1__VAL_2 = { 1'd1, x_13__h60534 } ;
  assign MUX_proc_m8_pff_rv$port1__write_1__VAL_1 =
	     { 1'd1, proc_m5_pff_rv[159:0], x_6__h36086 } ;
  assign MUX_proc_m8_pff_rv$port1__write_1__VAL_2 =
	     { 1'd1, proc_m5_pff_rv[159:0], 32'h0 } ;
  assign MUX_proc_m9_pinitRqOfs$write_1__VAL_1 =
	     proc_m9_pinitRqOfs + 10'h001 ;
  assign MUX_proc_m9_pinitRsOfs$write_1__VAL_1 =
	     proc_m9_pinitRsOfs + 10'h001 ;
  assign MUX_rqs$enq_1__VAL_1 = { x__h25049, 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_2 = { x__h40732, 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_3 =
	     { proc_m8_pff_rv[184:153], 1'd1, proc_m8_pff_rv[152:121] } ;

  // inlined wires
  assign proc_m2_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m10_decodeNm ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeLd ;
  assign proc_m2_pff_rv$port1__read =
	     proc_m2_pff_rv$EN_port0__write ?
	       58'h0AAAAAAAAAAAAAA :
	       proc_m2_pff_rv ;
  assign proc_m2_pff_rv$port1__write_1 =
	     { 1'd1,
	       proc_m1_bram$readRs,
	       proc_m9_pc,
	       x_4__h25900,
	       proc_m9_fEpoch } ;
  assign proc_m2_pff_rv$port2__read =
	     WILL_FIRE_RL_proc_m9_instFetchRs ?
	       proc_m2_pff_rv$port1__write_1 :
	       proc_m2_pff_rv$port1__read ;
  assign proc_m2_pff_rv$port3__read =
	     WILL_FIRE_RL_proc_m9_modifyPc ?
	       58'h0AAAAAAAAAAAAAA :
	       proc_m2_pff_rv$port2__read ;
  assign proc_m5_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m11_execBypass ||
	     WILL_FIRE_RL_proc_m11_execNm ;
  assign proc_m5_pff_rv$port1__read =
	     proc_m5_pff_rv$EN_port0__write ?
	       161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       proc_m5_pff_rv ;
  assign proc_m5_pff_rv$EN_port1__write =
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeNm ;
  always@(WILL_FIRE_RL_proc_m10_decodeLd or
	  MUX_proc_m5_pff_rv$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_proc_m10_decodeSt or
	  MUX_proc_m5_pff_rv$port1__write_1__VAL_2 or
	  WILL_FIRE_RL_proc_m10_decodeNm or
	  MUX_proc_m5_pff_rv$port1__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_proc_m10_decodeLd:
	  proc_m5_pff_rv$port1__write_1 =
	      MUX_proc_m5_pff_rv$port1__write_1__VAL_1;
      WILL_FIRE_RL_proc_m10_decodeSt:
	  proc_m5_pff_rv$port1__write_1 =
	      MUX_proc_m5_pff_rv$port1__write_1__VAL_2;
      WILL_FIRE_RL_proc_m10_decodeNm:
	  proc_m5_pff_rv$port1__write_1 =
	      MUX_proc_m5_pff_rv$port1__write_1__VAL_3;
      default: proc_m5_pff_rv$port1__write_1 =
		   161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m5_pff_rv$port2__read =
	     proc_m5_pff_rv$EN_port1__write ?
	       proc_m5_pff_rv$port1__write_1 :
	       proc_m5_pff_rv$port1__read ;
  assign proc_m6_pff_rv$EN_port0__write =
	     (WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	      WILL_FIRE_RL_proc_m12_repLd) &&
	     NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846 ||
	     (WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm) &&
	     NOT_IF_proc_m8_pff_rv_port0__read__55_BITS_63__ETC___d957 ;
  assign proc_m6_pff_rv$port0__write_1 =
	     MUX_proc_m6_pff_rv$port0__write_1__SEL_1 ?
	       MUX_proc_m6_pff_rv$port0__write_1__VAL_1 :
	       MUX_proc_m6_pff_rv$port0__write_1__VAL_2 ;
  assign proc_m6_pff_rv$port1__read =
	     proc_m6_pff_rv$EN_port0__write ?
	       proc_m6_pff_rv$port0__write_1 :
	       proc_m6_pff_rv ;
  assign proc_m6_pff_rv$port2__read =
	     WILL_FIRE_RL_proc_m9_modifyPc ?
	       13'd2730 :
	       proc_m6_pff_rv$port1__read ;
  assign proc_m8_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm ||
	     WILL_FIRE_RL_proc_m12_reqSt ||
	     WILL_FIRE_RL_proc_m12_reqLd ||
	     WILL_FIRE_RL_proc_m12_wrongEpoch ;
  assign proc_m8_pff_rv$port1__read =
	     proc_m8_pff_rv$EN_port0__write ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       proc_m8_pff_rv ;
  assign proc_m8_pff_rv$EN_port1__write =
	     WILL_FIRE_RL_proc_m11_execNm ||
	     WILL_FIRE_RL_proc_m11_execBypass ;
  assign proc_m8_pff_rv$port1__write_1 =
	     WILL_FIRE_RL_proc_m11_execNm ?
	       MUX_proc_m8_pff_rv$port1__write_1__VAL_1 :
	       MUX_proc_m8_pff_rv$port1__write_1__VAL_2 ;
  assign proc_m8_pff_rv$port2__read =
	     proc_m8_pff_rv$EN_port1__write ?
	       proc_m8_pff_rv$port1__write_1 :
	       proc_m8_pff_rv$port1__read ;

  // register proc_m12_lastPc
  assign proc_m12_lastPc$D_IN =
	     MUX_proc_m6_pff_rv$port0__write_1__PSEL_1 ?
	       proc_m12_stalled[24:13] :
	       proc_m8_pff_rv[56:45] ;
  assign proc_m12_lastPc$EN =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m12_wbNmZ ||
	     WILL_FIRE_RL_proc_m12_wbNm ;

  // register proc_m12_stall
  assign proc_m12_stall$D_IN = !MUX_proc_m6_pff_rv$port0__write_1__PSEL_1 ;
  assign proc_m12_stall$EN =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m12_reqSt ||
	     WILL_FIRE_RL_proc_m12_reqLd ;

  // register proc_m12_stalled
  assign proc_m12_stalled$D_IN = proc_m8_pff_rv[191:32] ;
  assign proc_m12_stalled$EN = MUX_proc_m12_stall$write_1__SEL_2 ;

  // register proc_m1_readRq
  assign proc_m1_readRq$D_IN = !MUX_proc_m1_readRq$write_1__SEL_1 ;
  assign proc_m1_readRq$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m9_instFetchRs ||
	     WILL_FIRE_RL_proc_m9_instFetchRq ;

  // register proc_m2_pff_rv
  assign proc_m2_pff_rv$D_IN = proc_m2_pff_rv$port3__read ;
  assign proc_m2_pff_rv$EN = 1'b1 ;

  // register proc_m3_rf
  assign proc_m3_rf$D_IN =
	     WILL_FIRE_RL_proc_m12_repLd ?
	       MUX_proc_m3_rf$write_1__VAL_1 :
	       MUX_proc_m3_rf$write_1__VAL_2 ;
  assign proc_m3_rf$EN =
	     WILL_FIRE_RL_proc_m12_repLd || WILL_FIRE_RL_proc_m12_wbNm ;

  // register proc_m4_sbFlags
  always@(MUX_proc_m4_sbFlags$write_1__SEL_1 or
	  MUX_proc_m4_sbFlags$write_1__VAL_1 or
	  MUX_proc_m6_pff_rv$port0__write_1__PSEL_2 or
	  MUX_proc_m4_sbFlags$write_1__SEL_3 or
	  MUX_proc_m4_sbFlags$write_1__VAL_3 or
	  WILL_FIRE_RL_proc_m10_decodeLd or
	  MUX_proc_m4_sbFlags$write_1__VAL_4 or
	  WILL_FIRE_RL_proc_m10_decodeNm or
	  MUX_proc_m4_sbFlags$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_proc_m4_sbFlags$write_1__SEL_1:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_1;
      MUX_proc_m6_pff_rv$port0__write_1__PSEL_2:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_1;
      MUX_proc_m4_sbFlags$write_1__SEL_3:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_3;
      WILL_FIRE_RL_proc_m10_decodeLd:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_4;
      WILL_FIRE_RL_proc_m10_decodeNm:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_5;
      default: proc_m4_sbFlags$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m4_sbFlags$EN =
	     WILL_FIRE_RL_proc_m12_wrongEpoch &&
	     (proc_m8_pff_rv[191:190] == 2'h0 ||
	      proc_m8_pff_rv[191:190] == 2'h3) ||
	     WILL_FIRE_RL_proc_m12_wbNmZ ||
	     WILL_FIRE_RL_proc_m12_wbNm ||
	     WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m10_decodeNm ;

  // register proc_m5_pff_rv
  assign proc_m5_pff_rv$D_IN = proc_m5_pff_rv$port2__read ;
  assign proc_m5_pff_rv$EN = 1'b1 ;

  // register proc_m6_pff_rv
  assign proc_m6_pff_rv$D_IN = proc_m6_pff_rv$port2__read ;
  assign proc_m6_pff_rv$EN = 1'b1 ;

  // register proc_m7_eEpoch
  assign proc_m7_eEpoch$D_IN =
	     MUX_proc_m7_eEpoch$write_1__SEL_1 ?
	       !proc_m7_eEpoch :
	       !proc_m7_eEpoch ;
  assign proc_m7_eEpoch$EN =
	     (WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	      WILL_FIRE_RL_proc_m12_repLd) &&
	     NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846 ||
	     (WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm) &&
	     NOT_IF_proc_m8_pff_rv_port0__read__55_BITS_63__ETC___d957 ;

  // register proc_m8_pff_rv
  assign proc_m8_pff_rv$D_IN = proc_m8_pff_rv$port2__read ;
  assign proc_m8_pff_rv$EN = 1'b1 ;

  // register proc_m9_fEpoch
  assign proc_m9_fEpoch$D_IN = !proc_m9_fEpoch ;
  assign proc_m9_fEpoch$EN = WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m9_pc
  assign proc_m9_pc$D_IN =
	     WILL_FIRE_RL_proc_m9_modifyPc ?
	       proc_m6_pff_rv$port1__read[11:0] :
	       x_4__h25900 ;
  assign proc_m9_pc$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRs ||
	     WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m9_pcUpdated
  assign proc_m9_pcUpdated$D_IN = WILL_FIRE_RL_proc_m9_modifyPc ;
  assign proc_m9_pcUpdated$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m9_instFetchRq ||
	     WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m9_pinit
  assign proc_m9_pinit$D_IN = 1'd1 ;
  assign proc_m9_pinit$EN = WILL_FIRE_RL_proc_m9_pgmInitRsEnd ;

  // register proc_m9_pinitRq
  assign proc_m9_pinitRq$D_IN = 1'd1 ;
  assign proc_m9_pinitRq$EN = WILL_FIRE_RL_proc_m9_pgmInitRqEnd ;

  // register proc_m9_pinitRqOfs
  assign proc_m9_pinitRqOfs$D_IN =
	     WILL_FIRE_RL_proc_m9_pgmInitRq ?
	       MUX_proc_m9_pinitRqOfs$write_1__VAL_1 :
	       10'h0 ;
  assign proc_m9_pinitRqOfs$EN =
	     WILL_FIRE_RL_proc_m9_pgmInitRq ||
	     WILL_FIRE_RL_proc_m9_pgmInitRqEnd ;

  // register proc_m9_pinitRsOfs
  assign proc_m9_pinitRsOfs$D_IN =
	     WILL_FIRE_RL_proc_m9_pgmInitRs ?
	       MUX_proc_m9_pinitRsOfs$write_1__VAL_1 :
	       10'h0 ;
  assign proc_m9_pinitRsOfs$EN =
	     WILL_FIRE_RL_proc_m9_pgmInitRs ||
	     WILL_FIRE_RL_proc_m9_pgmInitRsEnd ;

  // submodule proc_m1_bram
  assign proc_m1_bram$readRq_idx = proc_m9_pc[11:2] ;
  assign proc_m1_bram$write_d = rss$D_OUT ;
  assign proc_m1_bram$write_idx = proc_m9_pinitRsOfs ;
  assign proc_m1_bram$EN_readRq = WILL_FIRE_RL_proc_m9_instFetchRq ;
  assign proc_m1_bram$EN_write =
	     WILL_FIRE_RL_proc_m9_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // submodule rqs
  always@(MUX_rqs$enq_1__SEL_1 or
	  MUX_rqs$enq_1__VAL_1 or
	  WILL_FIRE_RL_proc_m12_reqLd or
	  MUX_rqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_proc_m12_reqSt or MUX_rqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rqs$enq_1__SEL_1: rqs$D_IN = MUX_rqs$enq_1__VAL_1;
      WILL_FIRE_RL_proc_m12_reqLd: rqs$D_IN = MUX_rqs$enq_1__VAL_2;
      WILL_FIRE_RL_proc_m12_reqSt: rqs$D_IN = MUX_rqs$enq_1__VAL_3;
      default: rqs$D_IN = 65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rqs$ENQ =
	     WILL_FIRE_RL_proc_m9_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRq ||
	     WILL_FIRE_RL_proc_m12_reqLd ||
	     WILL_FIRE_RL_proc_m12_reqSt ;
  assign rqs$DEQ = EN_obtain_rq_get ;
  assign rqs$CLR = 1'b0 ;

  // submodule rss
  assign rss$D_IN = send_rs_put ;
  assign rss$ENQ = EN_send_rs_put ;
  assign rss$DEQ =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRs ;
  assign rss$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d828 =
	     x7073_MINUS_y7208__q3[31] ?
	       proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 :
	       proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 ;
  assign IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d829 =
	     x7073_MINUS_y7208__q3[31] ?
	       proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 :
	       proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 ;
  assign IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d938 =
	     x0701_MINUS_y0836__q12[31] ?
	       proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 :
	       proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 ;
  assign IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d940 =
	     x0701_MINUS_y0836__q12[31] ?
	       proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 :
	       proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d652 =
	     { (proc_m12_stalled[157:153] == 5'd31) ?
		 x_9__h41143 :
		 proc_m3_rf[1023:992],
	       (proc_m12_stalled[157:153] == 5'd30) ?
		 x_9__h41143 :
		 proc_m3_rf[991:960],
	       (proc_m12_stalled[157:153] == 5'd29) ?
		 x_9__h41143 :
		 proc_m3_rf[959:928],
	       (proc_m12_stalled[157:153] == 5'd28) ?
		 x_9__h41143 :
		 proc_m3_rf[927:896] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d657 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d652,
	       (proc_m12_stalled[157:153] == 5'd27) ?
		 x_9__h41143 :
		 proc_m3_rf[895:864],
	       (proc_m12_stalled[157:153] == 5'd26) ?
		 x_9__h41143 :
		 proc_m3_rf[863:832] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d662 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d657,
	       (proc_m12_stalled[157:153] == 5'd25) ?
		 x_9__h41143 :
		 proc_m3_rf[831:800],
	       (proc_m12_stalled[157:153] == 5'd24) ?
		 x_9__h41143 :
		 proc_m3_rf[799:768] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d667 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d662,
	       (proc_m12_stalled[157:153] == 5'd23) ?
		 x_9__h41143 :
		 proc_m3_rf[767:736],
	       (proc_m12_stalled[157:153] == 5'd22) ?
		 x_9__h41143 :
		 proc_m3_rf[735:704] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d672 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d667,
	       (proc_m12_stalled[157:153] == 5'd21) ?
		 x_9__h41143 :
		 proc_m3_rf[703:672],
	       (proc_m12_stalled[157:153] == 5'd20) ?
		 x_9__h41143 :
		 proc_m3_rf[671:640] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d677 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d672,
	       (proc_m12_stalled[157:153] == 5'd19) ?
		 x_9__h41143 :
		 proc_m3_rf[639:608],
	       (proc_m12_stalled[157:153] == 5'd18) ?
		 x_9__h41143 :
		 proc_m3_rf[607:576] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d682 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d677,
	       (proc_m12_stalled[157:153] == 5'd17) ?
		 x_9__h41143 :
		 proc_m3_rf[575:544],
	       (proc_m12_stalled[157:153] == 5'd16) ?
		 x_9__h41143 :
		 proc_m3_rf[543:512] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d687 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d682,
	       (proc_m12_stalled[157:153] == 5'd15) ?
		 x_9__h41143 :
		 proc_m3_rf[511:480],
	       (proc_m12_stalled[157:153] == 5'd14) ?
		 x_9__h41143 :
		 proc_m3_rf[479:448] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d692 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d687,
	       (proc_m12_stalled[157:153] == 5'd13) ?
		 x_9__h41143 :
		 proc_m3_rf[447:416],
	       (proc_m12_stalled[157:153] == 5'd12) ?
		 x_9__h41143 :
		 proc_m3_rf[415:384] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d697 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d692,
	       (proc_m12_stalled[157:153] == 5'd11) ?
		 x_9__h41143 :
		 proc_m3_rf[383:352],
	       (proc_m12_stalled[157:153] == 5'd10) ?
		 x_9__h41143 :
		 proc_m3_rf[351:320] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d702 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d697,
	       (proc_m12_stalled[157:153] == 5'd9) ?
		 x_9__h41143 :
		 proc_m3_rf[319:288],
	       (proc_m12_stalled[157:153] == 5'd8) ?
		 x_9__h41143 :
		 proc_m3_rf[287:256] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d707 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d702,
	       (proc_m12_stalled[157:153] == 5'd7) ?
		 x_9__h41143 :
		 proc_m3_rf[255:224],
	       (proc_m12_stalled[157:153] == 5'd6) ?
		 x_9__h41143 :
		 proc_m3_rf[223:192] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d712 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d707,
	       (proc_m12_stalled[157:153] == 5'd5) ?
		 x_9__h41143 :
		 proc_m3_rf[191:160],
	       (proc_m12_stalled[157:153] == 5'd4) ?
		 x_9__h41143 :
		 proc_m3_rf[159:128] } ;
  assign IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d717 =
	     { IF_proc_m12_stalled_97_BITS_157_TO_153_98_EQ_3_ETC___d712,
	       (proc_m12_stalled[157:153] == 5'd3) ?
		 x_9__h41143 :
		 proc_m3_rf[127:96],
	       (proc_m12_stalled[157:153] == 5'd2) ?
		 x_9__h41143 :
		 proc_m3_rf[95:64] } ;
  assign NOT_IF_proc_m12_stalled_97_BITS_31_TO_25_01_EQ_ETC___d846 =
	     x_15__h46904 != proc_m12_stalled[12:1] ;
  assign NOT_IF_proc_m8_pff_rv_port0__read__55_BITS_63__ETC___d957 =
	     x_13__h60534 != proc_m8_pff_rv[44:33] ;
  assign NOT_SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4__ETC___d264 =
	     !SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 &&
	     !SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 &&
	     !CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 &&
	     proc_m2_pff_rv[31:25] != 7'h03 &&
	     proc_m2_pff_rv[31:25] != 7'h23 &&
	     !proc_m5_pff_rv$port1__read[160] ;
  assign NOT_proc_m6_pff_rv_port0__read__9_BIT_12_0_1_A_ETC___d245 =
	     !proc_m6_pff_rv[12] &&
	     !SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 &&
	     !SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 &&
	     proc_m2_pff_rv[31:25] == 7'h23 &&
	     !proc_m5_pff_rv$port1__read[160] ;
  assign SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d816 =
	     x__h47073 == y__h47208 ;
  assign SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d831 =
	     x__h47073 < y__h47208 ;
  assign SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d924 =
	     x__h60701 == y__h60836 ;
  assign SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d942 =
	     x__h60701 < y__h60836 ;
  assign SEXT_rss_first__9_BITS_31_TO_24_20___d621 =
	     { {24{rssD_OUT_BITS_31_TO_24__q4[7]}},
	       rssD_OUT_BITS_31_TO_24__q4 } ;
  assign _0_CONCAT_proc_m5_pff_rv_port0__read__50_BITS_1_ETC___d437 =
	     { 32'd0, proc_m5_pff_rv[120:89] } *
	     { 32'd0, proc_m5_pff_rv[88:57] } ;
  assign proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 =
	     proc_m12_stalled[24:13] + 12'h004 ;
  assign proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 =
	     proc_m12_stalled[24:13] + y__h47320 ;
  assign proc_m2_pff_rv_BITS_56_TO_45__q1 = proc_m2_pff_rv[56:45] ;
  assign proc_m2_pff_rv_port0__read__2_BIT_57_3_AND_NOT_ETC___d112 =
	     proc_m2_pff_rv[57] &&
	     !SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 &&
	     !CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 &&
	     proc_m2_pff_rv[31:25] == 7'h03 &&
	     !proc_m5_pff_rv$port1__read[160] ;
  assign proc_m5_pff_rv_BITS_56_TO_45__q2 = proc_m5_pff_rv[56:45] ;
  assign proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414 =
	     proc_m5_pff_rv[120:89] - proc_m5_pff_rv[88:57] ;
  assign proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420 =
	     proc_m5_pff_rv[120:89] >> proc_m5_pff_rv[61:57] ;
  assign proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 =
	     proc_m8_pff_rv[56:45] + y__h60948 ;
  assign proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 =
	     proc_m8_pff_rv[56:45] + 12'h004 ;
  assign proc_m8_pff_rv_port0__read__55_BIT_32_57_EQ_pr_ETC___d459 =
	     proc_m8_pff_rv[32] == proc_m7_eEpoch ;
  assign rssD_OUT_BITS_15_TO_0__q10 = rss$D_OUT[15:0] ;
  assign rssD_OUT_BITS_15_TO_8__q6 = rss$D_OUT[15:8] ;
  assign rssD_OUT_BITS_23_TO_16__q7 = rss$D_OUT[23:16] ;
  assign rssD_OUT_BITS_31_TO_16__q9 = rss$D_OUT[31:16] ;
  assign rssD_OUT_BITS_31_TO_24__q4 = rss$D_OUT[31:24] ;
  assign rssD_OUT_BITS_7_TO_0__q5 = rss$D_OUT[7:0] ;
  assign x0701_MINUS_y0836__q12 = x__h60701 - y__h60836 ;
  assign x7073_MINUS_y7208__q3 = x__h47073 - y__h47208 ;
  assign x_4__h25900 = proc_m9_pc + 12'h004 ;
  assign x_5__h32875 =
	     (proc_m2_pff_rv[31:25] == 7'h63) ? 5'h0 : proc_m2_pff_rv[36:32] ;
  assign x_9__h28041 =
	     { {20{proc_m2_pff_rv_BITS_56_TO_45__q1[11]}},
	       proc_m2_pff_rv_BITS_56_TO_45__q1 } ;
  assign x__h25017 = ~proc_m9_pinitRqOfs ;
  assign x__h25049 = { 20'd0, proc_m9_pinitRqOfs, 2'd0 } ;
  assign x__h25294 = ~proc_m9_pinitRsOfs ;
  assign x__h28140 =
	     SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 +
	     x_9__h28041 ;
  assign x__h32567 =
	     SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 +
	     { {20{x__h32617[11]}}, x__h32617 } ;
  assign x__h32617 = { proc_m2_pff_rv[56:50], proc_m2_pff_rv[36:32] } ;
  assign x__h36308 = { 20'd0, proc_m5_pff_rv[24:13] } ;
  assign x__h36359 = proc_m5_pff_rv[24:13] + 12'h004 ;
  assign x__h40732 = { proc_m8_pff_rv[184:155], 2'h0 } ;
  assign y__h36449 =
	     { {20{proc_m5_pff_rv_BITS_56_TO_45__q2[11]}},
	       proc_m5_pff_rv_BITS_56_TO_45__q2 } ;
  assign y__h36549 = { 20'd0, proc_m5_pff_rv[56:45] } ;
  assign y__h46957 = { proc_m12_stalled[45], proc_m12_stalled[55:46], 1'h0 } ;
  assign y__h47320 =
	     { proc_m12_stalled[32],
	       proc_m12_stalled[55:50],
	       proc_m12_stalled[36:33],
	       1'h0 } ;
  assign y__h60585 = { proc_m8_pff_rv[77], proc_m8_pff_rv[87:78], 1'h0 } ;
  assign y__h60948 =
	     { proc_m8_pff_rv[64],
	       proc_m8_pff_rv[87:82],
	       proc_m8_pff_rv[68:65],
	       1'h0 } ;
  always@(proc_m2_pff_rv)
  begin
    case (proc_m2_pff_rv[31:25])
      7'h03: x_4__h26373 = 2'h0;
      7'h23: x_4__h26373 = 2'h1;
      default: x_4__h26373 = 2'h3;
    endcase
  end
  always@(proc_m2_pff_rv or proc_m3_rf)
  begin
    case (proc_m2_pff_rv[49:45])
      5'd0: x__h32659 = proc_m3_rf[31:0];
      5'd1: x__h32659 = proc_m3_rf[63:32];
      5'd2: x__h32659 = proc_m3_rf[95:64];
      5'd3: x__h32659 = proc_m3_rf[127:96];
      5'd4: x__h32659 = proc_m3_rf[159:128];
      5'd5: x__h32659 = proc_m3_rf[191:160];
      5'd6: x__h32659 = proc_m3_rf[223:192];
      5'd7: x__h32659 = proc_m3_rf[255:224];
      5'd8: x__h32659 = proc_m3_rf[287:256];
      5'd9: x__h32659 = proc_m3_rf[319:288];
      5'd10: x__h32659 = proc_m3_rf[351:320];
      5'd11: x__h32659 = proc_m3_rf[383:352];
      5'd12: x__h32659 = proc_m3_rf[415:384];
      5'd13: x__h32659 = proc_m3_rf[447:416];
      5'd14: x__h32659 = proc_m3_rf[479:448];
      5'd15: x__h32659 = proc_m3_rf[511:480];
      5'd16: x__h32659 = proc_m3_rf[543:512];
      5'd17: x__h32659 = proc_m3_rf[575:544];
      5'd18: x__h32659 = proc_m3_rf[607:576];
      5'd19: x__h32659 = proc_m3_rf[639:608];
      5'd20: x__h32659 = proc_m3_rf[671:640];
      5'd21: x__h32659 = proc_m3_rf[703:672];
      5'd22: x__h32659 = proc_m3_rf[735:704];
      5'd23: x__h32659 = proc_m3_rf[767:736];
      5'd24: x__h32659 = proc_m3_rf[799:768];
      5'd25: x__h32659 = proc_m3_rf[831:800];
      5'd26: x__h32659 = proc_m3_rf[863:832];
      5'd27: x__h32659 = proc_m3_rf[895:864];
      5'd28: x__h32659 = proc_m3_rf[927:896];
      5'd29: x__h32659 = proc_m3_rf[959:928];
      5'd30: x__h32659 = proc_m3_rf[991:960];
      5'd31: x__h32659 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m12_stalled or proc_m3_rf)
  begin
    case (proc_m12_stalled[44:40])
      5'd0: x__h47073 = proc_m3_rf[31:0];
      5'd1: x__h47073 = proc_m3_rf[63:32];
      5'd2: x__h47073 = proc_m3_rf[95:64];
      5'd3: x__h47073 = proc_m3_rf[127:96];
      5'd4: x__h47073 = proc_m3_rf[159:128];
      5'd5: x__h47073 = proc_m3_rf[191:160];
      5'd6: x__h47073 = proc_m3_rf[223:192];
      5'd7: x__h47073 = proc_m3_rf[255:224];
      5'd8: x__h47073 = proc_m3_rf[287:256];
      5'd9: x__h47073 = proc_m3_rf[319:288];
      5'd10: x__h47073 = proc_m3_rf[351:320];
      5'd11: x__h47073 = proc_m3_rf[383:352];
      5'd12: x__h47073 = proc_m3_rf[415:384];
      5'd13: x__h47073 = proc_m3_rf[447:416];
      5'd14: x__h47073 = proc_m3_rf[479:448];
      5'd15: x__h47073 = proc_m3_rf[511:480];
      5'd16: x__h47073 = proc_m3_rf[543:512];
      5'd17: x__h47073 = proc_m3_rf[575:544];
      5'd18: x__h47073 = proc_m3_rf[607:576];
      5'd19: x__h47073 = proc_m3_rf[639:608];
      5'd20: x__h47073 = proc_m3_rf[671:640];
      5'd21: x__h47073 = proc_m3_rf[703:672];
      5'd22: x__h47073 = proc_m3_rf[735:704];
      5'd23: x__h47073 = proc_m3_rf[767:736];
      5'd24: x__h47073 = proc_m3_rf[799:768];
      5'd25: x__h47073 = proc_m3_rf[831:800];
      5'd26: x__h47073 = proc_m3_rf[863:832];
      5'd27: x__h47073 = proc_m3_rf[895:864];
      5'd28: x__h47073 = proc_m3_rf[927:896];
      5'd29: x__h47073 = proc_m3_rf[959:928];
      5'd30: x__h47073 = proc_m3_rf[991:960];
      5'd31: x__h47073 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m12_stalled or proc_m3_rf)
  begin
    case (proc_m12_stalled[49:45])
      5'd0: y__h47208 = proc_m3_rf[31:0];
      5'd1: y__h47208 = proc_m3_rf[63:32];
      5'd2: y__h47208 = proc_m3_rf[95:64];
      5'd3: y__h47208 = proc_m3_rf[127:96];
      5'd4: y__h47208 = proc_m3_rf[159:128];
      5'd5: y__h47208 = proc_m3_rf[191:160];
      5'd6: y__h47208 = proc_m3_rf[223:192];
      5'd7: y__h47208 = proc_m3_rf[255:224];
      5'd8: y__h47208 = proc_m3_rf[287:256];
      5'd9: y__h47208 = proc_m3_rf[319:288];
      5'd10: y__h47208 = proc_m3_rf[351:320];
      5'd11: y__h47208 = proc_m3_rf[383:352];
      5'd12: y__h47208 = proc_m3_rf[415:384];
      5'd13: y__h47208 = proc_m3_rf[447:416];
      5'd14: y__h47208 = proc_m3_rf[479:448];
      5'd15: y__h47208 = proc_m3_rf[511:480];
      5'd16: y__h47208 = proc_m3_rf[543:512];
      5'd17: y__h47208 = proc_m3_rf[575:544];
      5'd18: y__h47208 = proc_m3_rf[607:576];
      5'd19: y__h47208 = proc_m3_rf[639:608];
      5'd20: y__h47208 = proc_m3_rf[671:640];
      5'd21: y__h47208 = proc_m3_rf[703:672];
      5'd22: y__h47208 = proc_m3_rf[735:704];
      5'd23: y__h47208 = proc_m3_rf[767:736];
      5'd24: y__h47208 = proc_m3_rf[799:768];
      5'd25: y__h47208 = proc_m3_rf[831:800];
      5'd26: y__h47208 = proc_m3_rf[863:832];
      5'd27: y__h47208 = proc_m3_rf[895:864];
      5'd28: y__h47208 = proc_m3_rf[927:896];
      5'd29: y__h47208 = proc_m3_rf[959:928];
      5'd30: y__h47208 = proc_m3_rf[991:960];
      5'd31: y__h47208 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m8_pff_rv or proc_m3_rf)
  begin
    case (proc_m8_pff_rv[76:72])
      5'd0: x__h60701 = proc_m3_rf[31:0];
      5'd1: x__h60701 = proc_m3_rf[63:32];
      5'd2: x__h60701 = proc_m3_rf[95:64];
      5'd3: x__h60701 = proc_m3_rf[127:96];
      5'd4: x__h60701 = proc_m3_rf[159:128];
      5'd5: x__h60701 = proc_m3_rf[191:160];
      5'd6: x__h60701 = proc_m3_rf[223:192];
      5'd7: x__h60701 = proc_m3_rf[255:224];
      5'd8: x__h60701 = proc_m3_rf[287:256];
      5'd9: x__h60701 = proc_m3_rf[319:288];
      5'd10: x__h60701 = proc_m3_rf[351:320];
      5'd11: x__h60701 = proc_m3_rf[383:352];
      5'd12: x__h60701 = proc_m3_rf[415:384];
      5'd13: x__h60701 = proc_m3_rf[447:416];
      5'd14: x__h60701 = proc_m3_rf[479:448];
      5'd15: x__h60701 = proc_m3_rf[511:480];
      5'd16: x__h60701 = proc_m3_rf[543:512];
      5'd17: x__h60701 = proc_m3_rf[575:544];
      5'd18: x__h60701 = proc_m3_rf[607:576];
      5'd19: x__h60701 = proc_m3_rf[639:608];
      5'd20: x__h60701 = proc_m3_rf[671:640];
      5'd21: x__h60701 = proc_m3_rf[703:672];
      5'd22: x__h60701 = proc_m3_rf[735:704];
      5'd23: x__h60701 = proc_m3_rf[767:736];
      5'd24: x__h60701 = proc_m3_rf[799:768];
      5'd25: x__h60701 = proc_m3_rf[831:800];
      5'd26: x__h60701 = proc_m3_rf[863:832];
      5'd27: x__h60701 = proc_m3_rf[895:864];
      5'd28: x__h60701 = proc_m3_rf[927:896];
      5'd29: x__h60701 = proc_m3_rf[959:928];
      5'd30: x__h60701 = proc_m3_rf[991:960];
      5'd31: x__h60701 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m8_pff_rv or proc_m3_rf)
  begin
    case (proc_m8_pff_rv[81:77])
      5'd0: y__h60836 = proc_m3_rf[31:0];
      5'd1: y__h60836 = proc_m3_rf[63:32];
      5'd2: y__h60836 = proc_m3_rf[95:64];
      5'd3: y__h60836 = proc_m3_rf[127:96];
      5'd4: y__h60836 = proc_m3_rf[159:128];
      5'd5: y__h60836 = proc_m3_rf[191:160];
      5'd6: y__h60836 = proc_m3_rf[223:192];
      5'd7: y__h60836 = proc_m3_rf[255:224];
      5'd8: y__h60836 = proc_m3_rf[287:256];
      5'd9: y__h60836 = proc_m3_rf[319:288];
      5'd10: y__h60836 = proc_m3_rf[351:320];
      5'd11: y__h60836 = proc_m3_rf[383:352];
      5'd12: y__h60836 = proc_m3_rf[415:384];
      5'd13: y__h60836 = proc_m3_rf[447:416];
      5'd14: y__h60836 = proc_m3_rf[479:448];
      5'd15: y__h60836 = proc_m3_rf[511:480];
      5'd16: y__h60836 = proc_m3_rf[543:512];
      5'd17: y__h60836 = proc_m3_rf[575:544];
      5'd18: y__h60836 = proc_m3_rf[607:576];
      5'd19: y__h60836 = proc_m3_rf[639:608];
      5'd20: y__h60836 = proc_m3_rf[671:640];
      5'd21: y__h60836 = proc_m3_rf[703:672];
      5'd22: y__h60836 = proc_m3_rf[735:704];
      5'd23: y__h60836 = proc_m3_rf[767:736];
      5'd24: y__h60836 = proc_m3_rf[799:768];
      5'd25: y__h60836 = proc_m3_rf[831:800];
      5'd26: y__h60836 = proc_m3_rf[863:832];
      5'd27: y__h60836 = proc_m3_rf[895:864];
      5'd28: y__h60836 = proc_m3_rf[927:896];
      5'd29: y__h60836 = proc_m3_rf[959:928];
      5'd30: y__h60836 = proc_m3_rf[991:960];
      5'd31: y__h60836 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m2_pff_rv or proc_m4_sbFlags)
  begin
    case (proc_m2_pff_rv[44:40])
      5'd0:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d99 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m2_pff_rv or proc_m4_sbFlags)
  begin
    case (proc_m2_pff_rv[49:45])
      5'd0:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m4_sbFlags_4_BIT_0_5_proc_m4_sbFl_ETC___d240 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m2_pff_rv or proc_m3_rf)
  begin
    case (proc_m2_pff_rv[44:40])
      5'd0:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[31:0];
      5'd1:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[63:32];
      5'd2:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[95:64];
      5'd3:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[127:96];
      5'd4:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[159:128];
      5'd5:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[191:160];
      5'd6:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[223:192];
      5'd7:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[255:224];
      5'd8:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[287:256];
      5'd9:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[319:288];
      5'd10:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[351:320];
      5'd11:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[383:352];
      5'd12:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[415:384];
      5'd13:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[447:416];
      5'd14:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[479:448];
      5'd15:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[511:480];
      5'd16:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[543:512];
      5'd17:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[575:544];
      5'd18:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[607:576];
      5'd19:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[639:608];
      5'd20:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[671:640];
      5'd21:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[703:672];
      5'd22:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[735:704];
      5'd23:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[767:736];
      5'd24:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[799:768];
      5'd25:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[831:800];
      5'd26:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[863:832];
      5'd27:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[895:864];
      5'd28:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[927:896];
      5'd29:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[959:928];
      5'd30:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[991:960];
      5'd31:
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d151 =
	      proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m12_stalled or
	  proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 or
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d816 or
	  proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 or
	  IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d828 or
	  IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d829 or
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d831)
  begin
    case (proc_m12_stalled[39:37])
      3'h0:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d816 ?
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 :
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823;
      3'h1:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d816 ?
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 :
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822;
      3'h4:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d828;
      3'h5:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d829;
      3'h6:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d831 ?
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822 :
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823;
      3'h7:
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d831 ?
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 :
		proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_proc_ETC___d822;
      default: IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 =
		   proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823;
    endcase
  end
  always@(proc_m12_stalled or
	  proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823 or
	  IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840 or
	  x__h47073 or y__h46957)
  begin
    case (proc_m12_stalled[31:25])
      7'h63:
	  x_15__h46904 =
	      IF_proc_m12_stalled_97_BITS_39_TO_37_08_EQ_0x0_ETC___d840;
      7'h67: x_15__h46904 = x__h47073[11:0] + proc_m12_stalled[56:45];
      7'h6F: x_15__h46904 = proc_m12_stalled[24:13] + y__h46957;
      default: x_15__h46904 =
		   proc_m12_stalled_97_BITS_24_TO_13_00_PLUS_0x4___d823;
    endcase
  end
  always@(proc_m12_stalled or
	  SEXT_rss_first__9_BITS_31_TO_24_20___d621 or
	  rssD_OUT_BITS_7_TO_0__q5 or
	  rssD_OUT_BITS_15_TO_8__q6 or rssD_OUT_BITS_23_TO_16__q7)
  begin
    case (proc_m12_stalled[122:121])
      2'h0:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8 =
	      { {24{rssD_OUT_BITS_7_TO_0__q5[7]}}, rssD_OUT_BITS_7_TO_0__q5 };
      2'h1:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8 =
	      { {24{rssD_OUT_BITS_15_TO_8__q6[7]}},
		rssD_OUT_BITS_15_TO_8__q6 };
      2'h2:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8 =
	      { {24{rssD_OUT_BITS_23_TO_16__q7[7]}},
		rssD_OUT_BITS_23_TO_16__q7 };
      2'd3:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8 =
	      SEXT_rss_first__9_BITS_31_TO_24_20___d621;
    endcase
  end
  always@(proc_m12_stalled or rss$D_OUT)
  begin
    case (proc_m12_stalled[122:121])
      2'h0:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11 =
	      rss$D_OUT[7:0];
      2'h1:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11 =
	      rss$D_OUT[15:8];
      2'h2:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11 =
	      rss$D_OUT[23:16];
      2'd3:
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11 =
	      rss$D_OUT[31:24];
    endcase
  end
  always@(proc_m12_stalled or
	  rss$D_OUT or
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8 or
	  rssD_OUT_BITS_31_TO_16__q9 or
	  rssD_OUT_BITS_15_TO_0__q10 or
	  CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11)
  begin
    case (proc_m12_stalled[39:37])
      3'h0:
	  x_9__h41143 =
	      CASE_proc_m12_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q8;
      3'h1:
	  x_9__h41143 =
	      proc_m12_stalled[122] ?
		{ {16{rssD_OUT_BITS_31_TO_16__q9[15]}},
		  rssD_OUT_BITS_31_TO_16__q9 } :
		{ {16{rssD_OUT_BITS_15_TO_0__q10[15]}},
		  rssD_OUT_BITS_15_TO_0__q10 };
      3'h4:
	  x_9__h41143 =
	      { 24'd0,
		CASE_proc_m12_stalled_BITS_122_TO_121_0x0_rss_ETC__q11 };
      3'h5:
	  x_9__h41143 =
	      { 16'd0,
		proc_m12_stalled[122] ? rss$D_OUT[31:16] : rss$D_OUT[15:0] };
      default: x_9__h41143 = rss$D_OUT;
    endcase
  end
  always@(proc_m8_pff_rv or
	  proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 or
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d924 or
	  proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 or
	  IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d938 or
	  IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d940 or
	  SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d942)
  begin
    case (proc_m8_pff_rv[71:69])
      3'h0:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d924 ?
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 :
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931;
      3'h1:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d924 ?
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 :
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930;
      3'h4:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d938;
      3'h5:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      IF_SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc__ETC___d940;
      3'h6:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d942 ?
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930 :
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931;
      3'h7:
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
	      SEL_ARR_proc_m3_rf_17_BITS_31_TO_0_18_proc_m3__ETC___d942 ?
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 :
		proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d930;
      default: IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 =
		   proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931;
    endcase
  end
  always@(proc_m8_pff_rv or
	  proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931 or
	  IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951 or
	  x__h60701 or y__h60585)
  begin
    case (proc_m8_pff_rv[63:57])
      7'h63:
	  x_13__h60534 =
	      IF_proc_m8_pff_rv_port0__read__55_BITS_71_TO_6_ETC___d951;
      7'h67: x_13__h60534 = x__h60701[11:0] + proc_m8_pff_rv[88:77];
      7'h6F: x_13__h60534 = proc_m8_pff_rv[56:45] + y__h60585;
      default: x_13__h60534 =
		   proc_m8_pff_rv_port0__read__55_BITS_56_TO_45_0_ETC___d931;
    endcase
  end
  always@(proc_m5_pff_rv or y__h36449 or y__h36549)
  begin
    case (proc_m5_pff_rv[39:37])
      3'h0:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] + y__h36449;
      3'h1:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] << proc_m5_pff_rv[49:45];
      3'h2:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      (proc_m5_pff_rv[120:89] < y__h36449) ? 32'h00000001 : 32'h0;
      3'h3:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      (proc_m5_pff_rv[120:89] < y__h36549) ? 32'h00000001 : 32'h0;
      3'h4:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] ^ y__h36449;
      3'h5:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] >> proc_m5_pff_rv[49:45];
      3'h6:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] | y__h36449;
      3'h7:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 =
	      proc_m5_pff_rv[120:89] & y__h36449;
    endcase
  end
  always@(proc_m5_pff_rv or
	  proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414 or
	  proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420)
  begin
    case (proc_m5_pff_rv[39:37])
      3'h0:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv[120:89] + proc_m5_pff_rv[88:57];
      3'h1:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv[120:89] << proc_m5_pff_rv[61:57];
      3'h2:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414[31] ?
		32'h00000001 :
		32'h0;
      3'h3:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      (proc_m5_pff_rv[120:89] < proc_m5_pff_rv[88:57]) ?
		32'h00000001 :
		32'h0;
      3'h4:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv[120:89] ^ proc_m5_pff_rv[88:57];
      3'h5:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420;
      3'h6:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv[120:89] | proc_m5_pff_rv[88:57];
      3'h7:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 =
	      proc_m5_pff_rv[120:89] & proc_m5_pff_rv[88:57];
    endcase
  end
  always@(proc_m5_pff_rv or
	  proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414 or
	  proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420)
  begin
    case (proc_m5_pff_rv[39:37])
      3'h0:
	  CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13 =
	      proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d414;
      3'h5:
	  CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13 =
	      proc_m5_pff_rv_port0__read__50_BITS_120_TO_89__ETC___d420;
      default: CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13 =
		   32'h0;
    endcase
  end
  always@(proc_m5_pff_rv or
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430 or
	  _0_CONCAT_proc_m5_pff_rv_port0__read__50_BITS_1_ETC___d437 or
	  CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13)
  begin
    case (proc_m5_pff_rv[56:50])
      7'h0:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442 =
	      IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d430;
      7'h01:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442 =
	      (proc_m5_pff_rv[39:37] == 3'h0) ?
		_0_CONCAT_proc_m5_pff_rv_port0__read__50_BITS_1_ETC___d437[31:0] :
		32'h0;
      7'h20:
	  IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442 =
	      CASE_proc_m5_pff_rv_BITS_39_TO_37_0x0_proc_m5__ETC__q13;
      default: IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442 =
		   32'h0;
    endcase
  end
  always@(proc_m5_pff_rv or
	  IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406 or
	  x__h36308 or
	  IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442 or
	  x__h36359)
  begin
    case (proc_m5_pff_rv[31:25])
      7'h13:
	  x_6__h36086 =
	      IF_proc_m5_pff_rv_port0__read__50_BITS_39_TO_3_ETC___d406;
      7'h17: x_6__h36086 = x__h36308 + { proc_m5_pff_rv[56:37], 12'h0 };
      7'h33:
	  x_6__h36086 =
	      IF_proc_m5_pff_rv_port0__read__50_BITS_56_TO_5_ETC___d442;
      7'h37: x_6__h36086 = { proc_m5_pff_rv[56:37], 12'h0 };
      7'h67, 7'h6F: x_6__h36086 = { 20'd0, x__h36359 };
      default: x_6__h36086 = 32'h0;
    endcase
  end
  always@(proc_m2_pff_rv or proc_m4_sbFlags)
  begin
    case (proc_m2_pff_rv[36:32])
      5'd0:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[0];
      5'd1:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[1];
      5'd2:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[2];
      5'd3:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[3];
      5'd4:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[4];
      5'd5:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[5];
      5'd6:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[6];
      5'd7:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[7];
      5'd8:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[8];
      5'd9:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[9];
      5'd10:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[10];
      5'd11:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[11];
      5'd12:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[12];
      5'd13:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[13];
      5'd14:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[14];
      5'd15:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[15];
      5'd16:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[16];
      5'd17:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[17];
      5'd18:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[18];
      5'd19:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[19];
      5'd20:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[20];
      5'd21:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[21];
      5'd22:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[22];
      5'd23:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[23];
      5'd24:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[24];
      5'd25:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[25];
      5'd26:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[26];
      5'd27:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[27];
      5'd28:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[28];
      5'd29:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[29];
      5'd30:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[30];
      5'd31:
	  CASE_proc_m2_pff_rv_BITS_36_TO_32_0_proc_m4_sb_ETC__q14 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(x_5__h32875 or proc_m4_sbFlags)
  begin
    case (x_5__h32875)
      5'd0:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[0];
      5'd1:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[1];
      5'd2:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[2];
      5'd3:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[3];
      5'd4:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[4];
      5'd5:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[5];
      5'd6:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[6];
      5'd7:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[7];
      5'd8:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[8];
      5'd9:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[9];
      5'd10:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[10];
      5'd11:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[11];
      5'd12:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[12];
      5'd13:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[13];
      5'd14:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[14];
      5'd15:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[15];
      5'd16:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[16];
      5'd17:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[17];
      5'd18:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[18];
      5'd19:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[19];
      5'd20:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[20];
      5'd21:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[21];
      5'd22:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[22];
      5'd23:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[23];
      5'd24:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[24];
      5'd25:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[25];
      5'd26:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[26];
      5'd27:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[27];
      5'd28:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[28];
      5'd29:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[29];
      5'd30:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[30];
      5'd31:
	  CASE_x_52875_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q15 =
	      proc_m4_sbFlags[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        proc_m12_lastPc <= `BSV_ASSIGNMENT_DELAY 12'd0;
	proc_m12_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m12_stalled <= `BSV_ASSIGNMENT_DELAY 160'd0;
	proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m2_pff_rv <= `BSV_ASSIGNMENT_DELAY 58'h0AAAAAAAAAAAAAA;
	proc_m3_rf <= `BSV_ASSIGNMENT_DELAY 1024'd0;
	proc_m4_sbFlags <= `BSV_ASSIGNMENT_DELAY 32'd0;
	proc_m5_pff_rv <= `BSV_ASSIGNMENT_DELAY
	    161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	proc_m6_pff_rv <= `BSV_ASSIGNMENT_DELAY 13'd2730;
	proc_m7_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m8_pff_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	proc_m9_fEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pc <= `BSV_ASSIGNMENT_DELAY 12'h0;
	proc_m9_pcUpdated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pinit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pinitRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
	proc_m9_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
      end
    else
      begin
        if (proc_m12_lastPc$EN)
	  proc_m12_lastPc <= `BSV_ASSIGNMENT_DELAY proc_m12_lastPc$D_IN;
	if (proc_m12_stall$EN)
	  proc_m12_stall <= `BSV_ASSIGNMENT_DELAY proc_m12_stall$D_IN;
	if (proc_m12_stalled$EN)
	  proc_m12_stalled <= `BSV_ASSIGNMENT_DELAY proc_m12_stalled$D_IN;
	if (proc_m1_readRq$EN)
	  proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY proc_m1_readRq$D_IN;
	if (proc_m2_pff_rv$EN)
	  proc_m2_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m2_pff_rv$D_IN;
	if (proc_m3_rf$EN)
	  proc_m3_rf <= `BSV_ASSIGNMENT_DELAY proc_m3_rf$D_IN;
	if (proc_m4_sbFlags$EN)
	  proc_m4_sbFlags <= `BSV_ASSIGNMENT_DELAY proc_m4_sbFlags$D_IN;
	if (proc_m5_pff_rv$EN)
	  proc_m5_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m5_pff_rv$D_IN;
	if (proc_m6_pff_rv$EN)
	  proc_m6_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m6_pff_rv$D_IN;
	if (proc_m7_eEpoch$EN)
	  proc_m7_eEpoch <= `BSV_ASSIGNMENT_DELAY proc_m7_eEpoch$D_IN;
	if (proc_m8_pff_rv$EN)
	  proc_m8_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m8_pff_rv$D_IN;
	if (proc_m9_fEpoch$EN)
	  proc_m9_fEpoch <= `BSV_ASSIGNMENT_DELAY proc_m9_fEpoch$D_IN;
	if (proc_m9_pc$EN)
	  proc_m9_pc <= `BSV_ASSIGNMENT_DELAY proc_m9_pc$D_IN;
	if (proc_m9_pcUpdated$EN)
	  proc_m9_pcUpdated <= `BSV_ASSIGNMENT_DELAY proc_m9_pcUpdated$D_IN;
	if (proc_m9_pinit$EN)
	  proc_m9_pinit <= `BSV_ASSIGNMENT_DELAY proc_m9_pinit$D_IN;
	if (proc_m9_pinitRq$EN)
	  proc_m9_pinitRq <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRq$D_IN;
	if (proc_m9_pinitRqOfs$EN)
	  proc_m9_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRqOfs$D_IN;
	if (proc_m9_pinitRsOfs$EN)
	  proc_m9_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRsOfs$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    proc_m12_lastPc = 12'hAAA;
    proc_m12_stall = 1'h0;
    proc_m12_stalled = 160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m1_readRq = 1'h0;
    proc_m2_pff_rv = 58'h2AAAAAAAAAAAAAA;
    proc_m3_rf =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m4_sbFlags = 32'hAAAAAAAA;
    proc_m5_pff_rv = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m6_pff_rv = 13'h0AAA;
    proc_m7_eEpoch = 1'h0;
    proc_m8_pff_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m9_fEpoch = 1'h0;
    proc_m9_pc = 12'hAAA;
    proc_m9_pcUpdated = 1'h0;
    proc_m9_pinit = 1'h0;
    proc_m9_pinitRq = 1'h0;
    proc_m9_pinitRqOfs = 10'h2AA;
    proc_m9_pinitRsOfs = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTop

