//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Mon Aug 19 16:20:35 EDT 2019
//
//
// Ports:
// Name                         I/O  size props
// obtain_rq_get                  O    65 reg
// RDY_obtain_rq_get              O     1 reg
// RDY_send_rs_put                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_rs_put                    I    32 reg
// EN_send_rs_put                 I     1
// EN_obtain_rq_get               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop(CLK,
	     RST_N,

	     EN_obtain_rq_get,
	     obtain_rq_get,
	     RDY_obtain_rq_get,

	     send_rs_put,
	     EN_send_rs_put,
	     RDY_send_rs_put);
  input  CLK;
  input  RST_N;

  // actionvalue method obtain_rq_get
  input  EN_obtain_rq_get;
  output [64 : 0] obtain_rq_get;
  output RDY_obtain_rq_get;

  // action method send_rs_put
  input  [31 : 0] send_rs_put;
  input  EN_send_rs_put;
  output RDY_send_rs_put;

  // signals for module outputs
  wire [64 : 0] obtain_rq_get;
  wire RDY_obtain_rq_get, RDY_send_rs_put;

  // inlined wires
  reg [160 : 0] proc_m6_pff_rv$port1__write_1;
  wire [192 : 0] proc_m9_pff_rv$port1__read,
		 proc_m9_pff_rv$port1__write_1,
		 proc_m9_pff_rv$port2__read;
  wire [160 : 0] proc_m6_pff_rv$port1__read, proc_m6_pff_rv$port2__read;
  wire [57 : 0] proc_m3_pff_rv$port1__read,
		proc_m3_pff_rv$port1__write_1,
		proc_m3_pff_rv$port2__read,
		proc_m3_pff_rv$port3__read;
  wire [24 : 0] proc_m7_pff_rv$port0__write_1,
		proc_m7_pff_rv$port1__read,
		proc_m7_pff_rv$port2__read;
  wire proc_m3_pff_rv$EN_port0__write,
       proc_m6_pff_rv$EN_port0__write,
       proc_m6_pff_rv$EN_port1__write,
       proc_m7_pff_rv$EN_port0__write,
       proc_m9_pff_rv$EN_port0__write,
       proc_m9_pff_rv$EN_port1__write;

  // register proc_m10_fEpoch
  reg proc_m10_fEpoch;
  wire proc_m10_fEpoch$D_IN, proc_m10_fEpoch$EN;

  // register proc_m10_pc
  reg [11 : 0] proc_m10_pc;
  wire [11 : 0] proc_m10_pc$D_IN;
  wire proc_m10_pc$EN;

  // register proc_m10_pcUpdated
  reg proc_m10_pcUpdated;
  wire proc_m10_pcUpdated$D_IN, proc_m10_pcUpdated$EN;

  // register proc_m10_pinit
  reg proc_m10_pinit;
  wire proc_m10_pinit$D_IN, proc_m10_pinit$EN;

  // register proc_m10_pinitRq
  reg proc_m10_pinitRq;
  wire proc_m10_pinitRq$D_IN, proc_m10_pinitRq$EN;

  // register proc_m10_pinitRqOfs
  reg [9 : 0] proc_m10_pinitRqOfs;
  wire [9 : 0] proc_m10_pinitRqOfs$D_IN;
  wire proc_m10_pinitRqOfs$EN;

  // register proc_m10_pinitRsOfs
  reg [9 : 0] proc_m10_pinitRsOfs;
  wire [9 : 0] proc_m10_pinitRsOfs$D_IN;
  wire proc_m10_pinitRsOfs$EN;

  // register proc_m13_lastPc
  reg [11 : 0] proc_m13_lastPc;
  wire [11 : 0] proc_m13_lastPc$D_IN;
  wire proc_m13_lastPc$EN;

  // register proc_m13_stall
  reg proc_m13_stall;
  wire proc_m13_stall$D_IN, proc_m13_stall$EN;

  // register proc_m13_stalled
  reg [159 : 0] proc_m13_stalled;
  wire [159 : 0] proc_m13_stalled$D_IN;
  wire proc_m13_stalled$EN;

  // register proc_m1_readRq
  reg proc_m1_readRq;
  wire proc_m1_readRq$D_IN, proc_m1_readRq$EN;

  // register proc_m2_btbTags
  reg [55 : 0] proc_m2_btbTags;
  wire [55 : 0] proc_m2_btbTags$D_IN;
  wire proc_m2_btbTags$EN;

  // register proc_m2_btbTargets
  reg [79 : 0] proc_m2_btbTargets;
  wire [79 : 0] proc_m2_btbTargets$D_IN;
  wire proc_m2_btbTargets$EN;

  // register proc_m2_btbValid
  reg [7 : 0] proc_m2_btbValid;
  wire [7 : 0] proc_m2_btbValid$D_IN;
  wire proc_m2_btbValid$EN;

  // register proc_m3_pff_rv
  reg [57 : 0] proc_m3_pff_rv;
  wire [57 : 0] proc_m3_pff_rv$D_IN;
  wire proc_m3_pff_rv$EN;

  // register proc_m4_rf
  reg [1023 : 0] proc_m4_rf;
  wire [1023 : 0] proc_m4_rf$D_IN;
  wire proc_m4_rf$EN;

  // register proc_m5_sbFlags
  reg [31 : 0] proc_m5_sbFlags;
  reg [31 : 0] proc_m5_sbFlags$D_IN;
  wire proc_m5_sbFlags$EN;

  // register proc_m6_pff_rv
  reg [160 : 0] proc_m6_pff_rv;
  wire [160 : 0] proc_m6_pff_rv$D_IN;
  wire proc_m6_pff_rv$EN;

  // register proc_m7_pff_rv
  reg [24 : 0] proc_m7_pff_rv;
  wire [24 : 0] proc_m7_pff_rv$D_IN;
  wire proc_m7_pff_rv$EN;

  // register proc_m8_eEpoch
  reg proc_m8_eEpoch;
  wire proc_m8_eEpoch$D_IN, proc_m8_eEpoch$EN;

  // register proc_m9_pff_rv
  reg [192 : 0] proc_m9_pff_rv;
  wire [192 : 0] proc_m9_pff_rv$D_IN;
  wire proc_m9_pff_rv$EN;

  // ports of submodule proc_m1_bram
  wire [31 : 0] proc_m1_bram$readRs, proc_m1_bram$write_d;
  wire [9 : 0] proc_m1_bram$readRq_idx, proc_m1_bram$write_idx;
  wire proc_m1_bram$EN_readRq, proc_m1_bram$EN_write;

  // ports of submodule rqs
  reg [64 : 0] rqs$D_IN;
  wire [64 : 0] rqs$D_OUT;
  wire rqs$CLR, rqs$DEQ, rqs$EMPTY_N, rqs$ENQ, rqs$FULL_N;

  // ports of submodule rss
  wire [31 : 0] rss$D_IN, rss$D_OUT;
  wire rss$CLR, rss$DEQ, rss$EMPTY_N, rss$ENQ, rss$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_proc_m10_instFetchRq,
       WILL_FIRE_RL_proc_m10_instFetchRs,
       WILL_FIRE_RL_proc_m10_instFetchRsIgnore,
       WILL_FIRE_RL_proc_m10_modifyPc,
       WILL_FIRE_RL_proc_m10_pgmInitRq,
       WILL_FIRE_RL_proc_m10_pgmInitRqEnd,
       WILL_FIRE_RL_proc_m10_pgmInitRs,
       WILL_FIRE_RL_proc_m10_pgmInitRsEnd,
       WILL_FIRE_RL_proc_m11_decodeLd,
       WILL_FIRE_RL_proc_m11_decodeNm,
       WILL_FIRE_RL_proc_m11_decodeSt,
       WILL_FIRE_RL_proc_m12_execBypass,
       WILL_FIRE_RL_proc_m12_execNm,
       WILL_FIRE_RL_proc_m13_repLd,
       WILL_FIRE_RL_proc_m13_repLdZ,
       WILL_FIRE_RL_proc_m13_repSt,
       WILL_FIRE_RL_proc_m13_reqLd,
       WILL_FIRE_RL_proc_m13_reqSt,
       WILL_FIRE_RL_proc_m13_wbNm,
       WILL_FIRE_RL_proc_m13_wbNmZ,
       WILL_FIRE_RL_proc_m13_wrongEpoch;

  // inputs to muxes for submodule ports
  wire [1023 : 0] MUX_proc_m4_rf$write_1__VAL_1,
		  MUX_proc_m4_rf$write_1__VAL_2;
  wire [192 : 0] MUX_proc_m9_pff_rv$port1__write_1__VAL_1,
		 MUX_proc_m9_pff_rv$port1__write_1__VAL_2;
  wire [160 : 0] MUX_proc_m6_pff_rv$port1__write_1__VAL_1,
		 MUX_proc_m6_pff_rv$port1__write_1__VAL_2,
		 MUX_proc_m6_pff_rv$port1__write_1__VAL_3;
  wire [64 : 0] MUX_rqs$enq_1__VAL_1,
		MUX_rqs$enq_1__VAL_2,
		MUX_rqs$enq_1__VAL_3;
  wire [31 : 0] MUX_proc_m5_sbFlags$write_1__VAL_1,
		MUX_proc_m5_sbFlags$write_1__VAL_3,
		MUX_proc_m5_sbFlags$write_1__VAL_4,
		MUX_proc_m5_sbFlags$write_1__VAL_5;
  wire [24 : 0] MUX_proc_m7_pff_rv$port0__write_1__VAL_1,
		MUX_proc_m7_pff_rv$port0__write_1__VAL_2;
  wire [9 : 0] MUX_proc_m10_pinitRqOfs$write_1__VAL_1,
	       MUX_proc_m10_pinitRsOfs$write_1__VAL_1;
  wire MUX_proc_m13_stall$write_1__SEL_2,
       MUX_proc_m1_readRq$write_1__SEL_1,
       MUX_proc_m5_sbFlags$write_1__SEL_1,
       MUX_proc_m5_sbFlags$write_1__SEL_3,
       MUX_proc_m7_pff_rv$port0__write_1__PSEL_1,
       MUX_proc_m7_pff_rv$port0__write_1__PSEL_2,
       MUX_proc_m7_pff_rv$port0__write_1__SEL_1,
       MUX_proc_m8_eEpoch$write_1__SEL_1,
       MUX_rqs$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10,
	       CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15,
	       IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520,
	       IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544,
	       IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556,
	       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265,
	       x_6__h43201,
	       x_9__h48258,
	       x__h39774,
	       x__h54188,
	       x__h67831,
	       y__h54323,
	       y__h67966;
  reg [11 : 0] IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954,
	       IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065,
	       x_13__h67664,
	       x_15__h54019;
  reg [9 : 0] x_6__h32993;
  reg [7 : 0] CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13;
  reg [6 : 0] CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4,
	      CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18;
  reg [1 : 0] x_4__h33488;
  reg CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3,
      CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16,
      CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17,
      SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213,
      SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354;
  wire [959 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d831;
  wire [895 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d826;
  wire [831 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d821;
  wire [767 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d816;
  wire [703 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d811;
  wire [639 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d806;
  wire [575 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d801;
  wire [511 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d796;
  wire [447 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d791;
  wire [383 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d786;
  wire [319 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d781;
  wire [255 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d776;
  wire [191 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d771;
  wire [127 : 0] IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d766,
		 _0_CONCAT_proc_m6_pff_rv_port0__read__64_BITS_1_ETC___d551;
  wire [31 : 0] SEXT_rss_first__9_BITS_31_TO_24_34___d735,
		proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528,
		proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534,
		x4188_MINUS_y4323__q5,
		x7831_MINUS_y7966__q14,
		x_9__h35156,
		x__h28097,
		x__h35255,
		x__h39682,
		x__h43423,
		x__h47847,
		y__h43564,
		y__h43664;
  wire [15 : 0] rssD_OUT_BITS_15_TO_0__q12, rssD_OUT_BITS_31_TO_16__q11;
  wire [11 : 0] IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1052,
		IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1054,
		IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d942,
		IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d943,
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937,
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936,
		proc_m3_pff_rv_BITS_56_TO_45__q1,
		proc_m6_pff_rv_BITS_56_TO_45__q2,
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044,
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045,
		x_5__h33015,
		x__h39732,
		x__h43474,
		y__h54072,
		y__h54435,
		y__h67715,
		y__h68078;
  wire [9 : 0] v__h32892, x_6__h33010, x__h28065, x__h28342;
  wire [7 : 0] rssD_OUT_BITS_15_TO_8__q8,
	       rssD_OUT_BITS_23_TO_16__q9,
	       rssD_OUT_BITS_31_TO_24__q6,
	       rssD_OUT_BITS_7_TO_0__q7;
  wire [4 : 0] x_5__h39990;
  wire NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960,
       NOT_IF_proc_m9_pff_rv_port0__read__69_BITS_63__ETC___d1071,
       NOT_SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m_ETC___d378,
       NOT_proc_m7_pff_rv_port0__read__73_BIT_24_74_7_ETC___d359,
       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1038,
       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1056,
       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d930,
       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d945,
       proc_m3_pff_rv_port0__read__76_BIT_57_77_AND_N_ETC___d226,
       proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59,
       proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573;

  // actionvalue method obtain_rq_get
  assign obtain_rq_get = rqs$D_OUT ;
  assign RDY_obtain_rq_get = rqs$EMPTY_N ;

  // action method send_rs_put
  assign RDY_send_rs_put = rss$FULL_N ;

  // submodule proc_m1_bram
  mkBramInst proc_m1_bram(.CLK(CLK),
			  .RST_N(RST_N),
			  .readRq_idx(proc_m1_bram$readRq_idx),
			  .write_d(proc_m1_bram$write_d),
			  .write_idx(proc_m1_bram$write_idx),
			  .EN_readRq(proc_m1_bram$EN_readRq),
			  .EN_write(proc_m1_bram$EN_write),
			  .RDY_readRq(),
			  .readRs(proc_m1_bram$readRs),
			  .RDY_readRs(),
			  .RDY_write());

  // submodule rqs
  FIFO2 #(.width(32'd65), .guarded(32'd1)) rqs(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rqs$D_IN),
					       .ENQ(rqs$ENQ),
					       .DEQ(rqs$DEQ),
					       .CLR(rqs$CLR),
					       .D_OUT(rqs$D_OUT),
					       .FULL_N(rqs$FULL_N),
					       .EMPTY_N(rqs$EMPTY_N));

  // submodule rss
  FIFO2 #(.width(32'd32), .guarded(32'd1)) rss(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rss$D_IN),
					       .ENQ(rss$ENQ),
					       .DEQ(rss$DEQ),
					       .CLR(rss$CLR),
					       .D_OUT(rss$D_OUT),
					       .FULL_N(rss$FULL_N),
					       .EMPTY_N(rss$EMPTY_N));

  // rule RL_proc_m10_pgmInitRq
  assign WILL_FIRE_RL_proc_m10_pgmInitRq =
	     !proc_m10_pinit && !proc_m10_pinitRq && x__h28065 != 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m10_pgmInitRqEnd
  assign WILL_FIRE_RL_proc_m10_pgmInitRqEnd =
	     !proc_m10_pinit && !proc_m10_pinitRq && x__h28065 == 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m10_pgmInitRs
  assign WILL_FIRE_RL_proc_m10_pgmInitRs =
	     !proc_m10_pinit && x__h28342 != 10'h0 && !proc_m1_readRq &&
	     rss$EMPTY_N ;

  // rule RL_proc_m10_pgmInitRsEnd
  assign WILL_FIRE_RL_proc_m10_pgmInitRsEnd =
	     !proc_m10_pinit && !proc_m1_readRq && x__h28342 == 10'h0 &&
	     rss$EMPTY_N ;

  // rule RL_proc_m10_instFetchRq
  assign WILL_FIRE_RL_proc_m10_instFetchRq =
	     !proc_m1_readRq && proc_m10_pinit ;

  // rule RL_proc_m10_instFetchRsIgnore
  assign WILL_FIRE_RL_proc_m10_instFetchRsIgnore =
	     proc_m10_pinit && proc_m1_readRq && proc_m10_pcUpdated ;

  // rule RL_proc_m13_wrongEpoch
  assign WILL_FIRE_RL_proc_m13_wrongEpoch =
	     !proc_m13_stall && proc_m9_pff_rv[192] &&
	     !proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 ;

  // rule RL_proc_m13_reqLd
  assign WILL_FIRE_RL_proc_m13_reqLd =
	     !proc_m13_stall && proc_m9_pff_rv[192] &&
	     proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 &&
	     proc_m9_pff_rv[191:190] == 2'h0 &&
	     rqs$FULL_N &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRq ;

  // rule RL_proc_m13_reqSt
  assign WILL_FIRE_RL_proc_m13_reqSt =
	     !proc_m13_stall && proc_m9_pff_rv[192] &&
	     proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 &&
	     proc_m9_pff_rv[191:190] == 2'h1 &&
	     rqs$FULL_N &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRq ;

  // rule RL_proc_m13_wbNm
  assign WILL_FIRE_RL_proc_m13_wbNm =
	     !proc_m13_stall && proc_m9_pff_rv[192] &&
	     proc_m9_pff_rv[189:185] != 5'd0 &&
	     proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 &&
	     proc_m9_pff_rv[191:190] == 2'h3 &&
	     !proc_m7_pff_rv[24] ;

  // rule RL_proc_m13_wbNmZ
  assign WILL_FIRE_RL_proc_m13_wbNmZ =
	     !proc_m13_stall && proc_m9_pff_rv[192] &&
	     proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 &&
	     proc_m9_pff_rv[191:190] == 2'h3 &&
	     proc_m9_pff_rv[189:185] == 5'd0 &&
	     !proc_m7_pff_rv[24] ;

  // rule RL_proc_m12_execNm
  assign WILL_FIRE_RL_proc_m12_execNm =
	     proc_m6_pff_rv[160] && proc_m6_pff_rv[159:158] == 2'h3 &&
	     !proc_m9_pff_rv$port1__read[192] ;

  // rule RL_proc_m12_execBypass
  assign WILL_FIRE_RL_proc_m12_execBypass =
	     proc_m6_pff_rv[160] && proc_m6_pff_rv[159:158] != 2'h3 &&
	     !proc_m9_pff_rv$port1__read[192] &&
	     !WILL_FIRE_RL_proc_m13_wrongEpoch ;

  // rule RL_proc_m11_decodeLd
  assign WILL_FIRE_RL_proc_m11_decodeLd =
	     !proc_m7_pff_rv[24] &&
	     proc_m3_pff_rv_port0__read__76_BIT_57_77_AND_N_ETC___d226 &&
	     !WILL_FIRE_RL_proc_m13_wbNmZ &&
	     !WILL_FIRE_RL_proc_m13_wbNm &&
	     !WILL_FIRE_RL_proc_m13_repLdZ &&
	     !WILL_FIRE_RL_proc_m13_repLd &&
	     !WILL_FIRE_RL_proc_m13_wrongEpoch ;

  // rule RL_proc_m11_decodeSt
  assign WILL_FIRE_RL_proc_m11_decodeSt =
	     proc_m3_pff_rv[57] &&
	     NOT_proc_m7_pff_rv_port0__read__73_BIT_24_74_7_ETC___d359 &&
	     !WILL_FIRE_RL_proc_m12_execNm &&
	     !WILL_FIRE_RL_proc_m13_wbNmZ &&
	     !WILL_FIRE_RL_proc_m13_wbNm &&
	     !WILL_FIRE_RL_proc_m13_wrongEpoch ;

  // rule RL_proc_m11_decodeNm
  assign WILL_FIRE_RL_proc_m11_decodeNm =
	     proc_m3_pff_rv[57] && !proc_m7_pff_rv[24] &&
	     NOT_SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m_ETC___d378 &&
	     !WILL_FIRE_RL_proc_m13_wbNmZ &&
	     !WILL_FIRE_RL_proc_m13_wbNm &&
	     !WILL_FIRE_RL_proc_m13_repLdZ &&
	     !WILL_FIRE_RL_proc_m13_repLd &&
	     !WILL_FIRE_RL_proc_m13_wrongEpoch ;

  // rule RL_proc_m10_instFetchRs
  assign WILL_FIRE_RL_proc_m10_instFetchRs =
	     !proc_m10_pcUpdated && proc_m10_pinit && proc_m1_readRq &&
	     !proc_m3_pff_rv$port1__read[57] ;

  // rule RL_proc_m13_repLd
  assign WILL_FIRE_RL_proc_m13_repLd =
	     proc_m13_stalled[157:153] != 5'h0 &&
	     proc_m13_stalled[159:158] == 2'h0 &&
	     rss$EMPTY_N &&
	     proc_m13_stall &&
	     !proc_m7_pff_rv[24] &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRs ;

  // rule RL_proc_m13_repLdZ
  assign WILL_FIRE_RL_proc_m13_repLdZ =
	     proc_m13_stalled[159:158] == 2'h0 &&
	     proc_m13_stalled[157:153] == 5'h0 &&
	     rss$EMPTY_N &&
	     proc_m13_stall &&
	     !proc_m7_pff_rv[24] &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRs ;

  // rule RL_proc_m13_repSt
  assign WILL_FIRE_RL_proc_m13_repSt =
	     proc_m13_stalled[159:158] == 2'h1 && rss$EMPTY_N &&
	     proc_m13_stall &&
	     !proc_m7_pff_rv[24] &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m10_pgmInitRs ;

  // rule RL_proc_m10_modifyPc
  assign WILL_FIRE_RL_proc_m10_modifyPc =
	     proc_m7_pff_rv$port1__read[24] && proc_m10_pinit ;

  // inputs to muxes for submodule ports
  assign MUX_proc_m13_stall$write_1__SEL_2 =
	     WILL_FIRE_RL_proc_m13_reqSt || WILL_FIRE_RL_proc_m13_reqLd ;
  assign MUX_proc_m1_readRq$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m10_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m10_instFetchRs ;
  assign MUX_proc_m5_sbFlags$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m13_wrongEpoch &&
	     (proc_m9_pff_rv[191:190] == 2'h0 ||
	      proc_m9_pff_rv[191:190] == 2'h3) ;
  assign MUX_proc_m5_sbFlags$write_1__SEL_3 =
	     WILL_FIRE_RL_proc_m13_repLdZ || WILL_FIRE_RL_proc_m13_repLd ;
  assign MUX_proc_m7_pff_rv$port0__write_1__PSEL_1 =
	     WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	     WILL_FIRE_RL_proc_m13_repLd ;
  assign MUX_proc_m7_pff_rv$port0__write_1__SEL_1 =
	     MUX_proc_m7_pff_rv$port0__write_1__PSEL_1 &&
	     NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960 ;
  assign MUX_proc_m7_pff_rv$port0__write_1__PSEL_2 =
	     WILL_FIRE_RL_proc_m13_wbNmZ || WILL_FIRE_RL_proc_m13_wbNm ;
  assign MUX_proc_m8_eEpoch$write_1__SEL_1 =
	     MUX_proc_m7_pff_rv$port0__write_1__PSEL_1 &&
	     NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960 ;
  assign MUX_rqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_proc_m10_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m10_pgmInitRq ;
  assign MUX_proc_m10_pinitRqOfs$write_1__VAL_1 =
	     proc_m10_pinitRqOfs + 10'h001 ;
  assign MUX_proc_m10_pinitRsOfs$write_1__VAL_1 =
	     proc_m10_pinitRsOfs + 10'h001 ;
  assign MUX_proc_m4_rf$write_1__VAL_1 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d831,
	       (proc_m13_stalled[157:153] == 5'd1) ?
		 x_9__h48258 :
		 proc_m4_rf[63:32],
	       proc_m4_rf[31:0] } ;
  assign MUX_proc_m4_rf$write_1__VAL_2 =
	     { (proc_m9_pff_rv[189:185] == 5'd31) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[1023:992],
	       (proc_m9_pff_rv[189:185] == 5'd30) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[991:960],
	       (proc_m9_pff_rv[189:185] == 5'd29) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[959:928],
	       (proc_m9_pff_rv[189:185] == 5'd28) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[927:896],
	       (proc_m9_pff_rv[189:185] == 5'd27) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[895:864],
	       (proc_m9_pff_rv[189:185] == 5'd26) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[863:832],
	       (proc_m9_pff_rv[189:185] == 5'd25) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[831:800],
	       (proc_m9_pff_rv[189:185] == 5'd24) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[799:768],
	       (proc_m9_pff_rv[189:185] == 5'd23) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[767:736],
	       (proc_m9_pff_rv[189:185] == 5'd22) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[735:704],
	       (proc_m9_pff_rv[189:185] == 5'd21) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[703:672],
	       (proc_m9_pff_rv[189:185] == 5'd20) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[671:640],
	       (proc_m9_pff_rv[189:185] == 5'd19) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[639:608],
	       (proc_m9_pff_rv[189:185] == 5'd18) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[607:576],
	       (proc_m9_pff_rv[189:185] == 5'd17) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[575:544],
	       (proc_m9_pff_rv[189:185] == 5'd16) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[543:512],
	       (proc_m9_pff_rv[189:185] == 5'd15) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[511:480],
	       (proc_m9_pff_rv[189:185] == 5'd14) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[479:448],
	       (proc_m9_pff_rv[189:185] == 5'd13) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[447:416],
	       (proc_m9_pff_rv[189:185] == 5'd12) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[415:384],
	       (proc_m9_pff_rv[189:185] == 5'd11) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[383:352],
	       (proc_m9_pff_rv[189:185] == 5'd10) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[351:320],
	       (proc_m9_pff_rv[189:185] == 5'd9) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[319:288],
	       (proc_m9_pff_rv[189:185] == 5'd8) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[287:256],
	       (proc_m9_pff_rv[189:185] == 5'd7) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[255:224],
	       (proc_m9_pff_rv[189:185] == 5'd6) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[223:192],
	       (proc_m9_pff_rv[189:185] == 5'd5) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[191:160],
	       (proc_m9_pff_rv[189:185] == 5'd4) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[159:128],
	       (proc_m9_pff_rv[189:185] == 5'd3) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[127:96],
	       (proc_m9_pff_rv[189:185] == 5'd2) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[95:64],
	       (proc_m9_pff_rv[189:185] == 5'd1) ?
		 proc_m9_pff_rv[31:0] :
		 proc_m4_rf[63:32],
	       proc_m4_rf[31:0] } ;
  assign MUX_proc_m5_sbFlags$write_1__VAL_1 =
	     { proc_m9_pff_rv[189:185] != 5'd31 && proc_m5_sbFlags[31],
	       proc_m9_pff_rv[189:185] != 5'd30 && proc_m5_sbFlags[30],
	       proc_m9_pff_rv[189:185] != 5'd29 && proc_m5_sbFlags[29],
	       proc_m9_pff_rv[189:185] != 5'd28 && proc_m5_sbFlags[28],
	       proc_m9_pff_rv[189:185] != 5'd27 && proc_m5_sbFlags[27],
	       proc_m9_pff_rv[189:185] != 5'd26 && proc_m5_sbFlags[26],
	       proc_m9_pff_rv[189:185] != 5'd25 && proc_m5_sbFlags[25],
	       proc_m9_pff_rv[189:185] != 5'd24 && proc_m5_sbFlags[24],
	       proc_m9_pff_rv[189:185] != 5'd23 && proc_m5_sbFlags[23],
	       proc_m9_pff_rv[189:185] != 5'd22 && proc_m5_sbFlags[22],
	       proc_m9_pff_rv[189:185] != 5'd21 && proc_m5_sbFlags[21],
	       proc_m9_pff_rv[189:185] != 5'd20 && proc_m5_sbFlags[20],
	       proc_m9_pff_rv[189:185] != 5'd19 && proc_m5_sbFlags[19],
	       proc_m9_pff_rv[189:185] != 5'd18 && proc_m5_sbFlags[18],
	       proc_m9_pff_rv[189:185] != 5'd17 && proc_m5_sbFlags[17],
	       proc_m9_pff_rv[189:185] != 5'd16 && proc_m5_sbFlags[16],
	       proc_m9_pff_rv[189:185] != 5'd15 && proc_m5_sbFlags[15],
	       proc_m9_pff_rv[189:185] != 5'd14 && proc_m5_sbFlags[14],
	       proc_m9_pff_rv[189:185] != 5'd13 && proc_m5_sbFlags[13],
	       proc_m9_pff_rv[189:185] != 5'd12 && proc_m5_sbFlags[12],
	       proc_m9_pff_rv[189:185] != 5'd11 && proc_m5_sbFlags[11],
	       proc_m9_pff_rv[189:185] != 5'd10 && proc_m5_sbFlags[10],
	       proc_m9_pff_rv[189:185] != 5'd9 && proc_m5_sbFlags[9],
	       proc_m9_pff_rv[189:185] != 5'd8 && proc_m5_sbFlags[8],
	       proc_m9_pff_rv[189:185] != 5'd7 && proc_m5_sbFlags[7],
	       proc_m9_pff_rv[189:185] != 5'd6 && proc_m5_sbFlags[6],
	       proc_m9_pff_rv[189:185] != 5'd5 && proc_m5_sbFlags[5],
	       proc_m9_pff_rv[189:185] != 5'd4 && proc_m5_sbFlags[4],
	       proc_m9_pff_rv[189:185] != 5'd3 && proc_m5_sbFlags[3],
	       proc_m9_pff_rv[189:185] != 5'd2 && proc_m5_sbFlags[2],
	       proc_m9_pff_rv[189:185] != 5'd1 && proc_m5_sbFlags[1],
	       proc_m9_pff_rv[189:185] != 5'd0 && proc_m5_sbFlags[0] } ;
  assign MUX_proc_m5_sbFlags$write_1__VAL_3 =
	     { proc_m13_stalled[157:153] != 5'd31 && proc_m5_sbFlags[31],
	       proc_m13_stalled[157:153] != 5'd30 && proc_m5_sbFlags[30],
	       proc_m13_stalled[157:153] != 5'd29 && proc_m5_sbFlags[29],
	       proc_m13_stalled[157:153] != 5'd28 && proc_m5_sbFlags[28],
	       proc_m13_stalled[157:153] != 5'd27 && proc_m5_sbFlags[27],
	       proc_m13_stalled[157:153] != 5'd26 && proc_m5_sbFlags[26],
	       proc_m13_stalled[157:153] != 5'd25 && proc_m5_sbFlags[25],
	       proc_m13_stalled[157:153] != 5'd24 && proc_m5_sbFlags[24],
	       proc_m13_stalled[157:153] != 5'd23 && proc_m5_sbFlags[23],
	       proc_m13_stalled[157:153] != 5'd22 && proc_m5_sbFlags[22],
	       proc_m13_stalled[157:153] != 5'd21 && proc_m5_sbFlags[21],
	       proc_m13_stalled[157:153] != 5'd20 && proc_m5_sbFlags[20],
	       proc_m13_stalled[157:153] != 5'd19 && proc_m5_sbFlags[19],
	       proc_m13_stalled[157:153] != 5'd18 && proc_m5_sbFlags[18],
	       proc_m13_stalled[157:153] != 5'd17 && proc_m5_sbFlags[17],
	       proc_m13_stalled[157:153] != 5'd16 && proc_m5_sbFlags[16],
	       proc_m13_stalled[157:153] != 5'd15 && proc_m5_sbFlags[15],
	       proc_m13_stalled[157:153] != 5'd14 && proc_m5_sbFlags[14],
	       proc_m13_stalled[157:153] != 5'd13 && proc_m5_sbFlags[13],
	       proc_m13_stalled[157:153] != 5'd12 && proc_m5_sbFlags[12],
	       proc_m13_stalled[157:153] != 5'd11 && proc_m5_sbFlags[11],
	       proc_m13_stalled[157:153] != 5'd10 && proc_m5_sbFlags[10],
	       proc_m13_stalled[157:153] != 5'd9 && proc_m5_sbFlags[9],
	       proc_m13_stalled[157:153] != 5'd8 && proc_m5_sbFlags[8],
	       proc_m13_stalled[157:153] != 5'd7 && proc_m5_sbFlags[7],
	       proc_m13_stalled[157:153] != 5'd6 && proc_m5_sbFlags[6],
	       proc_m13_stalled[157:153] != 5'd5 && proc_m5_sbFlags[5],
	       proc_m13_stalled[157:153] != 5'd4 && proc_m5_sbFlags[4],
	       proc_m13_stalled[157:153] != 5'd3 && proc_m5_sbFlags[3],
	       proc_m13_stalled[157:153] != 5'd2 && proc_m5_sbFlags[2],
	       proc_m13_stalled[157:153] != 5'd1 && proc_m5_sbFlags[1],
	       proc_m13_stalled[157:153] != 5'h0 && proc_m5_sbFlags[0] } ;
  assign MUX_proc_m5_sbFlags$write_1__VAL_4 =
	     { proc_m3_pff_rv[36:32] == 5'd31 || proc_m5_sbFlags[31],
	       proc_m3_pff_rv[36:32] == 5'd30 || proc_m5_sbFlags[30],
	       proc_m3_pff_rv[36:32] == 5'd29 || proc_m5_sbFlags[29],
	       proc_m3_pff_rv[36:32] == 5'd28 || proc_m5_sbFlags[28],
	       proc_m3_pff_rv[36:32] == 5'd27 || proc_m5_sbFlags[27],
	       proc_m3_pff_rv[36:32] == 5'd26 || proc_m5_sbFlags[26],
	       proc_m3_pff_rv[36:32] == 5'd25 || proc_m5_sbFlags[25],
	       proc_m3_pff_rv[36:32] == 5'd24 || proc_m5_sbFlags[24],
	       proc_m3_pff_rv[36:32] == 5'd23 || proc_m5_sbFlags[23],
	       proc_m3_pff_rv[36:32] == 5'd22 || proc_m5_sbFlags[22],
	       proc_m3_pff_rv[36:32] == 5'd21 || proc_m5_sbFlags[21],
	       proc_m3_pff_rv[36:32] == 5'd20 || proc_m5_sbFlags[20],
	       proc_m3_pff_rv[36:32] == 5'd19 || proc_m5_sbFlags[19],
	       proc_m3_pff_rv[36:32] == 5'd18 || proc_m5_sbFlags[18],
	       proc_m3_pff_rv[36:32] == 5'd17 || proc_m5_sbFlags[17],
	       proc_m3_pff_rv[36:32] == 5'd16 || proc_m5_sbFlags[16],
	       proc_m3_pff_rv[36:32] == 5'd15 || proc_m5_sbFlags[15],
	       proc_m3_pff_rv[36:32] == 5'd14 || proc_m5_sbFlags[14],
	       proc_m3_pff_rv[36:32] == 5'd13 || proc_m5_sbFlags[13],
	       proc_m3_pff_rv[36:32] == 5'd12 || proc_m5_sbFlags[12],
	       proc_m3_pff_rv[36:32] == 5'd11 || proc_m5_sbFlags[11],
	       proc_m3_pff_rv[36:32] == 5'd10 || proc_m5_sbFlags[10],
	       proc_m3_pff_rv[36:32] == 5'd9 || proc_m5_sbFlags[9],
	       proc_m3_pff_rv[36:32] == 5'd8 || proc_m5_sbFlags[8],
	       proc_m3_pff_rv[36:32] == 5'd7 || proc_m5_sbFlags[7],
	       proc_m3_pff_rv[36:32] == 5'd6 || proc_m5_sbFlags[6],
	       proc_m3_pff_rv[36:32] == 5'd5 || proc_m5_sbFlags[5],
	       proc_m3_pff_rv[36:32] == 5'd4 || proc_m5_sbFlags[4],
	       proc_m3_pff_rv[36:32] == 5'd3 || proc_m5_sbFlags[3],
	       proc_m3_pff_rv[36:32] == 5'd2 || proc_m5_sbFlags[2],
	       proc_m3_pff_rv[36:32] == 5'd1 || proc_m5_sbFlags[1],
	       proc_m3_pff_rv[36:32] == 5'd0 || proc_m5_sbFlags[0] } ;
  assign MUX_proc_m5_sbFlags$write_1__VAL_5 =
	     { x_5__h39990 == 5'd31 || proc_m5_sbFlags[31],
	       x_5__h39990 == 5'd30 || proc_m5_sbFlags[30],
	       x_5__h39990 == 5'd29 || proc_m5_sbFlags[29],
	       x_5__h39990 == 5'd28 || proc_m5_sbFlags[28],
	       x_5__h39990 == 5'd27 || proc_m5_sbFlags[27],
	       x_5__h39990 == 5'd26 || proc_m5_sbFlags[26],
	       x_5__h39990 == 5'd25 || proc_m5_sbFlags[25],
	       x_5__h39990 == 5'd24 || proc_m5_sbFlags[24],
	       x_5__h39990 == 5'd23 || proc_m5_sbFlags[23],
	       x_5__h39990 == 5'd22 || proc_m5_sbFlags[22],
	       x_5__h39990 == 5'd21 || proc_m5_sbFlags[21],
	       x_5__h39990 == 5'd20 || proc_m5_sbFlags[20],
	       x_5__h39990 == 5'd19 || proc_m5_sbFlags[19],
	       x_5__h39990 == 5'd18 || proc_m5_sbFlags[18],
	       x_5__h39990 == 5'd17 || proc_m5_sbFlags[17],
	       x_5__h39990 == 5'd16 || proc_m5_sbFlags[16],
	       x_5__h39990 == 5'd15 || proc_m5_sbFlags[15],
	       x_5__h39990 == 5'd14 || proc_m5_sbFlags[14],
	       x_5__h39990 == 5'd13 || proc_m5_sbFlags[13],
	       x_5__h39990 == 5'd12 || proc_m5_sbFlags[12],
	       x_5__h39990 == 5'd11 || proc_m5_sbFlags[11],
	       x_5__h39990 == 5'd10 || proc_m5_sbFlags[10],
	       x_5__h39990 == 5'd9 || proc_m5_sbFlags[9],
	       x_5__h39990 == 5'd8 || proc_m5_sbFlags[8],
	       x_5__h39990 == 5'd7 || proc_m5_sbFlags[7],
	       x_5__h39990 == 5'd6 || proc_m5_sbFlags[6],
	       x_5__h39990 == 5'd5 || proc_m5_sbFlags[5],
	       x_5__h39990 == 5'd4 || proc_m5_sbFlags[4],
	       x_5__h39990 == 5'd3 || proc_m5_sbFlags[3],
	       x_5__h39990 == 5'd2 || proc_m5_sbFlags[2],
	       x_5__h39990 == 5'd1 || proc_m5_sbFlags[1],
	       x_5__h39990 == 5'd0 || proc_m5_sbFlags[0] } ;
  assign MUX_proc_m6_pff_rv$port1__write_1__VAL_1 =
	     { 1'd1,
	       x_4__h33488,
	       proc_m3_pff_rv[36:32],
	       x__h35255,
	       64'd0,
	       proc_m3_pff_rv[56:0] } ;
  assign MUX_proc_m6_pff_rv$port1__write_1__VAL_2 =
	     { 1'd1,
	       x_4__h33488,
	       5'h0,
	       x__h39682,
	       x__h39774,
	       32'h0,
	       proc_m3_pff_rv[56:0] } ;
  assign MUX_proc_m6_pff_rv$port1__write_1__VAL_3 =
	     { 1'd1,
	       x_4__h33488,
	       x_5__h39990,
	       32'h0,
	       SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265,
	       x__h39774,
	       proc_m3_pff_rv[56:0] } ;
  assign MUX_proc_m7_pff_rv$port0__write_1__VAL_1 =
	     { 1'd1, proc_m13_stalled[24:13], x_15__h54019 } ;
  assign MUX_proc_m7_pff_rv$port0__write_1__VAL_2 =
	     { 1'd1, proc_m9_pff_rv[56:45], x_13__h67664 } ;
  assign MUX_proc_m9_pff_rv$port1__write_1__VAL_1 =
	     { 1'd1, proc_m6_pff_rv[159:0], x_6__h43201 } ;
  assign MUX_proc_m9_pff_rv$port1__write_1__VAL_2 =
	     { 1'd1, proc_m6_pff_rv[159:0], 32'h0 } ;
  assign MUX_rqs$enq_1__VAL_1 = { x__h28097, 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_2 = { x__h47847, 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_3 =
	     { proc_m9_pff_rv[184:153], 1'd1, proc_m9_pff_rv[152:121] } ;

  // inlined wires
  assign proc_m3_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m11_decodeNm ||
	     WILL_FIRE_RL_proc_m11_decodeSt ||
	     WILL_FIRE_RL_proc_m11_decodeLd ;
  assign proc_m3_pff_rv$port1__read =
	     proc_m3_pff_rv$EN_port0__write ?
	       58'h0AAAAAAAAAAAAAA :
	       proc_m3_pff_rv ;
  assign proc_m3_pff_rv$port1__write_1 =
	     { 1'd1,
	       proc_m1_bram$readRs,
	       proc_m10_pc,
	       x_5__h33015,
	       proc_m10_fEpoch } ;
  assign proc_m3_pff_rv$port2__read =
	     WILL_FIRE_RL_proc_m10_instFetchRs ?
	       proc_m3_pff_rv$port1__write_1 :
	       proc_m3_pff_rv$port1__read ;
  assign proc_m3_pff_rv$port3__read =
	     WILL_FIRE_RL_proc_m10_modifyPc ?
	       58'h0AAAAAAAAAAAAAA :
	       proc_m3_pff_rv$port2__read ;
  assign proc_m6_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m12_execBypass ||
	     WILL_FIRE_RL_proc_m12_execNm ;
  assign proc_m6_pff_rv$port1__read =
	     proc_m6_pff_rv$EN_port0__write ?
	       161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       proc_m6_pff_rv ;
  assign proc_m6_pff_rv$EN_port1__write =
	     WILL_FIRE_RL_proc_m11_decodeLd ||
	     WILL_FIRE_RL_proc_m11_decodeSt ||
	     WILL_FIRE_RL_proc_m11_decodeNm ;
  always@(WILL_FIRE_RL_proc_m11_decodeLd or
	  MUX_proc_m6_pff_rv$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_proc_m11_decodeSt or
	  MUX_proc_m6_pff_rv$port1__write_1__VAL_2 or
	  WILL_FIRE_RL_proc_m11_decodeNm or
	  MUX_proc_m6_pff_rv$port1__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_proc_m11_decodeLd:
	  proc_m6_pff_rv$port1__write_1 =
	      MUX_proc_m6_pff_rv$port1__write_1__VAL_1;
      WILL_FIRE_RL_proc_m11_decodeSt:
	  proc_m6_pff_rv$port1__write_1 =
	      MUX_proc_m6_pff_rv$port1__write_1__VAL_2;
      WILL_FIRE_RL_proc_m11_decodeNm:
	  proc_m6_pff_rv$port1__write_1 =
	      MUX_proc_m6_pff_rv$port1__write_1__VAL_3;
      default: proc_m6_pff_rv$port1__write_1 =
		   161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m6_pff_rv$port2__read =
	     proc_m6_pff_rv$EN_port1__write ?
	       proc_m6_pff_rv$port1__write_1 :
	       proc_m6_pff_rv$port1__read ;
  assign proc_m7_pff_rv$EN_port0__write =
	     (WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	      WILL_FIRE_RL_proc_m13_repLd) &&
	     NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960 ||
	     (WILL_FIRE_RL_proc_m13_wbNmZ || WILL_FIRE_RL_proc_m13_wbNm) &&
	     NOT_IF_proc_m9_pff_rv_port0__read__69_BITS_63__ETC___d1071 ;
  assign proc_m7_pff_rv$port0__write_1 =
	     MUX_proc_m7_pff_rv$port0__write_1__SEL_1 ?
	       MUX_proc_m7_pff_rv$port0__write_1__VAL_1 :
	       MUX_proc_m7_pff_rv$port0__write_1__VAL_2 ;
  assign proc_m7_pff_rv$port1__read =
	     proc_m7_pff_rv$EN_port0__write ?
	       proc_m7_pff_rv$port0__write_1 :
	       proc_m7_pff_rv ;
  assign proc_m7_pff_rv$port2__read =
	     WILL_FIRE_RL_proc_m10_modifyPc ?
	       25'd11184810 :
	       proc_m7_pff_rv$port1__read ;
  assign proc_m9_pff_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_m13_wbNmZ || WILL_FIRE_RL_proc_m13_wbNm ||
	     WILL_FIRE_RL_proc_m13_reqSt ||
	     WILL_FIRE_RL_proc_m13_reqLd ||
	     WILL_FIRE_RL_proc_m13_wrongEpoch ;
  assign proc_m9_pff_rv$port1__read =
	     proc_m9_pff_rv$EN_port0__write ?
	       193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       proc_m9_pff_rv ;
  assign proc_m9_pff_rv$EN_port1__write =
	     WILL_FIRE_RL_proc_m12_execNm ||
	     WILL_FIRE_RL_proc_m12_execBypass ;
  assign proc_m9_pff_rv$port1__write_1 =
	     WILL_FIRE_RL_proc_m12_execNm ?
	       MUX_proc_m9_pff_rv$port1__write_1__VAL_1 :
	       MUX_proc_m9_pff_rv$port1__write_1__VAL_2 ;
  assign proc_m9_pff_rv$port2__read =
	     proc_m9_pff_rv$EN_port1__write ?
	       proc_m9_pff_rv$port1__write_1 :
	       proc_m9_pff_rv$port1__read ;

  // register proc_m10_fEpoch
  assign proc_m10_fEpoch$D_IN = !proc_m10_fEpoch ;
  assign proc_m10_fEpoch$EN = WILL_FIRE_RL_proc_m10_modifyPc ;

  // register proc_m10_pc
  assign proc_m10_pc$D_IN =
	     WILL_FIRE_RL_proc_m10_modifyPc ?
	       proc_m7_pff_rv$port1__read[11:0] :
	       x_5__h33015 ;
  assign proc_m10_pc$EN =
	     WILL_FIRE_RL_proc_m10_instFetchRs ||
	     WILL_FIRE_RL_proc_m10_modifyPc ;

  // register proc_m10_pcUpdated
  assign proc_m10_pcUpdated$D_IN = WILL_FIRE_RL_proc_m10_modifyPc ;
  assign proc_m10_pcUpdated$EN =
	     WILL_FIRE_RL_proc_m10_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m10_instFetchRq ||
	     WILL_FIRE_RL_proc_m10_modifyPc ;

  // register proc_m10_pinit
  assign proc_m10_pinit$D_IN = 1'd1 ;
  assign proc_m10_pinit$EN = WILL_FIRE_RL_proc_m10_pgmInitRsEnd ;

  // register proc_m10_pinitRq
  assign proc_m10_pinitRq$D_IN = 1'd1 ;
  assign proc_m10_pinitRq$EN = WILL_FIRE_RL_proc_m10_pgmInitRqEnd ;

  // register proc_m10_pinitRqOfs
  assign proc_m10_pinitRqOfs$D_IN =
	     WILL_FIRE_RL_proc_m10_pgmInitRq ?
	       MUX_proc_m10_pinitRqOfs$write_1__VAL_1 :
	       10'h0 ;
  assign proc_m10_pinitRqOfs$EN =
	     WILL_FIRE_RL_proc_m10_pgmInitRq ||
	     WILL_FIRE_RL_proc_m10_pgmInitRqEnd ;

  // register proc_m10_pinitRsOfs
  assign proc_m10_pinitRsOfs$D_IN =
	     WILL_FIRE_RL_proc_m10_pgmInitRs ?
	       MUX_proc_m10_pinitRsOfs$write_1__VAL_1 :
	       10'h0 ;
  assign proc_m10_pinitRsOfs$EN =
	     WILL_FIRE_RL_proc_m10_pgmInitRs ||
	     WILL_FIRE_RL_proc_m10_pgmInitRsEnd ;

  // register proc_m13_lastPc
  assign proc_m13_lastPc$D_IN =
	     MUX_proc_m7_pff_rv$port0__write_1__PSEL_1 ?
	       proc_m13_stalled[24:13] :
	       proc_m9_pff_rv[56:45] ;
  assign proc_m13_lastPc$EN =
	     WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	     WILL_FIRE_RL_proc_m13_repLd ||
	     WILL_FIRE_RL_proc_m13_wbNmZ ||
	     WILL_FIRE_RL_proc_m13_wbNm ;

  // register proc_m13_stall
  assign proc_m13_stall$D_IN = !MUX_proc_m7_pff_rv$port0__write_1__PSEL_1 ;
  assign proc_m13_stall$EN =
	     WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	     WILL_FIRE_RL_proc_m13_repLd ||
	     WILL_FIRE_RL_proc_m13_reqSt ||
	     WILL_FIRE_RL_proc_m13_reqLd ;

  // register proc_m13_stalled
  assign proc_m13_stalled$D_IN = proc_m9_pff_rv[191:32] ;
  assign proc_m13_stalled$EN = MUX_proc_m13_stall$write_1__SEL_2 ;

  // register proc_m1_readRq
  assign proc_m1_readRq$D_IN = !MUX_proc_m1_readRq$write_1__SEL_1 ;
  assign proc_m1_readRq$EN =
	     WILL_FIRE_RL_proc_m10_instFetchRsIgnore ||
	     WILL_FIRE_RL_proc_m10_instFetchRs ||
	     WILL_FIRE_RL_proc_m10_instFetchRq ;

  // register proc_m2_btbTags
  assign proc_m2_btbTags$D_IN =
	     { (proc_m7_pff_rv$port1__read[16:14] == 3'd7) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[55:49],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd6) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[48:42],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd5) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[41:35],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd4) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[34:28],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd3) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[27:21],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd2) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[20:14],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd1) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[13:7],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd0) ?
		 proc_m7_pff_rv$port1__read[23:17] :
		 proc_m2_btbTags[6:0] } ;
  assign proc_m2_btbTags$EN =
	     WILL_FIRE_RL_proc_m10_modifyPc &&
	     !proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59 ;

  // register proc_m2_btbTargets
  assign proc_m2_btbTargets$D_IN =
	     { (proc_m7_pff_rv$port1__read[16:14] == 3'd7) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[79:70],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd6) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[69:60],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd5) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[59:50],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd4) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[49:40],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd3) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[39:30],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd2) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[29:20],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd1) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[19:10],
	       (proc_m7_pff_rv$port1__read[16:14] == 3'd0) ?
		 proc_m7_pff_rv$port1__read[11:2] :
		 proc_m2_btbTargets[9:0] } ;
  assign proc_m2_btbTargets$EN =
	     WILL_FIRE_RL_proc_m10_modifyPc &&
	     !proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59 ;

  // register proc_m2_btbValid
  assign proc_m2_btbValid$D_IN =
	     proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59 ?
	       { proc_m7_pff_rv$port1__read[16:14] != 3'd7 &&
		 proc_m2_btbValid[7],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd6 &&
		 proc_m2_btbValid[6],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd5 &&
		 proc_m2_btbValid[5],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd4 &&
		 proc_m2_btbValid[4],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd3 &&
		 proc_m2_btbValid[3],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd2 &&
		 proc_m2_btbValid[2],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd1 &&
		 proc_m2_btbValid[1],
		 proc_m7_pff_rv$port1__read[16:14] != 3'd0 &&
		 proc_m2_btbValid[0] } :
	       { proc_m7_pff_rv$port1__read[16:14] == 3'd7 ||
		 proc_m2_btbValid[7],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd6 ||
		 proc_m2_btbValid[6],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd5 ||
		 proc_m2_btbValid[5],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd4 ||
		 proc_m2_btbValid[4],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd3 ||
		 proc_m2_btbValid[3],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd2 ||
		 proc_m2_btbValid[2],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd1 ||
		 proc_m2_btbValid[1],
		 proc_m7_pff_rv$port1__read[16:14] == 3'd0 ||
		 proc_m2_btbValid[0] } ;
  assign proc_m2_btbValid$EN =
	     WILL_FIRE_RL_proc_m10_modifyPc &&
	     (proc_m7_pff_rv$port1__read[23:17] ==
	      CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 ||
	      !proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59) ;

  // register proc_m3_pff_rv
  assign proc_m3_pff_rv$D_IN = proc_m3_pff_rv$port3__read ;
  assign proc_m3_pff_rv$EN = 1'b1 ;

  // register proc_m4_rf
  assign proc_m4_rf$D_IN =
	     WILL_FIRE_RL_proc_m13_repLd ?
	       MUX_proc_m4_rf$write_1__VAL_1 :
	       MUX_proc_m4_rf$write_1__VAL_2 ;
  assign proc_m4_rf$EN =
	     WILL_FIRE_RL_proc_m13_repLd || WILL_FIRE_RL_proc_m13_wbNm ;

  // register proc_m5_sbFlags
  always@(MUX_proc_m5_sbFlags$write_1__SEL_1 or
	  MUX_proc_m5_sbFlags$write_1__VAL_1 or
	  MUX_proc_m7_pff_rv$port0__write_1__PSEL_2 or
	  MUX_proc_m5_sbFlags$write_1__SEL_3 or
	  MUX_proc_m5_sbFlags$write_1__VAL_3 or
	  WILL_FIRE_RL_proc_m11_decodeLd or
	  MUX_proc_m5_sbFlags$write_1__VAL_4 or
	  WILL_FIRE_RL_proc_m11_decodeNm or
	  MUX_proc_m5_sbFlags$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_proc_m5_sbFlags$write_1__SEL_1:
	  proc_m5_sbFlags$D_IN = MUX_proc_m5_sbFlags$write_1__VAL_1;
      MUX_proc_m7_pff_rv$port0__write_1__PSEL_2:
	  proc_m5_sbFlags$D_IN = MUX_proc_m5_sbFlags$write_1__VAL_1;
      MUX_proc_m5_sbFlags$write_1__SEL_3:
	  proc_m5_sbFlags$D_IN = MUX_proc_m5_sbFlags$write_1__VAL_3;
      WILL_FIRE_RL_proc_m11_decodeLd:
	  proc_m5_sbFlags$D_IN = MUX_proc_m5_sbFlags$write_1__VAL_4;
      WILL_FIRE_RL_proc_m11_decodeNm:
	  proc_m5_sbFlags$D_IN = MUX_proc_m5_sbFlags$write_1__VAL_5;
      default: proc_m5_sbFlags$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m5_sbFlags$EN =
	     WILL_FIRE_RL_proc_m13_wrongEpoch &&
	     (proc_m9_pff_rv[191:190] == 2'h0 ||
	      proc_m9_pff_rv[191:190] == 2'h3) ||
	     WILL_FIRE_RL_proc_m13_wbNmZ ||
	     WILL_FIRE_RL_proc_m13_wbNm ||
	     WILL_FIRE_RL_proc_m13_repLdZ ||
	     WILL_FIRE_RL_proc_m13_repLd ||
	     WILL_FIRE_RL_proc_m11_decodeLd ||
	     WILL_FIRE_RL_proc_m11_decodeNm ;

  // register proc_m6_pff_rv
  assign proc_m6_pff_rv$D_IN = proc_m6_pff_rv$port2__read ;
  assign proc_m6_pff_rv$EN = 1'b1 ;

  // register proc_m7_pff_rv
  assign proc_m7_pff_rv$D_IN = proc_m7_pff_rv$port2__read ;
  assign proc_m7_pff_rv$EN = 1'b1 ;

  // register proc_m8_eEpoch
  assign proc_m8_eEpoch$D_IN =
	     MUX_proc_m8_eEpoch$write_1__SEL_1 ?
	       !proc_m8_eEpoch :
	       !proc_m8_eEpoch ;
  assign proc_m8_eEpoch$EN =
	     (WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	      WILL_FIRE_RL_proc_m13_repLd) &&
	     NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960 ||
	     (WILL_FIRE_RL_proc_m13_wbNmZ || WILL_FIRE_RL_proc_m13_wbNm) &&
	     NOT_IF_proc_m9_pff_rv_port0__read__69_BITS_63__ETC___d1071 ;

  // register proc_m9_pff_rv
  assign proc_m9_pff_rv$D_IN = proc_m9_pff_rv$port2__read ;
  assign proc_m9_pff_rv$EN = 1'b1 ;

  // submodule proc_m1_bram
  assign proc_m1_bram$readRq_idx = proc_m10_pc[11:2] ;
  assign proc_m1_bram$write_d = rss$D_OUT ;
  assign proc_m1_bram$write_idx = proc_m10_pinitRsOfs ;
  assign proc_m1_bram$EN_readRq = WILL_FIRE_RL_proc_m10_instFetchRq ;
  assign proc_m1_bram$EN_write =
	     WILL_FIRE_RL_proc_m10_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m10_pgmInitRs ;

  // submodule rqs
  always@(MUX_rqs$enq_1__SEL_1 or
	  MUX_rqs$enq_1__VAL_1 or
	  WILL_FIRE_RL_proc_m13_reqLd or
	  MUX_rqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_proc_m13_reqSt or MUX_rqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rqs$enq_1__SEL_1: rqs$D_IN = MUX_rqs$enq_1__VAL_1;
      WILL_FIRE_RL_proc_m13_reqLd: rqs$D_IN = MUX_rqs$enq_1__VAL_2;
      WILL_FIRE_RL_proc_m13_reqSt: rqs$D_IN = MUX_rqs$enq_1__VAL_3;
      default: rqs$D_IN = 65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rqs$ENQ =
	     WILL_FIRE_RL_proc_m10_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m10_pgmInitRq ||
	     WILL_FIRE_RL_proc_m13_reqLd ||
	     WILL_FIRE_RL_proc_m13_reqSt ;
  assign rqs$DEQ = EN_obtain_rq_get ;
  assign rqs$CLR = 1'b0 ;

  // submodule rss
  assign rss$D_IN = send_rs_put ;
  assign rss$ENQ = EN_send_rs_put ;
  assign rss$DEQ =
	     WILL_FIRE_RL_proc_m13_repSt || WILL_FIRE_RL_proc_m13_repLdZ ||
	     WILL_FIRE_RL_proc_m13_repLd ||
	     WILL_FIRE_RL_proc_m10_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m10_pgmInitRs ;
  assign rss$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1052 =
	     x7831_MINUS_y7966__q14[31] ?
	       proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 :
	       proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 ;
  assign IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1054 =
	     x7831_MINUS_y7966__q14[31] ?
	       proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 :
	       proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 ;
  assign IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d942 =
	     x4188_MINUS_y4323__q5[31] ?
	       proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 :
	       proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 ;
  assign IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d943 =
	     x4188_MINUS_y4323__q5[31] ?
	       proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 :
	       proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d766 =
	     { (proc_m13_stalled[157:153] == 5'd31) ?
		 x_9__h48258 :
		 proc_m4_rf[1023:992],
	       (proc_m13_stalled[157:153] == 5'd30) ?
		 x_9__h48258 :
		 proc_m4_rf[991:960],
	       (proc_m13_stalled[157:153] == 5'd29) ?
		 x_9__h48258 :
		 proc_m4_rf[959:928],
	       (proc_m13_stalled[157:153] == 5'd28) ?
		 x_9__h48258 :
		 proc_m4_rf[927:896] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d771 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d766,
	       (proc_m13_stalled[157:153] == 5'd27) ?
		 x_9__h48258 :
		 proc_m4_rf[895:864],
	       (proc_m13_stalled[157:153] == 5'd26) ?
		 x_9__h48258 :
		 proc_m4_rf[863:832] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d776 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d771,
	       (proc_m13_stalled[157:153] == 5'd25) ?
		 x_9__h48258 :
		 proc_m4_rf[831:800],
	       (proc_m13_stalled[157:153] == 5'd24) ?
		 x_9__h48258 :
		 proc_m4_rf[799:768] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d781 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d776,
	       (proc_m13_stalled[157:153] == 5'd23) ?
		 x_9__h48258 :
		 proc_m4_rf[767:736],
	       (proc_m13_stalled[157:153] == 5'd22) ?
		 x_9__h48258 :
		 proc_m4_rf[735:704] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d786 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d781,
	       (proc_m13_stalled[157:153] == 5'd21) ?
		 x_9__h48258 :
		 proc_m4_rf[703:672],
	       (proc_m13_stalled[157:153] == 5'd20) ?
		 x_9__h48258 :
		 proc_m4_rf[671:640] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d791 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d786,
	       (proc_m13_stalled[157:153] == 5'd19) ?
		 x_9__h48258 :
		 proc_m4_rf[639:608],
	       (proc_m13_stalled[157:153] == 5'd18) ?
		 x_9__h48258 :
		 proc_m4_rf[607:576] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d796 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d791,
	       (proc_m13_stalled[157:153] == 5'd17) ?
		 x_9__h48258 :
		 proc_m4_rf[575:544],
	       (proc_m13_stalled[157:153] == 5'd16) ?
		 x_9__h48258 :
		 proc_m4_rf[543:512] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d801 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d796,
	       (proc_m13_stalled[157:153] == 5'd15) ?
		 x_9__h48258 :
		 proc_m4_rf[511:480],
	       (proc_m13_stalled[157:153] == 5'd14) ?
		 x_9__h48258 :
		 proc_m4_rf[479:448] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d806 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d801,
	       (proc_m13_stalled[157:153] == 5'd13) ?
		 x_9__h48258 :
		 proc_m4_rf[447:416],
	       (proc_m13_stalled[157:153] == 5'd12) ?
		 x_9__h48258 :
		 proc_m4_rf[415:384] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d811 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d806,
	       (proc_m13_stalled[157:153] == 5'd11) ?
		 x_9__h48258 :
		 proc_m4_rf[383:352],
	       (proc_m13_stalled[157:153] == 5'd10) ?
		 x_9__h48258 :
		 proc_m4_rf[351:320] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d816 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d811,
	       (proc_m13_stalled[157:153] == 5'd9) ?
		 x_9__h48258 :
		 proc_m4_rf[319:288],
	       (proc_m13_stalled[157:153] == 5'd8) ?
		 x_9__h48258 :
		 proc_m4_rf[287:256] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d821 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d816,
	       (proc_m13_stalled[157:153] == 5'd7) ?
		 x_9__h48258 :
		 proc_m4_rf[255:224],
	       (proc_m13_stalled[157:153] == 5'd6) ?
		 x_9__h48258 :
		 proc_m4_rf[223:192] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d826 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d821,
	       (proc_m13_stalled[157:153] == 5'd5) ?
		 x_9__h48258 :
		 proc_m4_rf[191:160],
	       (proc_m13_stalled[157:153] == 5'd4) ?
		 x_9__h48258 :
		 proc_m4_rf[159:128] } ;
  assign IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d831 =
	     { IF_proc_m13_stalled_11_BITS_157_TO_153_12_EQ_3_ETC___d826,
	       (proc_m13_stalled[157:153] == 5'd3) ?
		 x_9__h48258 :
		 proc_m4_rf[127:96],
	       (proc_m13_stalled[157:153] == 5'd2) ?
		 x_9__h48258 :
		 proc_m4_rf[95:64] } ;
  assign NOT_IF_proc_m13_stalled_11_BITS_31_TO_25_15_EQ_ETC___d960 =
	     x_15__h54019 != proc_m13_stalled[12:1] ;
  assign NOT_IF_proc_m9_pff_rv_port0__read__69_BITS_63__ETC___d1071 =
	     x_13__h67664 != proc_m9_pff_rv[44:33] ;
  assign NOT_SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m_ETC___d378 =
	     !SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 &&
	     !SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 &&
	     !CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 &&
	     proc_m3_pff_rv[31:25] != 7'h03 &&
	     proc_m3_pff_rv[31:25] != 7'h23 &&
	     !proc_m6_pff_rv$port1__read[160] ;
  assign NOT_proc_m7_pff_rv_port0__read__73_BIT_24_74_7_ETC___d359 =
	     !proc_m7_pff_rv[24] &&
	     !SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 &&
	     !SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 &&
	     proc_m3_pff_rv[31:25] == 7'h23 &&
	     !proc_m6_pff_rv$port1__read[160] ;
  assign SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1038 =
	     x__h67831 == y__h67966 ;
  assign SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1056 =
	     x__h67831 < y__h67966 ;
  assign SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d930 =
	     x__h54188 == y__h54323 ;
  assign SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d945 =
	     x__h54188 < y__h54323 ;
  assign SEXT_rss_first__9_BITS_31_TO_24_34___d735 =
	     { {24{rssD_OUT_BITS_31_TO_24__q6[7]}},
	       rssD_OUT_BITS_31_TO_24__q6 } ;
  assign _0_CONCAT_proc_m6_pff_rv_port0__read__64_BITS_1_ETC___d551 =
	     { 32'd0, proc_m6_pff_rv[120:89] } *
	     { 32'd0, proc_m6_pff_rv[88:57] } ;
  assign proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 =
	     proc_m13_stalled[24:13] + 12'h004 ;
  assign proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 =
	     proc_m13_stalled[24:13] + y__h54435 ;
  assign proc_m3_pff_rv_BITS_56_TO_45__q1 = proc_m3_pff_rv[56:45] ;
  assign proc_m3_pff_rv_port0__read__76_BIT_57_77_AND_N_ETC___d226 =
	     proc_m3_pff_rv[57] &&
	     !SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 &&
	     !CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 &&
	     proc_m3_pff_rv[31:25] == 7'h03 &&
	     !proc_m6_pff_rv$port1__read[160] ;
  assign proc_m6_pff_rv_BITS_56_TO_45__q2 = proc_m6_pff_rv[56:45] ;
  assign proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528 =
	     proc_m6_pff_rv[120:89] - proc_m6_pff_rv[88:57] ;
  assign proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534 =
	     proc_m6_pff_rv[120:89] >> proc_m6_pff_rv[61:57] ;
  assign proc_m7_pff_rv_port1__read__4_BITS_11_TO_2_6_E_ETC___d59 =
	     proc_m7_pff_rv$port1__read[11:2] ==
	     proc_m7_pff_rv$port1__read[23:14] + 10'h001 ;
  assign proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 =
	     proc_m9_pff_rv[56:45] + y__h68078 ;
  assign proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 =
	     proc_m9_pff_rv[56:45] + 12'h004 ;
  assign proc_m9_pff_rv_port0__read__69_BIT_32_71_EQ_pr_ETC___d573 =
	     proc_m9_pff_rv[32] == proc_m8_eEpoch ;
  assign rssD_OUT_BITS_15_TO_0__q12 = rss$D_OUT[15:0] ;
  assign rssD_OUT_BITS_15_TO_8__q8 = rss$D_OUT[15:8] ;
  assign rssD_OUT_BITS_23_TO_16__q9 = rss$D_OUT[23:16] ;
  assign rssD_OUT_BITS_31_TO_16__q11 = rss$D_OUT[31:16] ;
  assign rssD_OUT_BITS_31_TO_24__q6 = rss$D_OUT[31:24] ;
  assign rssD_OUT_BITS_7_TO_0__q7 = rss$D_OUT[7:0] ;
  assign v__h32892 =
	     (CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 &&
	      proc_m10_pc[11:5] ==
	      CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4) ?
	       x_6__h32993 :
	       x_6__h33010 ;
  assign x4188_MINUS_y4323__q5 = x__h54188 - y__h54323 ;
  assign x7831_MINUS_y7966__q14 = x__h67831 - y__h67966 ;
  assign x_5__h33015 = { v__h32892, 2'h0 } ;
  assign x_5__h39990 =
	     (proc_m3_pff_rv[31:25] == 7'h63) ? 5'h0 : proc_m3_pff_rv[36:32] ;
  assign x_6__h33010 = proc_m10_pc[11:2] + 10'h001 ;
  assign x_9__h35156 =
	     { {20{proc_m3_pff_rv_BITS_56_TO_45__q1[11]}},
	       proc_m3_pff_rv_BITS_56_TO_45__q1 } ;
  assign x__h28065 = ~proc_m10_pinitRqOfs ;
  assign x__h28097 = { 20'd0, proc_m10_pinitRqOfs, 2'd0 } ;
  assign x__h28342 = ~proc_m10_pinitRsOfs ;
  assign x__h35255 =
	     SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 +
	     x_9__h35156 ;
  assign x__h39682 =
	     SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 +
	     { {20{x__h39732[11]}}, x__h39732 } ;
  assign x__h39732 = { proc_m3_pff_rv[56:50], proc_m3_pff_rv[36:32] } ;
  assign x__h43423 = { 20'd0, proc_m6_pff_rv[24:13] } ;
  assign x__h43474 = proc_m6_pff_rv[24:13] + 12'h004 ;
  assign x__h47847 = { proc_m9_pff_rv[184:155], 2'h0 } ;
  assign y__h43564 =
	     { {20{proc_m6_pff_rv_BITS_56_TO_45__q2[11]}},
	       proc_m6_pff_rv_BITS_56_TO_45__q2 } ;
  assign y__h43664 = { 20'd0, proc_m6_pff_rv[56:45] } ;
  assign y__h54072 = { proc_m13_stalled[45], proc_m13_stalled[55:46], 1'h0 } ;
  assign y__h54435 =
	     { proc_m13_stalled[32],
	       proc_m13_stalled[55:50],
	       proc_m13_stalled[36:33],
	       1'h0 } ;
  assign y__h67715 = { proc_m9_pff_rv[77], proc_m9_pff_rv[87:78], 1'h0 } ;
  assign y__h68078 =
	     { proc_m9_pff_rv[64],
	       proc_m9_pff_rv[87:82],
	       proc_m9_pff_rv[68:65],
	       1'h0 } ;
  always@(proc_m3_pff_rv)
  begin
    case (proc_m3_pff_rv[31:25])
      7'h03: x_4__h33488 = 2'h0;
      7'h23: x_4__h33488 = 2'h1;
      default: x_4__h33488 = 2'h3;
    endcase
  end
  always@(proc_m3_pff_rv or proc_m4_rf)
  begin
    case (proc_m3_pff_rv[49:45])
      5'd0: x__h39774 = proc_m4_rf[31:0];
      5'd1: x__h39774 = proc_m4_rf[63:32];
      5'd2: x__h39774 = proc_m4_rf[95:64];
      5'd3: x__h39774 = proc_m4_rf[127:96];
      5'd4: x__h39774 = proc_m4_rf[159:128];
      5'd5: x__h39774 = proc_m4_rf[191:160];
      5'd6: x__h39774 = proc_m4_rf[223:192];
      5'd7: x__h39774 = proc_m4_rf[255:224];
      5'd8: x__h39774 = proc_m4_rf[287:256];
      5'd9: x__h39774 = proc_m4_rf[319:288];
      5'd10: x__h39774 = proc_m4_rf[351:320];
      5'd11: x__h39774 = proc_m4_rf[383:352];
      5'd12: x__h39774 = proc_m4_rf[415:384];
      5'd13: x__h39774 = proc_m4_rf[447:416];
      5'd14: x__h39774 = proc_m4_rf[479:448];
      5'd15: x__h39774 = proc_m4_rf[511:480];
      5'd16: x__h39774 = proc_m4_rf[543:512];
      5'd17: x__h39774 = proc_m4_rf[575:544];
      5'd18: x__h39774 = proc_m4_rf[607:576];
      5'd19: x__h39774 = proc_m4_rf[639:608];
      5'd20: x__h39774 = proc_m4_rf[671:640];
      5'd21: x__h39774 = proc_m4_rf[703:672];
      5'd22: x__h39774 = proc_m4_rf[735:704];
      5'd23: x__h39774 = proc_m4_rf[767:736];
      5'd24: x__h39774 = proc_m4_rf[799:768];
      5'd25: x__h39774 = proc_m4_rf[831:800];
      5'd26: x__h39774 = proc_m4_rf[863:832];
      5'd27: x__h39774 = proc_m4_rf[895:864];
      5'd28: x__h39774 = proc_m4_rf[927:896];
      5'd29: x__h39774 = proc_m4_rf[959:928];
      5'd30: x__h39774 = proc_m4_rf[991:960];
      5'd31: x__h39774 = proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m13_stalled or proc_m4_rf)
  begin
    case (proc_m13_stalled[44:40])
      5'd0: x__h54188 = proc_m4_rf[31:0];
      5'd1: x__h54188 = proc_m4_rf[63:32];
      5'd2: x__h54188 = proc_m4_rf[95:64];
      5'd3: x__h54188 = proc_m4_rf[127:96];
      5'd4: x__h54188 = proc_m4_rf[159:128];
      5'd5: x__h54188 = proc_m4_rf[191:160];
      5'd6: x__h54188 = proc_m4_rf[223:192];
      5'd7: x__h54188 = proc_m4_rf[255:224];
      5'd8: x__h54188 = proc_m4_rf[287:256];
      5'd9: x__h54188 = proc_m4_rf[319:288];
      5'd10: x__h54188 = proc_m4_rf[351:320];
      5'd11: x__h54188 = proc_m4_rf[383:352];
      5'd12: x__h54188 = proc_m4_rf[415:384];
      5'd13: x__h54188 = proc_m4_rf[447:416];
      5'd14: x__h54188 = proc_m4_rf[479:448];
      5'd15: x__h54188 = proc_m4_rf[511:480];
      5'd16: x__h54188 = proc_m4_rf[543:512];
      5'd17: x__h54188 = proc_m4_rf[575:544];
      5'd18: x__h54188 = proc_m4_rf[607:576];
      5'd19: x__h54188 = proc_m4_rf[639:608];
      5'd20: x__h54188 = proc_m4_rf[671:640];
      5'd21: x__h54188 = proc_m4_rf[703:672];
      5'd22: x__h54188 = proc_m4_rf[735:704];
      5'd23: x__h54188 = proc_m4_rf[767:736];
      5'd24: x__h54188 = proc_m4_rf[799:768];
      5'd25: x__h54188 = proc_m4_rf[831:800];
      5'd26: x__h54188 = proc_m4_rf[863:832];
      5'd27: x__h54188 = proc_m4_rf[895:864];
      5'd28: x__h54188 = proc_m4_rf[927:896];
      5'd29: x__h54188 = proc_m4_rf[959:928];
      5'd30: x__h54188 = proc_m4_rf[991:960];
      5'd31: x__h54188 = proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m13_stalled or proc_m4_rf)
  begin
    case (proc_m13_stalled[49:45])
      5'd0: y__h54323 = proc_m4_rf[31:0];
      5'd1: y__h54323 = proc_m4_rf[63:32];
      5'd2: y__h54323 = proc_m4_rf[95:64];
      5'd3: y__h54323 = proc_m4_rf[127:96];
      5'd4: y__h54323 = proc_m4_rf[159:128];
      5'd5: y__h54323 = proc_m4_rf[191:160];
      5'd6: y__h54323 = proc_m4_rf[223:192];
      5'd7: y__h54323 = proc_m4_rf[255:224];
      5'd8: y__h54323 = proc_m4_rf[287:256];
      5'd9: y__h54323 = proc_m4_rf[319:288];
      5'd10: y__h54323 = proc_m4_rf[351:320];
      5'd11: y__h54323 = proc_m4_rf[383:352];
      5'd12: y__h54323 = proc_m4_rf[415:384];
      5'd13: y__h54323 = proc_m4_rf[447:416];
      5'd14: y__h54323 = proc_m4_rf[479:448];
      5'd15: y__h54323 = proc_m4_rf[511:480];
      5'd16: y__h54323 = proc_m4_rf[543:512];
      5'd17: y__h54323 = proc_m4_rf[575:544];
      5'd18: y__h54323 = proc_m4_rf[607:576];
      5'd19: y__h54323 = proc_m4_rf[639:608];
      5'd20: y__h54323 = proc_m4_rf[671:640];
      5'd21: y__h54323 = proc_m4_rf[703:672];
      5'd22: y__h54323 = proc_m4_rf[735:704];
      5'd23: y__h54323 = proc_m4_rf[767:736];
      5'd24: y__h54323 = proc_m4_rf[799:768];
      5'd25: y__h54323 = proc_m4_rf[831:800];
      5'd26: y__h54323 = proc_m4_rf[863:832];
      5'd27: y__h54323 = proc_m4_rf[895:864];
      5'd28: y__h54323 = proc_m4_rf[927:896];
      5'd29: y__h54323 = proc_m4_rf[959:928];
      5'd30: y__h54323 = proc_m4_rf[991:960];
      5'd31: y__h54323 = proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m10_pc or proc_m2_btbTargets)
  begin
    case (proc_m10_pc[4:2])
      3'd0: x_6__h32993 = proc_m2_btbTargets[9:0];
      3'd1: x_6__h32993 = proc_m2_btbTargets[19:10];
      3'd2: x_6__h32993 = proc_m2_btbTargets[29:20];
      3'd3: x_6__h32993 = proc_m2_btbTargets[39:30];
      3'd4: x_6__h32993 = proc_m2_btbTargets[49:40];
      3'd5: x_6__h32993 = proc_m2_btbTargets[59:50];
      3'd6: x_6__h32993 = proc_m2_btbTargets[69:60];
      3'd7: x_6__h32993 = proc_m2_btbTargets[79:70];
    endcase
  end
  always@(proc_m9_pff_rv or proc_m4_rf)
  begin
    case (proc_m9_pff_rv[76:72])
      5'd0: x__h67831 = proc_m4_rf[31:0];
      5'd1: x__h67831 = proc_m4_rf[63:32];
      5'd2: x__h67831 = proc_m4_rf[95:64];
      5'd3: x__h67831 = proc_m4_rf[127:96];
      5'd4: x__h67831 = proc_m4_rf[159:128];
      5'd5: x__h67831 = proc_m4_rf[191:160];
      5'd6: x__h67831 = proc_m4_rf[223:192];
      5'd7: x__h67831 = proc_m4_rf[255:224];
      5'd8: x__h67831 = proc_m4_rf[287:256];
      5'd9: x__h67831 = proc_m4_rf[319:288];
      5'd10: x__h67831 = proc_m4_rf[351:320];
      5'd11: x__h67831 = proc_m4_rf[383:352];
      5'd12: x__h67831 = proc_m4_rf[415:384];
      5'd13: x__h67831 = proc_m4_rf[447:416];
      5'd14: x__h67831 = proc_m4_rf[479:448];
      5'd15: x__h67831 = proc_m4_rf[511:480];
      5'd16: x__h67831 = proc_m4_rf[543:512];
      5'd17: x__h67831 = proc_m4_rf[575:544];
      5'd18: x__h67831 = proc_m4_rf[607:576];
      5'd19: x__h67831 = proc_m4_rf[639:608];
      5'd20: x__h67831 = proc_m4_rf[671:640];
      5'd21: x__h67831 = proc_m4_rf[703:672];
      5'd22: x__h67831 = proc_m4_rf[735:704];
      5'd23: x__h67831 = proc_m4_rf[767:736];
      5'd24: x__h67831 = proc_m4_rf[799:768];
      5'd25: x__h67831 = proc_m4_rf[831:800];
      5'd26: x__h67831 = proc_m4_rf[863:832];
      5'd27: x__h67831 = proc_m4_rf[895:864];
      5'd28: x__h67831 = proc_m4_rf[927:896];
      5'd29: x__h67831 = proc_m4_rf[959:928];
      5'd30: x__h67831 = proc_m4_rf[991:960];
      5'd31: x__h67831 = proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m9_pff_rv or proc_m4_rf)
  begin
    case (proc_m9_pff_rv[81:77])
      5'd0: y__h67966 = proc_m4_rf[31:0];
      5'd1: y__h67966 = proc_m4_rf[63:32];
      5'd2: y__h67966 = proc_m4_rf[95:64];
      5'd3: y__h67966 = proc_m4_rf[127:96];
      5'd4: y__h67966 = proc_m4_rf[159:128];
      5'd5: y__h67966 = proc_m4_rf[191:160];
      5'd6: y__h67966 = proc_m4_rf[223:192];
      5'd7: y__h67966 = proc_m4_rf[255:224];
      5'd8: y__h67966 = proc_m4_rf[287:256];
      5'd9: y__h67966 = proc_m4_rf[319:288];
      5'd10: y__h67966 = proc_m4_rf[351:320];
      5'd11: y__h67966 = proc_m4_rf[383:352];
      5'd12: y__h67966 = proc_m4_rf[415:384];
      5'd13: y__h67966 = proc_m4_rf[447:416];
      5'd14: y__h67966 = proc_m4_rf[479:448];
      5'd15: y__h67966 = proc_m4_rf[511:480];
      5'd16: y__h67966 = proc_m4_rf[543:512];
      5'd17: y__h67966 = proc_m4_rf[575:544];
      5'd18: y__h67966 = proc_m4_rf[607:576];
      5'd19: y__h67966 = proc_m4_rf[639:608];
      5'd20: y__h67966 = proc_m4_rf[671:640];
      5'd21: y__h67966 = proc_m4_rf[703:672];
      5'd22: y__h67966 = proc_m4_rf[735:704];
      5'd23: y__h67966 = proc_m4_rf[767:736];
      5'd24: y__h67966 = proc_m4_rf[799:768];
      5'd25: y__h67966 = proc_m4_rf[831:800];
      5'd26: y__h67966 = proc_m4_rf[863:832];
      5'd27: y__h67966 = proc_m4_rf[895:864];
      5'd28: y__h67966 = proc_m4_rf[927:896];
      5'd29: y__h67966 = proc_m4_rf[959:928];
      5'd30: y__h67966 = proc_m4_rf[991:960];
      5'd31: y__h67966 = proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m10_pc or proc_m2_btbValid)
  begin
    case (proc_m10_pc[4:2])
      3'd0:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[0];
      3'd1:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[1];
      3'd2:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[2];
      3'd3:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[3];
      3'd4:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[4];
      3'd5:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[5];
      3'd6:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[6];
      3'd7:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbVali_ETC__q3 =
	      proc_m2_btbValid[7];
    endcase
  end
  always@(proc_m10_pc or proc_m2_btbTags)
  begin
    case (proc_m10_pc[4:2])
      3'd0:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[6:0];
      3'd1:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[13:7];
      3'd2:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[20:14];
      3'd3:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[27:21];
      3'd4:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[34:28];
      3'd5:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[41:35];
      3'd6:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[48:42];
      3'd7:
	  CASE_proc_m10_pc_BITS_4_TO_2_0_proc_m2_btbTags_ETC__q4 =
	      proc_m2_btbTags[55:49];
    endcase
  end
  always@(proc_m3_pff_rv or proc_m5_sbFlags)
  begin
    case (proc_m3_pff_rv[44:40])
      5'd0:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d213 =
	      proc_m5_sbFlags[31];
    endcase
  end
  always@(proc_m3_pff_rv or proc_m5_sbFlags)
  begin
    case (proc_m3_pff_rv[49:45])
      5'd0:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m5_sbFlags_78_BIT_0_79_proc_m5_sb_ETC___d354 =
	      proc_m5_sbFlags[31];
    endcase
  end
  always@(proc_m3_pff_rv or proc_m4_rf)
  begin
    case (proc_m3_pff_rv[44:40])
      5'd0:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[31:0];
      5'd1:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[63:32];
      5'd2:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[95:64];
      5'd3:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[127:96];
      5'd4:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[159:128];
      5'd5:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[191:160];
      5'd6:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[223:192];
      5'd7:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[255:224];
      5'd8:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[287:256];
      5'd9:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[319:288];
      5'd10:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[351:320];
      5'd11:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[383:352];
      5'd12:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[415:384];
      5'd13:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[447:416];
      5'd14:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[479:448];
      5'd15:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[511:480];
      5'd16:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[543:512];
      5'd17:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[575:544];
      5'd18:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[607:576];
      5'd19:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[639:608];
      5'd20:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[671:640];
      5'd21:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[703:672];
      5'd22:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[735:704];
      5'd23:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[767:736];
      5'd24:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[799:768];
      5'd25:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[831:800];
      5'd26:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[863:832];
      5'd27:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[895:864];
      5'd28:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[927:896];
      5'd29:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[959:928];
      5'd30:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[991:960];
      5'd31:
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d265 =
	      proc_m4_rf[1023:992];
    endcase
  end
  always@(proc_m13_stalled or
	  proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 or
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d930 or
	  proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 or
	  IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d942 or
	  IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d943 or
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d945)
  begin
    case (proc_m13_stalled[39:37])
      3'h0:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d930 ?
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 :
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937;
      3'h1:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d930 ?
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 :
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936;
      3'h4:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d942;
      3'h5:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d943;
      3'h6:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d945 ?
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936 :
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937;
      3'h7:
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d945 ?
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 :
		proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_proc_ETC___d936;
      default: IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 =
		   proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937;
    endcase
  end
  always@(proc_m13_stalled or
	  proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937 or
	  IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954 or
	  x__h54188 or y__h54072)
  begin
    case (proc_m13_stalled[31:25])
      7'h63:
	  x_15__h54019 =
	      IF_proc_m13_stalled_11_BITS_39_TO_37_22_EQ_0x0_ETC___d954;
      7'h67: x_15__h54019 = x__h54188[11:0] + proc_m13_stalled[56:45];
      7'h6F: x_15__h54019 = proc_m13_stalled[24:13] + y__h54072;
      default: x_15__h54019 =
		   proc_m13_stalled_11_BITS_24_TO_13_14_PLUS_0x4___d937;
    endcase
  end
  always@(proc_m13_stalled or
	  SEXT_rss_first__9_BITS_31_TO_24_34___d735 or
	  rssD_OUT_BITS_7_TO_0__q7 or
	  rssD_OUT_BITS_15_TO_8__q8 or rssD_OUT_BITS_23_TO_16__q9)
  begin
    case (proc_m13_stalled[122:121])
      2'h0:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10 =
	      { {24{rssD_OUT_BITS_7_TO_0__q7[7]}}, rssD_OUT_BITS_7_TO_0__q7 };
      2'h1:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10 =
	      { {24{rssD_OUT_BITS_15_TO_8__q8[7]}},
		rssD_OUT_BITS_15_TO_8__q8 };
      2'h2:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10 =
	      { {24{rssD_OUT_BITS_23_TO_16__q9[7]}},
		rssD_OUT_BITS_23_TO_16__q9 };
      2'd3:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10 =
	      SEXT_rss_first__9_BITS_31_TO_24_34___d735;
    endcase
  end
  always@(proc_m13_stalled or rss$D_OUT)
  begin
    case (proc_m13_stalled[122:121])
      2'h0:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13 =
	      rss$D_OUT[7:0];
      2'h1:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13 =
	      rss$D_OUT[15:8];
      2'h2:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13 =
	      rss$D_OUT[23:16];
      2'd3:
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13 =
	      rss$D_OUT[31:24];
    endcase
  end
  always@(proc_m13_stalled or
	  rss$D_OUT or
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10 or
	  rssD_OUT_BITS_31_TO_16__q11 or
	  rssD_OUT_BITS_15_TO_0__q12 or
	  CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13)
  begin
    case (proc_m13_stalled[39:37])
      3'h0:
	  x_9__h48258 =
	      CASE_proc_m13_stalled_BITS_122_TO_121_0x0_SEXT_ETC__q10;
      3'h1:
	  x_9__h48258 =
	      proc_m13_stalled[122] ?
		{ {16{rssD_OUT_BITS_31_TO_16__q11[15]}},
		  rssD_OUT_BITS_31_TO_16__q11 } :
		{ {16{rssD_OUT_BITS_15_TO_0__q12[15]}},
		  rssD_OUT_BITS_15_TO_0__q12 };
      3'h4:
	  x_9__h48258 =
	      { 24'd0,
		CASE_proc_m13_stalled_BITS_122_TO_121_0x0_rss_ETC__q13 };
      3'h5:
	  x_9__h48258 =
	      { 16'd0,
		proc_m13_stalled[122] ? rss$D_OUT[31:16] : rss$D_OUT[15:0] };
      default: x_9__h48258 = rss$D_OUT;
    endcase
  end
  always@(proc_m9_pff_rv or
	  proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 or
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1038 or
	  proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 or
	  IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1052 or
	  IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1054 or
	  SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1056)
  begin
    case (proc_m9_pff_rv[71:69])
      3'h0:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1038 ?
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 :
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045;
      3'h1:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1038 ?
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 :
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044;
      3'h4:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1052;
      3'h5:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      IF_SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc__ETC___d1054;
      3'h6:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1056 ?
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044 :
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045;
      3'h7:
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
	      SEL_ARR_proc_m4_rf_31_BITS_31_TO_0_32_proc_m4__ETC___d1056 ?
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 :
		proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1044;
      default: IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 =
		   proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045;
    endcase
  end
  always@(proc_m9_pff_rv or
	  proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045 or
	  IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065 or
	  x__h67831 or y__h67715)
  begin
    case (proc_m9_pff_rv[63:57])
      7'h63:
	  x_13__h67664 =
	      IF_proc_m9_pff_rv_port0__read__69_BITS_71_TO_6_ETC___d1065;
      7'h67: x_13__h67664 = x__h67831[11:0] + proc_m9_pff_rv[88:77];
      7'h6F: x_13__h67664 = proc_m9_pff_rv[56:45] + y__h67715;
      default: x_13__h67664 =
		   proc_m9_pff_rv_port0__read__69_BITS_56_TO_45_0_ETC___d1045;
    endcase
  end
  always@(proc_m6_pff_rv or y__h43564 or y__h43664)
  begin
    case (proc_m6_pff_rv[39:37])
      3'h0:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] + y__h43564;
      3'h1:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] << proc_m6_pff_rv[49:45];
      3'h2:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      (proc_m6_pff_rv[120:89] < y__h43564) ? 32'h00000001 : 32'h0;
      3'h3:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      (proc_m6_pff_rv[120:89] < y__h43664) ? 32'h00000001 : 32'h0;
      3'h4:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] ^ y__h43564;
      3'h5:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] >> proc_m6_pff_rv[49:45];
      3'h6:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] | y__h43564;
      3'h7:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 =
	      proc_m6_pff_rv[120:89] & y__h43564;
    endcase
  end
  always@(proc_m6_pff_rv or
	  proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528 or
	  proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534)
  begin
    case (proc_m6_pff_rv[39:37])
      3'h0:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv[120:89] + proc_m6_pff_rv[88:57];
      3'h1:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv[120:89] << proc_m6_pff_rv[61:57];
      3'h2:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528[31] ?
		32'h00000001 :
		32'h0;
      3'h3:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      (proc_m6_pff_rv[120:89] < proc_m6_pff_rv[88:57]) ?
		32'h00000001 :
		32'h0;
      3'h4:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv[120:89] ^ proc_m6_pff_rv[88:57];
      3'h5:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534;
      3'h6:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv[120:89] | proc_m6_pff_rv[88:57];
      3'h7:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 =
	      proc_m6_pff_rv[120:89] & proc_m6_pff_rv[88:57];
    endcase
  end
  always@(proc_m6_pff_rv or
	  proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528 or
	  proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534)
  begin
    case (proc_m6_pff_rv[39:37])
      3'h0:
	  CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15 =
	      proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d528;
      3'h5:
	  CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15 =
	      proc_m6_pff_rv_port0__read__64_BITS_120_TO_89__ETC___d534;
      default: CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15 =
		   32'h0;
    endcase
  end
  always@(proc_m6_pff_rv or
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544 or
	  _0_CONCAT_proc_m6_pff_rv_port0__read__64_BITS_1_ETC___d551 or
	  CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15)
  begin
    case (proc_m6_pff_rv[56:50])
      7'h0:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556 =
	      IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d544;
      7'h01:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556 =
	      (proc_m6_pff_rv[39:37] == 3'h0) ?
		_0_CONCAT_proc_m6_pff_rv_port0__read__64_BITS_1_ETC___d551[31:0] :
		32'h0;
      7'h20:
	  IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556 =
	      CASE_proc_m6_pff_rv_BITS_39_TO_37_0x0_proc_m6__ETC__q15;
      default: IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556 =
		   32'h0;
    endcase
  end
  always@(proc_m6_pff_rv or
	  IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520 or
	  x__h43423 or
	  IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556 or
	  x__h43474)
  begin
    case (proc_m6_pff_rv[31:25])
      7'h13:
	  x_6__h43201 =
	      IF_proc_m6_pff_rv_port0__read__64_BITS_39_TO_3_ETC___d520;
      7'h17: x_6__h43201 = x__h43423 + { proc_m6_pff_rv[56:37], 12'h0 };
      7'h33:
	  x_6__h43201 =
	      IF_proc_m6_pff_rv_port0__read__64_BITS_56_TO_5_ETC___d556;
      7'h37: x_6__h43201 = { proc_m6_pff_rv[56:37], 12'h0 };
      7'h67, 7'h6F: x_6__h43201 = { 20'd0, x__h43474 };
      default: x_6__h43201 = 32'h0;
    endcase
  end
  always@(proc_m3_pff_rv or proc_m5_sbFlags)
  begin
    case (proc_m3_pff_rv[36:32])
      5'd0:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[0];
      5'd1:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[1];
      5'd2:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[2];
      5'd3:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[3];
      5'd4:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[4];
      5'd5:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[5];
      5'd6:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[6];
      5'd7:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[7];
      5'd8:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[8];
      5'd9:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[9];
      5'd10:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[10];
      5'd11:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[11];
      5'd12:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[12];
      5'd13:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[13];
      5'd14:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[14];
      5'd15:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[15];
      5'd16:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[16];
      5'd17:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[17];
      5'd18:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[18];
      5'd19:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[19];
      5'd20:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[20];
      5'd21:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[21];
      5'd22:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[22];
      5'd23:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[23];
      5'd24:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[24];
      5'd25:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[25];
      5'd26:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[26];
      5'd27:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[27];
      5'd28:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[28];
      5'd29:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[29];
      5'd30:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[30];
      5'd31:
	  CASE_proc_m3_pff_rv_BITS_36_TO_32_0_proc_m5_sb_ETC__q16 =
	      proc_m5_sbFlags[31];
    endcase
  end
  always@(x_5__h39990 or proc_m5_sbFlags)
  begin
    case (x_5__h39990)
      5'd0:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[0];
      5'd1:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[1];
      5'd2:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[2];
      5'd3:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[3];
      5'd4:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[4];
      5'd5:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[5];
      5'd6:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[6];
      5'd7:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[7];
      5'd8:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[8];
      5'd9:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[9];
      5'd10:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[10];
      5'd11:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[11];
      5'd12:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[12];
      5'd13:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[13];
      5'd14:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[14];
      5'd15:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[15];
      5'd16:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[16];
      5'd17:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[17];
      5'd18:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[18];
      5'd19:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[19];
      5'd20:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[20];
      5'd21:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[21];
      5'd22:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[22];
      5'd23:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[23];
      5'd24:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[24];
      5'd25:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[25];
      5'd26:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[26];
      5'd27:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[27];
      5'd28:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[28];
      5'd29:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[29];
      5'd30:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[30];
      5'd31:
	  CASE_x_59990_0_proc_m5_sbFlags_BIT_0_1_proc_m5_ETC__q17 =
	      proc_m5_sbFlags[31];
    endcase
  end
  always@(proc_m7_pff_rv$port1__read or proc_m2_btbTags)
  begin
    case (proc_m7_pff_rv$port1__read[16:14])
      3'd0:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[6:0];
      3'd1:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[13:7];
      3'd2:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[20:14];
      3'd3:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[27:21];
      3'd4:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[34:28];
      3'd5:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[41:35];
      3'd6:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[48:42];
      3'd7:
	  CASE_proc_m7_pff_rvport1__read_BITS_16_TO_14__ETC__q18 =
	      proc_m2_btbTags[55:49];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        proc_m10_fEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m10_pc <= `BSV_ASSIGNMENT_DELAY 12'h0;
	proc_m10_pcUpdated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m10_pinit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m10_pinitRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m10_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
	proc_m10_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
	proc_m13_lastPc <= `BSV_ASSIGNMENT_DELAY 12'd0;
	proc_m13_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m13_stalled <= `BSV_ASSIGNMENT_DELAY 160'd0;
	proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m2_btbTags <= `BSV_ASSIGNMENT_DELAY 56'd0;
	proc_m2_btbTargets <= `BSV_ASSIGNMENT_DELAY 80'd0;
	proc_m2_btbValid <= `BSV_ASSIGNMENT_DELAY 8'd0;
	proc_m3_pff_rv <= `BSV_ASSIGNMENT_DELAY 58'h0AAAAAAAAAAAAAA;
	proc_m4_rf <= `BSV_ASSIGNMENT_DELAY 1024'd0;
	proc_m5_sbFlags <= `BSV_ASSIGNMENT_DELAY 32'd0;
	proc_m6_pff_rv <= `BSV_ASSIGNMENT_DELAY
	    161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	proc_m7_pff_rv <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	proc_m8_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pff_rv <= `BSV_ASSIGNMENT_DELAY
	    193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (proc_m10_fEpoch$EN)
	  proc_m10_fEpoch <= `BSV_ASSIGNMENT_DELAY proc_m10_fEpoch$D_IN;
	if (proc_m10_pc$EN)
	  proc_m10_pc <= `BSV_ASSIGNMENT_DELAY proc_m10_pc$D_IN;
	if (proc_m10_pcUpdated$EN)
	  proc_m10_pcUpdated <= `BSV_ASSIGNMENT_DELAY proc_m10_pcUpdated$D_IN;
	if (proc_m10_pinit$EN)
	  proc_m10_pinit <= `BSV_ASSIGNMENT_DELAY proc_m10_pinit$D_IN;
	if (proc_m10_pinitRq$EN)
	  proc_m10_pinitRq <= `BSV_ASSIGNMENT_DELAY proc_m10_pinitRq$D_IN;
	if (proc_m10_pinitRqOfs$EN)
	  proc_m10_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY
	      proc_m10_pinitRqOfs$D_IN;
	if (proc_m10_pinitRsOfs$EN)
	  proc_m10_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY
	      proc_m10_pinitRsOfs$D_IN;
	if (proc_m13_lastPc$EN)
	  proc_m13_lastPc <= `BSV_ASSIGNMENT_DELAY proc_m13_lastPc$D_IN;
	if (proc_m13_stall$EN)
	  proc_m13_stall <= `BSV_ASSIGNMENT_DELAY proc_m13_stall$D_IN;
	if (proc_m13_stalled$EN)
	  proc_m13_stalled <= `BSV_ASSIGNMENT_DELAY proc_m13_stalled$D_IN;
	if (proc_m1_readRq$EN)
	  proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY proc_m1_readRq$D_IN;
	if (proc_m2_btbTags$EN)
	  proc_m2_btbTags <= `BSV_ASSIGNMENT_DELAY proc_m2_btbTags$D_IN;
	if (proc_m2_btbTargets$EN)
	  proc_m2_btbTargets <= `BSV_ASSIGNMENT_DELAY proc_m2_btbTargets$D_IN;
	if (proc_m2_btbValid$EN)
	  proc_m2_btbValid <= `BSV_ASSIGNMENT_DELAY proc_m2_btbValid$D_IN;
	if (proc_m3_pff_rv$EN)
	  proc_m3_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m3_pff_rv$D_IN;
	if (proc_m4_rf$EN)
	  proc_m4_rf <= `BSV_ASSIGNMENT_DELAY proc_m4_rf$D_IN;
	if (proc_m5_sbFlags$EN)
	  proc_m5_sbFlags <= `BSV_ASSIGNMENT_DELAY proc_m5_sbFlags$D_IN;
	if (proc_m6_pff_rv$EN)
	  proc_m6_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m6_pff_rv$D_IN;
	if (proc_m7_pff_rv$EN)
	  proc_m7_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m7_pff_rv$D_IN;
	if (proc_m8_eEpoch$EN)
	  proc_m8_eEpoch <= `BSV_ASSIGNMENT_DELAY proc_m8_eEpoch$D_IN;
	if (proc_m9_pff_rv$EN)
	  proc_m9_pff_rv <= `BSV_ASSIGNMENT_DELAY proc_m9_pff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    proc_m10_fEpoch = 1'h0;
    proc_m10_pc = 12'hAAA;
    proc_m10_pcUpdated = 1'h0;
    proc_m10_pinit = 1'h0;
    proc_m10_pinitRq = 1'h0;
    proc_m10_pinitRqOfs = 10'h2AA;
    proc_m10_pinitRsOfs = 10'h2AA;
    proc_m13_lastPc = 12'hAAA;
    proc_m13_stall = 1'h0;
    proc_m13_stalled = 160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m1_readRq = 1'h0;
    proc_m2_btbTags = 56'hAAAAAAAAAAAAAA;
    proc_m2_btbTargets = 80'hAAAAAAAAAAAAAAAAAAAA;
    proc_m2_btbValid = 8'hAA;
    proc_m3_pff_rv = 58'h2AAAAAAAAAAAAAA;
    proc_m4_rf =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m5_sbFlags = 32'hAAAAAAAA;
    proc_m6_pff_rv = 161'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m7_pff_rv = 25'h0AAAAAA;
    proc_m8_eEpoch = 1'h0;
    proc_m9_pff_rv = 193'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTop

