//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Thu Jun 27 21:33:24 EDT 2019
//
//
// Ports:
// Name                         I/O  size props
// obtain_rq_get                  O    65 reg
// RDY_obtain_rq_get              O     1 reg
// RDY_send_rs_put                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_rs_put                    I    32 reg
// EN_send_rs_put                 I     1
// EN_obtain_rq_get               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop(CLK,
	     RST_N,

	     EN_obtain_rq_get,
	     obtain_rq_get,
	     RDY_obtain_rq_get,

	     send_rs_put,
	     EN_send_rs_put,
	     RDY_send_rs_put);
  input  CLK;
  input  RST_N;

  // actionvalue method obtain_rq_get
  input  EN_obtain_rq_get;
  output [64 : 0] obtain_rq_get;
  output RDY_obtain_rq_get;

  // action method send_rs_put
  input  [31 : 0] send_rs_put;
  input  EN_send_rs_put;
  output RDY_send_rs_put;

  // signals for module outputs
  wire [64 : 0] obtain_rq_get;
  wire RDY_obtain_rq_get, RDY_send_rs_put;

  // register proc_m12_stall
  reg proc_m12_stall;
  wire proc_m12_stall$D_IN, proc_m12_stall$EN;

  // register proc_m12_stalled
  reg [159 : 0] proc_m12_stalled;
  wire [159 : 0] proc_m12_stalled$D_IN;
  wire proc_m12_stalled$EN;

  // register proc_m1_readRq
  reg proc_m1_readRq;
  wire proc_m1_readRq$D_IN, proc_m1_readRq$EN;

  // register proc_m2_elt_f2d
  reg [56 : 0] proc_m2_elt_f2d;
  wire [56 : 0] proc_m2_elt_f2d$D_IN;
  wire proc_m2_elt_f2d$EN;

  // register proc_m2_full_f2d
  reg proc_m2_full_f2d;
  wire proc_m2_full_f2d$D_IN, proc_m2_full_f2d$EN;

  // register proc_m3_rf
  reg [1023 : 0] proc_m3_rf;
  wire [1023 : 0] proc_m3_rf$D_IN;
  wire proc_m3_rf$EN;

  // register proc_m4_sbFlags
  reg [31 : 0] proc_m4_sbFlags;
  reg [31 : 0] proc_m4_sbFlags$D_IN;
  wire proc_m4_sbFlags$EN;

  // register proc_m5_elt_d2e
  reg [159 : 0] proc_m5_elt_d2e;
  reg [159 : 0] proc_m5_elt_d2e$D_IN;
  wire proc_m5_elt_d2e$EN;

  // register proc_m5_full_d2e
  reg proc_m5_full_d2e;
  wire proc_m5_full_d2e$D_IN, proc_m5_full_d2e$EN;

  // register proc_m6_elt_w2d
  reg [11 : 0] proc_m6_elt_w2d;
  wire [11 : 0] proc_m6_elt_w2d$D_IN;
  wire proc_m6_elt_w2d$EN;

  // register proc_m6_full_w2d
  reg proc_m6_full_w2d;
  wire proc_m6_full_w2d$D_IN, proc_m6_full_w2d$EN;

  // register proc_m7_eEpoch
  reg proc_m7_eEpoch;
  wire proc_m7_eEpoch$D_IN, proc_m7_eEpoch$EN;

  // register proc_m8_elt_e2w
  reg [191 : 0] proc_m8_elt_e2w;
  wire [191 : 0] proc_m8_elt_e2w$D_IN;
  wire proc_m8_elt_e2w$EN;

  // register proc_m8_full_e2w
  reg proc_m8_full_e2w;
  wire proc_m8_full_e2w$D_IN, proc_m8_full_e2w$EN;

  // register proc_m9_fEpoch
  reg proc_m9_fEpoch;
  wire proc_m9_fEpoch$D_IN, proc_m9_fEpoch$EN;

  // register proc_m9_fStall
  reg proc_m9_fStall;
  wire proc_m9_fStall$D_IN, proc_m9_fStall$EN;

  // register proc_m9_pc
  reg [11 : 0] proc_m9_pc;
  wire [11 : 0] proc_m9_pc$D_IN;
  wire proc_m9_pc$EN;

  // register proc_m9_pinit
  reg proc_m9_pinit;
  wire proc_m9_pinit$D_IN, proc_m9_pinit$EN;

  // register proc_m9_pinitRq
  reg proc_m9_pinitRq;
  wire proc_m9_pinitRq$D_IN, proc_m9_pinitRq$EN;

  // register proc_m9_pinitRqOfs
  reg [9 : 0] proc_m9_pinitRqOfs;
  wire [9 : 0] proc_m9_pinitRqOfs$D_IN;
  wire proc_m9_pinitRqOfs$EN;

  // register proc_m9_pinitRsOfs
  reg [9 : 0] proc_m9_pinitRsOfs;
  wire [9 : 0] proc_m9_pinitRsOfs$D_IN;
  wire proc_m9_pinitRsOfs$EN;

  // ports of submodule proc_m1_bram
  wire [31 : 0] proc_m1_bram$readRs, proc_m1_bram$write_d;
  wire [9 : 0] proc_m1_bram$readRq_idx, proc_m1_bram$write_idx;
  wire proc_m1_bram$EN_readRq, proc_m1_bram$EN_write;

  // ports of submodule rqs
  reg [64 : 0] rqs$D_IN;
  wire [64 : 0] rqs$D_OUT;
  wire rqs$CLR, rqs$DEQ, rqs$EMPTY_N, rqs$ENQ, rqs$FULL_N;

  // ports of submodule rss
  wire [31 : 0] rss$D_IN, rss$D_OUT;
  wire rss$CLR, rss$DEQ, rss$EMPTY_N, rss$ENQ, rss$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_proc_m12_reqLd,
       CAN_FIRE_RL_proc_m12_reqSt,
       CAN_FIRE_RL_proc_m12_wbNm,
       CAN_FIRE_RL_proc_m12_wbNmZ,
       WILL_FIRE_RL_proc_m10_decodeLd,
       WILL_FIRE_RL_proc_m10_decodeNm,
       WILL_FIRE_RL_proc_m10_decodeSt,
       WILL_FIRE_RL_proc_m11_execBypass,
       WILL_FIRE_RL_proc_m11_execNm,
       WILL_FIRE_RL_proc_m12_repLd,
       WILL_FIRE_RL_proc_m12_repLdZ,
       WILL_FIRE_RL_proc_m12_repSt,
       WILL_FIRE_RL_proc_m12_reqLd,
       WILL_FIRE_RL_proc_m12_reqSt,
       WILL_FIRE_RL_proc_m12_wbNm,
       WILL_FIRE_RL_proc_m12_wbNmZ,
       WILL_FIRE_RL_proc_m12_wrongEpoch,
       WILL_FIRE_RL_proc_m9_instFetchRq,
       WILL_FIRE_RL_proc_m9_instFetchRs,
       WILL_FIRE_RL_proc_m9_modifyPc,
       WILL_FIRE_RL_proc_m9_pgmInitRq,
       WILL_FIRE_RL_proc_m9_pgmInitRqEnd,
       WILL_FIRE_RL_proc_m9_pgmInitRs,
       WILL_FIRE_RL_proc_m9_pgmInitRsEnd;

  // inputs to muxes for submodule ports
  wire [1023 : 0] MUX_proc_m3_rf$write_1__VAL_1,
		  MUX_proc_m3_rf$write_1__VAL_2;
  wire [191 : 0] MUX_proc_m8_elt_e2w$write_1__VAL_1,
		 MUX_proc_m8_elt_e2w$write_1__VAL_2;
  wire [159 : 0] MUX_proc_m5_elt_d2e$write_1__VAL_1,
		 MUX_proc_m5_elt_d2e$write_1__VAL_2,
		 MUX_proc_m5_elt_d2e$write_1__VAL_3;
  wire [64 : 0] MUX_rqs$enq_1__VAL_1,
		MUX_rqs$enq_1__VAL_2,
		MUX_rqs$enq_1__VAL_3;
  wire [31 : 0] MUX_proc_m4_sbFlags$write_1__VAL_1,
		MUX_proc_m4_sbFlags$write_1__VAL_3,
		MUX_proc_m4_sbFlags$write_1__VAL_4,
		MUX_proc_m4_sbFlags$write_1__VAL_5;
  wire MUX_proc_m12_stall$write_1__SEL_2,
       MUX_proc_m2_full_f2d$write_1__SEL_1,
       MUX_proc_m4_sbFlags$write_1__SEL_1,
       MUX_proc_m4_sbFlags$write_1__SEL_3,
       MUX_proc_m5_full_d2e$write_1__SEL_1,
       MUX_proc_m6_elt_w2d$write_1__PSEL_1,
       MUX_proc_m6_elt_w2d$write_1__PSEL_2,
       MUX_proc_m6_elt_w2d$write_1__SEL_1,
       MUX_proc_m7_eEpoch$write_1__SEL_1,
       MUX_proc_m8_full_e2w$write_1__SEL_1,
       MUX_rqs$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7,
	       IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392,
	       IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416,
	       IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428,
	       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143,
	       x_6__h38146,
	       x__h34229,
	       x__h50223,
	       x__h66319,
	       y__h50385,
	       y__h66481;
  reg [11 : 0] IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790,
	       IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900,
	       x_10__h49996,
	       x_13__h66104;
  reg [1 : 0] x_4__h27027;
  reg CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2,
      CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4,
      SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230,
      SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94;
  wire [959 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d662;
  wire [895 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d657;
  wire [831 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d652;
  wire [767 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d647;
  wire [703 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d642;
  wire [639 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d637;
  wire [575 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d632;
  wire [511 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d627;
  wire [447 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d622;
  wire [383 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d617;
  wire [319 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d612;
  wire [255 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d607;
  wire [191 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d602;
  wire [127 : 0] IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d597,
		 _0_CONCAT_proc_m5_elt_d2e_42_BITS_120_TO_89_63__ETC___d423;
  wire [31 : 0] proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400,
		proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406,
		x0223_MINUS_y0385__q5,
		x6319_MINUS_y6481__q6,
		x__h26006,
		x__h28977,
		x__h34125,
		x__h38346,
		y__h38517,
		y__h38641;
  wire [11 : 0] IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d777,
		IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d779,
		IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d887,
		IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d889,
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770,
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769,
		proc_m2_elt_f2d_BITS_56_TO_45__q3,
		proc_m5_elt_d2e_BITS_56_TO_45__q1,
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880,
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879,
		x_5__h26747,
		x__h34175,
		x__h38409,
		y__h50065,
		y__h50509,
		y__h66163,
		y__h66605;
  wire [9 : 0] x__h25971, x__h26230;
  wire [4 : 0] x_5__h34482;
  wire NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796,
       NOT_IF_proc_m8_elt_e2w_41_BITS_63_TO_57_55_EQ__ETC___d906,
       NOT_SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4__ETC___d254,
       NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d104,
       NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d235,
       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d763,
       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d781,
       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d873,
       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d891,
       proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444;

  // actionvalue method obtain_rq_get
  assign obtain_rq_get = rqs$D_OUT ;
  assign RDY_obtain_rq_get = rqs$EMPTY_N ;

  // action method send_rs_put
  assign RDY_send_rs_put = rss$FULL_N ;

  // submodule proc_m1_bram
  mkBramInst proc_m1_bram(.CLK(CLK),
			  .RST_N(RST_N),
			  .readRq_idx(proc_m1_bram$readRq_idx),
			  .write_d(proc_m1_bram$write_d),
			  .write_idx(proc_m1_bram$write_idx),
			  .EN_readRq(proc_m1_bram$EN_readRq),
			  .EN_write(proc_m1_bram$EN_write),
			  .RDY_readRq(),
			  .readRs(proc_m1_bram$readRs),
			  .RDY_readRs(),
			  .RDY_write());

  // submodule rqs
  FIFO2 #(.width(32'd65), .guarded(32'd1)) rqs(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rqs$D_IN),
					       .ENQ(rqs$ENQ),
					       .DEQ(rqs$DEQ),
					       .CLR(rqs$CLR),
					       .D_OUT(rqs$D_OUT),
					       .FULL_N(rqs$FULL_N),
					       .EMPTY_N(rqs$EMPTY_N));

  // submodule rss
  FIFO2 #(.width(32'd32), .guarded(32'd1)) rss(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(rss$D_IN),
					       .ENQ(rss$ENQ),
					       .DEQ(rss$DEQ),
					       .CLR(rss$CLR),
					       .D_OUT(rss$D_OUT),
					       .FULL_N(rss$FULL_N),
					       .EMPTY_N(rss$EMPTY_N));

  // rule RL_proc_m9_pgmInitRq
  assign WILL_FIRE_RL_proc_m9_pgmInitRq =
	     !proc_m9_pinit && !proc_m9_pinitRq && x__h25971 != 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m9_pgmInitRqEnd
  assign WILL_FIRE_RL_proc_m9_pgmInitRqEnd =
	     !proc_m9_pinit && !proc_m9_pinitRq && x__h25971 == 10'h0 &&
	     rqs$FULL_N ;

  // rule RL_proc_m9_pgmInitRs
  assign WILL_FIRE_RL_proc_m9_pgmInitRs =
	     !proc_m9_pinit && x__h26230 != 10'h0 && !proc_m1_readRq &&
	     rss$EMPTY_N ;

  // rule RL_proc_m9_pgmInitRsEnd
  assign WILL_FIRE_RL_proc_m9_pgmInitRsEnd =
	     !proc_m9_pinit && !proc_m1_readRq && x__h26230 == 10'h0 &&
	     rss$EMPTY_N ;

  // rule RL_proc_m9_modifyPc
  assign WILL_FIRE_RL_proc_m9_modifyPc =
	     !proc_m9_fStall && proc_m9_pinit && proc_m6_full_w2d ;

  // rule RL_proc_m9_instFetchRq
  assign WILL_FIRE_RL_proc_m9_instFetchRq =
	     !proc_m1_readRq && !proc_m9_fStall && proc_m9_pinit &&
	     !WILL_FIRE_RL_proc_m9_modifyPc ;

  // rule RL_proc_m9_instFetchRs
  assign WILL_FIRE_RL_proc_m9_instFetchRs =
	     !proc_m2_full_f2d && proc_m9_pinit && proc_m1_readRq &&
	     proc_m9_fStall ;

  // rule RL_proc_m10_decodeLd
  assign WILL_FIRE_RL_proc_m10_decodeLd =
	     !proc_m6_full_w2d &&
	     NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d104 ;

  // rule RL_proc_m10_decodeSt
  assign WILL_FIRE_RL_proc_m10_decodeSt =
	     !proc_m6_full_w2d &&
	     NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d235 ;

  // rule RL_proc_m10_decodeNm
  assign WILL_FIRE_RL_proc_m10_decodeNm =
	     !proc_m6_full_w2d && !proc_m5_full_d2e &&
	     NOT_SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4__ETC___d254 ;

  // rule RL_proc_m11_execNm
  assign WILL_FIRE_RL_proc_m11_execNm =
	     !proc_m8_full_e2w && proc_m5_elt_d2e[159:158] == 2'h3 &&
	     proc_m5_full_d2e ;

  // rule RL_proc_m11_execBypass
  assign WILL_FIRE_RL_proc_m11_execBypass =
	     !proc_m8_full_e2w && proc_m5_elt_d2e[159:158] != 2'h3 &&
	     proc_m5_full_d2e ;

  // rule RL_proc_m12_wrongEpoch
  assign WILL_FIRE_RL_proc_m12_wrongEpoch =
	     !proc_m12_stall &&
	     !proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 &&
	     proc_m8_full_e2w &&
	     !WILL_FIRE_RL_proc_m10_decodeNm &&
	     !WILL_FIRE_RL_proc_m10_decodeLd ;

  // rule RL_proc_m12_reqLd
  assign CAN_FIRE_RL_proc_m12_reqLd =
	     !proc_m12_stall &&
	     proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 &&
	     proc_m8_elt_e2w[191:190] == 2'h0 &&
	     rqs$FULL_N &&
	     proc_m8_full_e2w ;
  assign WILL_FIRE_RL_proc_m12_reqLd =
	     CAN_FIRE_RL_proc_m12_reqLd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRq ;

  // rule RL_proc_m12_reqSt
  assign CAN_FIRE_RL_proc_m12_reqSt =
	     !proc_m12_stall &&
	     proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 &&
	     proc_m8_elt_e2w[191:190] == 2'h1 &&
	     rqs$FULL_N &&
	     proc_m8_full_e2w ;
  assign WILL_FIRE_RL_proc_m12_reqSt =
	     CAN_FIRE_RL_proc_m12_reqSt &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRqEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRq ;

  // rule RL_proc_m12_repLd
  assign WILL_FIRE_RL_proc_m12_repLd =
	     proc_m12_stalled[157:153] != 5'h0 &&
	     proc_m12_stalled[159:158] == 2'h0 &&
	     rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_full_w2d &&
	     !WILL_FIRE_RL_proc_m10_decodeNm &&
	     !WILL_FIRE_RL_proc_m10_decodeLd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m12_repLdZ
  assign WILL_FIRE_RL_proc_m12_repLdZ =
	     proc_m12_stalled[159:158] == 2'h0 &&
	     proc_m12_stalled[157:153] == 5'h0 &&
	     rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_full_w2d &&
	     !WILL_FIRE_RL_proc_m10_decodeNm &&
	     !WILL_FIRE_RL_proc_m10_decodeLd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m12_repSt
  assign WILL_FIRE_RL_proc_m12_repSt =
	     proc_m12_stalled[159:158] == 2'h1 && rss$EMPTY_N &&
	     proc_m12_stall &&
	     !proc_m6_full_w2d &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRsEnd &&
	     !WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // rule RL_proc_m12_wbNm
  assign CAN_FIRE_RL_proc_m12_wbNm =
	     !proc_m12_stall && proc_m8_elt_e2w[189:185] != 5'd0 &&
	     proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 &&
	     proc_m8_elt_e2w[191:190] == 2'h3 &&
	     proc_m8_full_e2w &&
	     !proc_m6_full_w2d ;
  assign WILL_FIRE_RL_proc_m12_wbNm =
	     CAN_FIRE_RL_proc_m12_wbNm && !WILL_FIRE_RL_proc_m10_decodeNm &&
	     !WILL_FIRE_RL_proc_m10_decodeLd ;

  // rule RL_proc_m12_wbNmZ
  assign CAN_FIRE_RL_proc_m12_wbNmZ =
	     !proc_m12_stall &&
	     proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 &&
	     proc_m8_elt_e2w[191:190] == 2'h3 &&
	     proc_m8_elt_e2w[189:185] == 5'd0 &&
	     proc_m8_full_e2w &&
	     !proc_m6_full_w2d ;
  assign WILL_FIRE_RL_proc_m12_wbNmZ =
	     CAN_FIRE_RL_proc_m12_wbNmZ && !WILL_FIRE_RL_proc_m10_decodeNm &&
	     !WILL_FIRE_RL_proc_m10_decodeLd ;

  // inputs to muxes for submodule ports
  assign MUX_proc_m12_stall$write_1__SEL_2 =
	     WILL_FIRE_RL_proc_m12_reqSt || WILL_FIRE_RL_proc_m12_reqLd ;
  assign MUX_proc_m2_full_f2d$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m10_decodeNm ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m9_modifyPc ;
  assign MUX_proc_m4_sbFlags$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m12_wrongEpoch &&
	     (proc_m8_elt_e2w[191:190] == 2'h0 ||
	      proc_m8_elt_e2w[191:190] == 2'h3) ;
  assign MUX_proc_m4_sbFlags$write_1__SEL_3 =
	     WILL_FIRE_RL_proc_m12_repLdZ || WILL_FIRE_RL_proc_m12_repLd ;
  assign MUX_proc_m5_full_d2e$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m11_execBypass ||
	     WILL_FIRE_RL_proc_m11_execNm ;
  assign MUX_proc_m6_elt_w2d$write_1__PSEL_1 =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ;
  assign MUX_proc_m6_elt_w2d$write_1__SEL_1 =
	     MUX_proc_m6_elt_w2d$write_1__PSEL_1 &&
	     NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 ;
  assign MUX_proc_m6_elt_w2d$write_1__PSEL_2 =
	     WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm ;
  assign MUX_proc_m7_eEpoch$write_1__SEL_1 =
	     MUX_proc_m6_elt_w2d$write_1__PSEL_1 &&
	     NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 ;
  assign MUX_proc_m8_full_e2w$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm ||
	     WILL_FIRE_RL_proc_m12_reqSt ||
	     WILL_FIRE_RL_proc_m12_reqLd ||
	     WILL_FIRE_RL_proc_m12_wrongEpoch ;
  assign MUX_rqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_proc_m9_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRq ;
  assign MUX_proc_m3_rf$write_1__VAL_1 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d662,
	       (proc_m12_stalled[157:153] == 5'd1) ?
		 rss$D_OUT :
		 proc_m3_rf[63:32],
	       proc_m3_rf[31:0] } ;
  assign MUX_proc_m3_rf$write_1__VAL_2 =
	     { (proc_m8_elt_e2w[189:185] == 5'd31) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[1023:992],
	       (proc_m8_elt_e2w[189:185] == 5'd30) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[991:960],
	       (proc_m8_elt_e2w[189:185] == 5'd29) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[959:928],
	       (proc_m8_elt_e2w[189:185] == 5'd28) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[927:896],
	       (proc_m8_elt_e2w[189:185] == 5'd27) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[895:864],
	       (proc_m8_elt_e2w[189:185] == 5'd26) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[863:832],
	       (proc_m8_elt_e2w[189:185] == 5'd25) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[831:800],
	       (proc_m8_elt_e2w[189:185] == 5'd24) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[799:768],
	       (proc_m8_elt_e2w[189:185] == 5'd23) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[767:736],
	       (proc_m8_elt_e2w[189:185] == 5'd22) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[735:704],
	       (proc_m8_elt_e2w[189:185] == 5'd21) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[703:672],
	       (proc_m8_elt_e2w[189:185] == 5'd20) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[671:640],
	       (proc_m8_elt_e2w[189:185] == 5'd19) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[639:608],
	       (proc_m8_elt_e2w[189:185] == 5'd18) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[607:576],
	       (proc_m8_elt_e2w[189:185] == 5'd17) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[575:544],
	       (proc_m8_elt_e2w[189:185] == 5'd16) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[543:512],
	       (proc_m8_elt_e2w[189:185] == 5'd15) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[511:480],
	       (proc_m8_elt_e2w[189:185] == 5'd14) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[479:448],
	       (proc_m8_elt_e2w[189:185] == 5'd13) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[447:416],
	       (proc_m8_elt_e2w[189:185] == 5'd12) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[415:384],
	       (proc_m8_elt_e2w[189:185] == 5'd11) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[383:352],
	       (proc_m8_elt_e2w[189:185] == 5'd10) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[351:320],
	       (proc_m8_elt_e2w[189:185] == 5'd9) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[319:288],
	       (proc_m8_elt_e2w[189:185] == 5'd8) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[287:256],
	       (proc_m8_elt_e2w[189:185] == 5'd7) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[255:224],
	       (proc_m8_elt_e2w[189:185] == 5'd6) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[223:192],
	       (proc_m8_elt_e2w[189:185] == 5'd5) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[191:160],
	       (proc_m8_elt_e2w[189:185] == 5'd4) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[159:128],
	       (proc_m8_elt_e2w[189:185] == 5'd3) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[127:96],
	       (proc_m8_elt_e2w[189:185] == 5'd2) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[95:64],
	       (proc_m8_elt_e2w[189:185] == 5'd1) ?
		 proc_m8_elt_e2w[31:0] :
		 proc_m3_rf[63:32],
	       proc_m3_rf[31:0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_1 =
	     { proc_m8_elt_e2w[189:185] != 5'd31 && proc_m4_sbFlags[31],
	       proc_m8_elt_e2w[189:185] != 5'd30 && proc_m4_sbFlags[30],
	       proc_m8_elt_e2w[189:185] != 5'd29 && proc_m4_sbFlags[29],
	       proc_m8_elt_e2w[189:185] != 5'd28 && proc_m4_sbFlags[28],
	       proc_m8_elt_e2w[189:185] != 5'd27 && proc_m4_sbFlags[27],
	       proc_m8_elt_e2w[189:185] != 5'd26 && proc_m4_sbFlags[26],
	       proc_m8_elt_e2w[189:185] != 5'd25 && proc_m4_sbFlags[25],
	       proc_m8_elt_e2w[189:185] != 5'd24 && proc_m4_sbFlags[24],
	       proc_m8_elt_e2w[189:185] != 5'd23 && proc_m4_sbFlags[23],
	       proc_m8_elt_e2w[189:185] != 5'd22 && proc_m4_sbFlags[22],
	       proc_m8_elt_e2w[189:185] != 5'd21 && proc_m4_sbFlags[21],
	       proc_m8_elt_e2w[189:185] != 5'd20 && proc_m4_sbFlags[20],
	       proc_m8_elt_e2w[189:185] != 5'd19 && proc_m4_sbFlags[19],
	       proc_m8_elt_e2w[189:185] != 5'd18 && proc_m4_sbFlags[18],
	       proc_m8_elt_e2w[189:185] != 5'd17 && proc_m4_sbFlags[17],
	       proc_m8_elt_e2w[189:185] != 5'd16 && proc_m4_sbFlags[16],
	       proc_m8_elt_e2w[189:185] != 5'd15 && proc_m4_sbFlags[15],
	       proc_m8_elt_e2w[189:185] != 5'd14 && proc_m4_sbFlags[14],
	       proc_m8_elt_e2w[189:185] != 5'd13 && proc_m4_sbFlags[13],
	       proc_m8_elt_e2w[189:185] != 5'd12 && proc_m4_sbFlags[12],
	       proc_m8_elt_e2w[189:185] != 5'd11 && proc_m4_sbFlags[11],
	       proc_m8_elt_e2w[189:185] != 5'd10 && proc_m4_sbFlags[10],
	       proc_m8_elt_e2w[189:185] != 5'd9 && proc_m4_sbFlags[9],
	       proc_m8_elt_e2w[189:185] != 5'd8 && proc_m4_sbFlags[8],
	       proc_m8_elt_e2w[189:185] != 5'd7 && proc_m4_sbFlags[7],
	       proc_m8_elt_e2w[189:185] != 5'd6 && proc_m4_sbFlags[6],
	       proc_m8_elt_e2w[189:185] != 5'd5 && proc_m4_sbFlags[5],
	       proc_m8_elt_e2w[189:185] != 5'd4 && proc_m4_sbFlags[4],
	       proc_m8_elt_e2w[189:185] != 5'd3 && proc_m4_sbFlags[3],
	       proc_m8_elt_e2w[189:185] != 5'd2 && proc_m4_sbFlags[2],
	       proc_m8_elt_e2w[189:185] != 5'd1 && proc_m4_sbFlags[1],
	       proc_m8_elt_e2w[189:185] != 5'd0 && proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_3 =
	     { proc_m12_stalled[157:153] != 5'd31 && proc_m4_sbFlags[31],
	       proc_m12_stalled[157:153] != 5'd30 && proc_m4_sbFlags[30],
	       proc_m12_stalled[157:153] != 5'd29 && proc_m4_sbFlags[29],
	       proc_m12_stalled[157:153] != 5'd28 && proc_m4_sbFlags[28],
	       proc_m12_stalled[157:153] != 5'd27 && proc_m4_sbFlags[27],
	       proc_m12_stalled[157:153] != 5'd26 && proc_m4_sbFlags[26],
	       proc_m12_stalled[157:153] != 5'd25 && proc_m4_sbFlags[25],
	       proc_m12_stalled[157:153] != 5'd24 && proc_m4_sbFlags[24],
	       proc_m12_stalled[157:153] != 5'd23 && proc_m4_sbFlags[23],
	       proc_m12_stalled[157:153] != 5'd22 && proc_m4_sbFlags[22],
	       proc_m12_stalled[157:153] != 5'd21 && proc_m4_sbFlags[21],
	       proc_m12_stalled[157:153] != 5'd20 && proc_m4_sbFlags[20],
	       proc_m12_stalled[157:153] != 5'd19 && proc_m4_sbFlags[19],
	       proc_m12_stalled[157:153] != 5'd18 && proc_m4_sbFlags[18],
	       proc_m12_stalled[157:153] != 5'd17 && proc_m4_sbFlags[17],
	       proc_m12_stalled[157:153] != 5'd16 && proc_m4_sbFlags[16],
	       proc_m12_stalled[157:153] != 5'd15 && proc_m4_sbFlags[15],
	       proc_m12_stalled[157:153] != 5'd14 && proc_m4_sbFlags[14],
	       proc_m12_stalled[157:153] != 5'd13 && proc_m4_sbFlags[13],
	       proc_m12_stalled[157:153] != 5'd12 && proc_m4_sbFlags[12],
	       proc_m12_stalled[157:153] != 5'd11 && proc_m4_sbFlags[11],
	       proc_m12_stalled[157:153] != 5'd10 && proc_m4_sbFlags[10],
	       proc_m12_stalled[157:153] != 5'd9 && proc_m4_sbFlags[9],
	       proc_m12_stalled[157:153] != 5'd8 && proc_m4_sbFlags[8],
	       proc_m12_stalled[157:153] != 5'd7 && proc_m4_sbFlags[7],
	       proc_m12_stalled[157:153] != 5'd6 && proc_m4_sbFlags[6],
	       proc_m12_stalled[157:153] != 5'd5 && proc_m4_sbFlags[5],
	       proc_m12_stalled[157:153] != 5'd4 && proc_m4_sbFlags[4],
	       proc_m12_stalled[157:153] != 5'd3 && proc_m4_sbFlags[3],
	       proc_m12_stalled[157:153] != 5'd2 && proc_m4_sbFlags[2],
	       proc_m12_stalled[157:153] != 5'd1 && proc_m4_sbFlags[1],
	       proc_m12_stalled[157:153] != 5'h0 && proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_4 =
	     { proc_m2_elt_f2d[36:32] == 5'd31 || proc_m4_sbFlags[31],
	       proc_m2_elt_f2d[36:32] == 5'd30 || proc_m4_sbFlags[30],
	       proc_m2_elt_f2d[36:32] == 5'd29 || proc_m4_sbFlags[29],
	       proc_m2_elt_f2d[36:32] == 5'd28 || proc_m4_sbFlags[28],
	       proc_m2_elt_f2d[36:32] == 5'd27 || proc_m4_sbFlags[27],
	       proc_m2_elt_f2d[36:32] == 5'd26 || proc_m4_sbFlags[26],
	       proc_m2_elt_f2d[36:32] == 5'd25 || proc_m4_sbFlags[25],
	       proc_m2_elt_f2d[36:32] == 5'd24 || proc_m4_sbFlags[24],
	       proc_m2_elt_f2d[36:32] == 5'd23 || proc_m4_sbFlags[23],
	       proc_m2_elt_f2d[36:32] == 5'd22 || proc_m4_sbFlags[22],
	       proc_m2_elt_f2d[36:32] == 5'd21 || proc_m4_sbFlags[21],
	       proc_m2_elt_f2d[36:32] == 5'd20 || proc_m4_sbFlags[20],
	       proc_m2_elt_f2d[36:32] == 5'd19 || proc_m4_sbFlags[19],
	       proc_m2_elt_f2d[36:32] == 5'd18 || proc_m4_sbFlags[18],
	       proc_m2_elt_f2d[36:32] == 5'd17 || proc_m4_sbFlags[17],
	       proc_m2_elt_f2d[36:32] == 5'd16 || proc_m4_sbFlags[16],
	       proc_m2_elt_f2d[36:32] == 5'd15 || proc_m4_sbFlags[15],
	       proc_m2_elt_f2d[36:32] == 5'd14 || proc_m4_sbFlags[14],
	       proc_m2_elt_f2d[36:32] == 5'd13 || proc_m4_sbFlags[13],
	       proc_m2_elt_f2d[36:32] == 5'd12 || proc_m4_sbFlags[12],
	       proc_m2_elt_f2d[36:32] == 5'd11 || proc_m4_sbFlags[11],
	       proc_m2_elt_f2d[36:32] == 5'd10 || proc_m4_sbFlags[10],
	       proc_m2_elt_f2d[36:32] == 5'd9 || proc_m4_sbFlags[9],
	       proc_m2_elt_f2d[36:32] == 5'd8 || proc_m4_sbFlags[8],
	       proc_m2_elt_f2d[36:32] == 5'd7 || proc_m4_sbFlags[7],
	       proc_m2_elt_f2d[36:32] == 5'd6 || proc_m4_sbFlags[6],
	       proc_m2_elt_f2d[36:32] == 5'd5 || proc_m4_sbFlags[5],
	       proc_m2_elt_f2d[36:32] == 5'd4 || proc_m4_sbFlags[4],
	       proc_m2_elt_f2d[36:32] == 5'd3 || proc_m4_sbFlags[3],
	       proc_m2_elt_f2d[36:32] == 5'd2 || proc_m4_sbFlags[2],
	       proc_m2_elt_f2d[36:32] == 5'd1 || proc_m4_sbFlags[1],
	       proc_m2_elt_f2d[36:32] == 5'd0 || proc_m4_sbFlags[0] } ;
  assign MUX_proc_m4_sbFlags$write_1__VAL_5 =
	     { x_5__h34482 == 5'd31 || proc_m4_sbFlags[31],
	       x_5__h34482 == 5'd30 || proc_m4_sbFlags[30],
	       x_5__h34482 == 5'd29 || proc_m4_sbFlags[29],
	       x_5__h34482 == 5'd28 || proc_m4_sbFlags[28],
	       x_5__h34482 == 5'd27 || proc_m4_sbFlags[27],
	       x_5__h34482 == 5'd26 || proc_m4_sbFlags[26],
	       x_5__h34482 == 5'd25 || proc_m4_sbFlags[25],
	       x_5__h34482 == 5'd24 || proc_m4_sbFlags[24],
	       x_5__h34482 == 5'd23 || proc_m4_sbFlags[23],
	       x_5__h34482 == 5'd22 || proc_m4_sbFlags[22],
	       x_5__h34482 == 5'd21 || proc_m4_sbFlags[21],
	       x_5__h34482 == 5'd20 || proc_m4_sbFlags[20],
	       x_5__h34482 == 5'd19 || proc_m4_sbFlags[19],
	       x_5__h34482 == 5'd18 || proc_m4_sbFlags[18],
	       x_5__h34482 == 5'd17 || proc_m4_sbFlags[17],
	       x_5__h34482 == 5'd16 || proc_m4_sbFlags[16],
	       x_5__h34482 == 5'd15 || proc_m4_sbFlags[15],
	       x_5__h34482 == 5'd14 || proc_m4_sbFlags[14],
	       x_5__h34482 == 5'd13 || proc_m4_sbFlags[13],
	       x_5__h34482 == 5'd12 || proc_m4_sbFlags[12],
	       x_5__h34482 == 5'd11 || proc_m4_sbFlags[11],
	       x_5__h34482 == 5'd10 || proc_m4_sbFlags[10],
	       x_5__h34482 == 5'd9 || proc_m4_sbFlags[9],
	       x_5__h34482 == 5'd8 || proc_m4_sbFlags[8],
	       x_5__h34482 == 5'd7 || proc_m4_sbFlags[7],
	       x_5__h34482 == 5'd6 || proc_m4_sbFlags[6],
	       x_5__h34482 == 5'd5 || proc_m4_sbFlags[5],
	       x_5__h34482 == 5'd4 || proc_m4_sbFlags[4],
	       x_5__h34482 == 5'd3 || proc_m4_sbFlags[3],
	       x_5__h34482 == 5'd2 || proc_m4_sbFlags[2],
	       x_5__h34482 == 5'd1 || proc_m4_sbFlags[1],
	       x_5__h34482 == 5'd0 || proc_m4_sbFlags[0] } ;
  assign MUX_proc_m5_elt_d2e$write_1__VAL_1 =
	     { x_4__h27027,
	       proc_m2_elt_f2d[36:32],
	       x__h28977,
	       64'd0,
	       proc_m2_elt_f2d } ;
  assign MUX_proc_m5_elt_d2e$write_1__VAL_2 =
	     { x_4__h27027,
	       5'h0,
	       x__h34125,
	       x__h34229,
	       32'h0,
	       proc_m2_elt_f2d } ;
  assign MUX_proc_m5_elt_d2e$write_1__VAL_3 =
	     { x_4__h27027,
	       x_5__h34482,
	       32'h0,
	       SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143,
	       x__h34229,
	       proc_m2_elt_f2d } ;
  assign MUX_proc_m8_elt_e2w$write_1__VAL_1 =
	     { proc_m5_elt_d2e, x_6__h38146 } ;
  assign MUX_proc_m8_elt_e2w$write_1__VAL_2 = { proc_m5_elt_d2e, 32'h0 } ;
  assign MUX_rqs$enq_1__VAL_1 = { x__h26006, 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_2 = { proc_m8_elt_e2w[184:153], 33'd0 } ;
  assign MUX_rqs$enq_1__VAL_3 =
	     { proc_m8_elt_e2w[184:153], 1'd1, proc_m8_elt_e2w[152:121] } ;

  // register proc_m12_stall
  assign proc_m12_stall$D_IN = !MUX_proc_m6_elt_w2d$write_1__PSEL_1 ;
  assign proc_m12_stall$EN =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m12_reqSt ||
	     WILL_FIRE_RL_proc_m12_reqLd ;

  // register proc_m12_stalled
  assign proc_m12_stalled$D_IN = proc_m8_elt_e2w[191:32] ;
  assign proc_m12_stalled$EN = MUX_proc_m12_stall$write_1__SEL_2 ;

  // register proc_m1_readRq
  assign proc_m1_readRq$D_IN = !WILL_FIRE_RL_proc_m9_instFetchRs ;
  assign proc_m1_readRq$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRs ||
	     WILL_FIRE_RL_proc_m9_instFetchRq ;

  // register proc_m2_elt_f2d
  assign proc_m2_elt_f2d$D_IN =
	     { proc_m1_bram$readRs,
	       proc_m9_pc,
	       x_5__h26747,
	       proc_m9_fEpoch } ;
  assign proc_m2_elt_f2d$EN = WILL_FIRE_RL_proc_m9_instFetchRs ;

  // register proc_m2_full_f2d
  assign proc_m2_full_f2d$D_IN = !MUX_proc_m2_full_f2d$write_1__SEL_1 ;
  assign proc_m2_full_f2d$EN =
	     WILL_FIRE_RL_proc_m10_decodeNm ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m9_modifyPc ||
	     WILL_FIRE_RL_proc_m9_instFetchRs ;

  // register proc_m3_rf
  assign proc_m3_rf$D_IN =
	     WILL_FIRE_RL_proc_m12_repLd ?
	       MUX_proc_m3_rf$write_1__VAL_1 :
	       MUX_proc_m3_rf$write_1__VAL_2 ;
  assign proc_m3_rf$EN =
	     WILL_FIRE_RL_proc_m12_repLd || WILL_FIRE_RL_proc_m12_wbNm ;

  // register proc_m4_sbFlags
  always@(MUX_proc_m4_sbFlags$write_1__SEL_1 or
	  MUX_proc_m4_sbFlags$write_1__VAL_1 or
	  MUX_proc_m6_elt_w2d$write_1__PSEL_2 or
	  MUX_proc_m4_sbFlags$write_1__SEL_3 or
	  MUX_proc_m4_sbFlags$write_1__VAL_3 or
	  WILL_FIRE_RL_proc_m10_decodeLd or
	  MUX_proc_m4_sbFlags$write_1__VAL_4 or
	  WILL_FIRE_RL_proc_m10_decodeNm or
	  MUX_proc_m4_sbFlags$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_proc_m4_sbFlags$write_1__SEL_1:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_1;
      MUX_proc_m6_elt_w2d$write_1__PSEL_2:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_1;
      MUX_proc_m4_sbFlags$write_1__SEL_3:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_3;
      WILL_FIRE_RL_proc_m10_decodeLd:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_4;
      WILL_FIRE_RL_proc_m10_decodeNm:
	  proc_m4_sbFlags$D_IN = MUX_proc_m4_sbFlags$write_1__VAL_5;
      default: proc_m4_sbFlags$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m4_sbFlags$EN =
	     WILL_FIRE_RL_proc_m12_wrongEpoch &&
	     (proc_m8_elt_e2w[191:190] == 2'h0 ||
	      proc_m8_elt_e2w[191:190] == 2'h3) ||
	     WILL_FIRE_RL_proc_m12_wbNmZ ||
	     WILL_FIRE_RL_proc_m12_wbNm ||
	     WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m10_decodeNm ;

  // register proc_m5_elt_d2e
  always@(WILL_FIRE_RL_proc_m10_decodeLd or
	  MUX_proc_m5_elt_d2e$write_1__VAL_1 or
	  WILL_FIRE_RL_proc_m10_decodeSt or
	  MUX_proc_m5_elt_d2e$write_1__VAL_2 or
	  WILL_FIRE_RL_proc_m10_decodeNm or
	  MUX_proc_m5_elt_d2e$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_proc_m10_decodeLd:
	  proc_m5_elt_d2e$D_IN = MUX_proc_m5_elt_d2e$write_1__VAL_1;
      WILL_FIRE_RL_proc_m10_decodeSt:
	  proc_m5_elt_d2e$D_IN = MUX_proc_m5_elt_d2e$write_1__VAL_2;
      WILL_FIRE_RL_proc_m10_decodeNm:
	  proc_m5_elt_d2e$D_IN = MUX_proc_m5_elt_d2e$write_1__VAL_3;
      default: proc_m5_elt_d2e$D_IN =
		   160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign proc_m5_elt_d2e$EN =
	     WILL_FIRE_RL_proc_m10_decodeLd ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeNm ;

  // register proc_m5_full_d2e
  assign proc_m5_full_d2e$D_IN = !MUX_proc_m5_full_d2e$write_1__SEL_1 ;
  assign proc_m5_full_d2e$EN =
	     WILL_FIRE_RL_proc_m11_execBypass ||
	     WILL_FIRE_RL_proc_m11_execNm ||
	     WILL_FIRE_RL_proc_m10_decodeNm ||
	     WILL_FIRE_RL_proc_m10_decodeSt ||
	     WILL_FIRE_RL_proc_m10_decodeLd ;

  // register proc_m6_elt_w2d
  assign proc_m6_elt_w2d$D_IN =
	     MUX_proc_m6_elt_w2d$write_1__SEL_1 ?
	       x_10__h49996 :
	       x_13__h66104 ;
  assign proc_m6_elt_w2d$EN =
	     (WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	      WILL_FIRE_RL_proc_m12_repLd) &&
	     NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 ||
	     (WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm) &&
	     NOT_IF_proc_m8_elt_e2w_41_BITS_63_TO_57_55_EQ__ETC___d906 ;

  // register proc_m6_full_w2d
  assign proc_m6_full_w2d$D_IN = !WILL_FIRE_RL_proc_m9_modifyPc ;
  assign proc_m6_full_w2d$EN =
	     (WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	      WILL_FIRE_RL_proc_m12_repLd) &&
	     NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 ||
	     (WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm) &&
	     NOT_IF_proc_m8_elt_e2w_41_BITS_63_TO_57_55_EQ__ETC___d906 ||
	     WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m7_eEpoch
  assign proc_m7_eEpoch$D_IN =
	     MUX_proc_m7_eEpoch$write_1__SEL_1 ?
	       !proc_m7_eEpoch :
	       !proc_m7_eEpoch ;
  assign proc_m7_eEpoch$EN =
	     (WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	      WILL_FIRE_RL_proc_m12_repLd) &&
	     NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 ||
	     (WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm) &&
	     NOT_IF_proc_m8_elt_e2w_41_BITS_63_TO_57_55_EQ__ETC___d906 ;

  // register proc_m8_elt_e2w
  assign proc_m8_elt_e2w$D_IN =
	     WILL_FIRE_RL_proc_m11_execNm ?
	       MUX_proc_m8_elt_e2w$write_1__VAL_1 :
	       MUX_proc_m8_elt_e2w$write_1__VAL_2 ;
  assign proc_m8_elt_e2w$EN =
	     WILL_FIRE_RL_proc_m11_execNm ||
	     WILL_FIRE_RL_proc_m11_execBypass ;

  // register proc_m8_full_e2w
  assign proc_m8_full_e2w$D_IN = !MUX_proc_m8_full_e2w$write_1__SEL_1 ;
  assign proc_m8_full_e2w$EN =
	     WILL_FIRE_RL_proc_m12_wbNmZ || WILL_FIRE_RL_proc_m12_wbNm ||
	     WILL_FIRE_RL_proc_m12_reqSt ||
	     WILL_FIRE_RL_proc_m12_reqLd ||
	     WILL_FIRE_RL_proc_m12_wrongEpoch ||
	     WILL_FIRE_RL_proc_m11_execBypass ||
	     WILL_FIRE_RL_proc_m11_execNm ;

  // register proc_m9_fEpoch
  assign proc_m9_fEpoch$D_IN = !proc_m9_fEpoch ;
  assign proc_m9_fEpoch$EN = WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m9_fStall
  assign proc_m9_fStall$D_IN = !WILL_FIRE_RL_proc_m9_instFetchRs ;
  assign proc_m9_fStall$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRs ||
	     WILL_FIRE_RL_proc_m9_instFetchRq ;

  // register proc_m9_pc
  assign proc_m9_pc$D_IN =
	     WILL_FIRE_RL_proc_m9_instFetchRs ?
	       x_5__h26747 :
	       proc_m6_elt_w2d ;
  assign proc_m9_pc$EN =
	     WILL_FIRE_RL_proc_m9_instFetchRs ||
	     WILL_FIRE_RL_proc_m9_modifyPc ;

  // register proc_m9_pinit
  assign proc_m9_pinit$D_IN = 1'd1 ;
  assign proc_m9_pinit$EN = WILL_FIRE_RL_proc_m9_pgmInitRsEnd ;

  // register proc_m9_pinitRq
  assign proc_m9_pinitRq$D_IN = 1'd1 ;
  assign proc_m9_pinitRq$EN = WILL_FIRE_RL_proc_m9_pgmInitRqEnd ;

  // register proc_m9_pinitRqOfs
  assign proc_m9_pinitRqOfs$D_IN = proc_m9_pinitRqOfs + 10'h001 ;
  assign proc_m9_pinitRqOfs$EN = WILL_FIRE_RL_proc_m9_pgmInitRq ;

  // register proc_m9_pinitRsOfs
  assign proc_m9_pinitRsOfs$D_IN = proc_m9_pinitRsOfs + 10'h001 ;
  assign proc_m9_pinitRsOfs$EN = WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // submodule proc_m1_bram
  assign proc_m1_bram$readRq_idx = proc_m9_pc[11:2] ;
  assign proc_m1_bram$write_d = rss$D_OUT ;
  assign proc_m1_bram$write_idx = proc_m9_pinitRsOfs ;
  assign proc_m1_bram$EN_readRq = WILL_FIRE_RL_proc_m9_instFetchRq ;
  assign proc_m1_bram$EN_write =
	     WILL_FIRE_RL_proc_m9_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRs ;

  // submodule rqs
  always@(MUX_rqs$enq_1__SEL_1 or
	  MUX_rqs$enq_1__VAL_1 or
	  WILL_FIRE_RL_proc_m12_reqLd or
	  MUX_rqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_proc_m12_reqSt or MUX_rqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rqs$enq_1__SEL_1: rqs$D_IN = MUX_rqs$enq_1__VAL_1;
      WILL_FIRE_RL_proc_m12_reqLd: rqs$D_IN = MUX_rqs$enq_1__VAL_2;
      WILL_FIRE_RL_proc_m12_reqSt: rqs$D_IN = MUX_rqs$enq_1__VAL_3;
      default: rqs$D_IN = 65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rqs$ENQ =
	     WILL_FIRE_RL_proc_m9_pgmInitRqEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRq ||
	     WILL_FIRE_RL_proc_m12_reqLd ||
	     WILL_FIRE_RL_proc_m12_reqSt ;
  assign rqs$DEQ = EN_obtain_rq_get ;
  assign rqs$CLR = 1'b0 ;

  // submodule rss
  assign rss$D_IN = send_rs_put ;
  assign rss$ENQ = EN_send_rs_put ;
  assign rss$DEQ =
	     WILL_FIRE_RL_proc_m12_repSt || WILL_FIRE_RL_proc_m12_repLdZ ||
	     WILL_FIRE_RL_proc_m12_repLd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRsEnd ||
	     WILL_FIRE_RL_proc_m9_pgmInitRs ;
  assign rss$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d777 =
	     x0223_MINUS_y0385__q5[31] ?
	       proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 :
	       proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 ;
  assign IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d779 =
	     x0223_MINUS_y0385__q5[31] ?
	       proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 :
	       proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 ;
  assign IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d887 =
	     x6319_MINUS_y6481__q6[31] ?
	       proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 :
	       proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 ;
  assign IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d889 =
	     x6319_MINUS_y6481__q6[31] ?
	       proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 :
	       proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d597 =
	     { (proc_m12_stalled[157:153] == 5'd31) ?
		 rss$D_OUT :
		 proc_m3_rf[1023:992],
	       (proc_m12_stalled[157:153] == 5'd30) ?
		 rss$D_OUT :
		 proc_m3_rf[991:960],
	       (proc_m12_stalled[157:153] == 5'd29) ?
		 rss$D_OUT :
		 proc_m3_rf[959:928],
	       (proc_m12_stalled[157:153] == 5'd28) ?
		 rss$D_OUT :
		 proc_m3_rf[927:896] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d602 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d597,
	       (proc_m12_stalled[157:153] == 5'd27) ?
		 rss$D_OUT :
		 proc_m3_rf[895:864],
	       (proc_m12_stalled[157:153] == 5'd26) ?
		 rss$D_OUT :
		 proc_m3_rf[863:832] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d607 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d602,
	       (proc_m12_stalled[157:153] == 5'd25) ?
		 rss$D_OUT :
		 proc_m3_rf[831:800],
	       (proc_m12_stalled[157:153] == 5'd24) ?
		 rss$D_OUT :
		 proc_m3_rf[799:768] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d612 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d607,
	       (proc_m12_stalled[157:153] == 5'd23) ?
		 rss$D_OUT :
		 proc_m3_rf[767:736],
	       (proc_m12_stalled[157:153] == 5'd22) ?
		 rss$D_OUT :
		 proc_m3_rf[735:704] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d617 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d612,
	       (proc_m12_stalled[157:153] == 5'd21) ?
		 rss$D_OUT :
		 proc_m3_rf[703:672],
	       (proc_m12_stalled[157:153] == 5'd20) ?
		 rss$D_OUT :
		 proc_m3_rf[671:640] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d622 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d617,
	       (proc_m12_stalled[157:153] == 5'd19) ?
		 rss$D_OUT :
		 proc_m3_rf[639:608],
	       (proc_m12_stalled[157:153] == 5'd18) ?
		 rss$D_OUT :
		 proc_m3_rf[607:576] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d627 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d622,
	       (proc_m12_stalled[157:153] == 5'd17) ?
		 rss$D_OUT :
		 proc_m3_rf[575:544],
	       (proc_m12_stalled[157:153] == 5'd16) ?
		 rss$D_OUT :
		 proc_m3_rf[543:512] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d632 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d627,
	       (proc_m12_stalled[157:153] == 5'd15) ?
		 rss$D_OUT :
		 proc_m3_rf[511:480],
	       (proc_m12_stalled[157:153] == 5'd14) ?
		 rss$D_OUT :
		 proc_m3_rf[479:448] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d637 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d632,
	       (proc_m12_stalled[157:153] == 5'd13) ?
		 rss$D_OUT :
		 proc_m3_rf[447:416],
	       (proc_m12_stalled[157:153] == 5'd12) ?
		 rss$D_OUT :
		 proc_m3_rf[415:384] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d642 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d637,
	       (proc_m12_stalled[157:153] == 5'd11) ?
		 rss$D_OUT :
		 proc_m3_rf[383:352],
	       (proc_m12_stalled[157:153] == 5'd10) ?
		 rss$D_OUT :
		 proc_m3_rf[351:320] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d647 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d642,
	       (proc_m12_stalled[157:153] == 5'd9) ?
		 rss$D_OUT :
		 proc_m3_rf[319:288],
	       (proc_m12_stalled[157:153] == 5'd8) ?
		 rss$D_OUT :
		 proc_m3_rf[287:256] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d652 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d647,
	       (proc_m12_stalled[157:153] == 5'd7) ?
		 rss$D_OUT :
		 proc_m3_rf[255:224],
	       (proc_m12_stalled[157:153] == 5'd6) ?
		 rss$D_OUT :
		 proc_m3_rf[223:192] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d657 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d652,
	       (proc_m12_stalled[157:153] == 5'd5) ?
		 rss$D_OUT :
		 proc_m3_rf[191:160],
	       (proc_m12_stalled[157:153] == 5'd4) ?
		 rss$D_OUT :
		 proc_m3_rf[159:128] } ;
  assign IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d662 =
	     { IF_proc_m12_stalled_78_BITS_157_TO_153_79_EQ_3_ETC___d657,
	       (proc_m12_stalled[157:153] == 5'd3) ?
		 rss$D_OUT :
		 proc_m3_rf[127:96],
	       (proc_m12_stalled[157:153] == 5'd2) ?
		 rss$D_OUT :
		 proc_m3_rf[95:64] } ;
  assign NOT_IF_proc_m12_stalled_78_BITS_31_TO_25_45_EQ_ETC___d796 =
	     x_10__h49996 != proc_m12_stalled[12:1] ;
  assign NOT_IF_proc_m8_elt_e2w_41_BITS_63_TO_57_55_EQ__ETC___d906 =
	     x_13__h66104 != proc_m8_elt_e2w[44:33] ;
  assign NOT_SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4__ETC___d254 =
	     !SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 &&
	     !SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 &&
	     !CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 &&
	     proc_m2_elt_f2d[31:25] != 7'h03 &&
	     proc_m2_elt_f2d[31:25] != 7'h23 &&
	     proc_m2_full_f2d ;
  assign NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d104 =
	     !proc_m5_full_d2e &&
	     !SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 &&
	     !CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 &&
	     proc_m2_elt_f2d[31:25] == 7'h03 &&
	     proc_m2_full_f2d ;
  assign NOT_proc_m5_full_d2e_6_7_AND_NOT_SEL_ARR_proc__ETC___d235 =
	     !proc_m5_full_d2e &&
	     !SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 &&
	     !SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 &&
	     proc_m2_elt_f2d[31:25] == 7'h23 &&
	     proc_m2_full_f2d ;
  assign SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d763 =
	     x__h50223 == y__h50385 ;
  assign SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d781 =
	     x__h50223 < y__h50385 ;
  assign SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d873 =
	     x__h66319 == y__h66481 ;
  assign SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d891 =
	     x__h66319 < y__h66481 ;
  assign _0_CONCAT_proc_m5_elt_d2e_42_BITS_120_TO_89_63__ETC___d423 =
	     { 32'd0, proc_m5_elt_d2e[120:89] } *
	     { 32'd0, proc_m5_elt_d2e[88:57] } ;
  assign proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 =
	     proc_m12_stalled[24:13] + 12'h004 ;
  assign proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 =
	     proc_m12_stalled[24:13] + y__h50509 ;
  assign proc_m2_elt_f2d_BITS_56_TO_45__q3 = proc_m2_elt_f2d[56:45] ;
  assign proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400 =
	     proc_m5_elt_d2e[120:89] - proc_m5_elt_d2e[88:57] ;
  assign proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406 =
	     proc_m5_elt_d2e[120:89] >> proc_m5_elt_d2e[61:57] ;
  assign proc_m5_elt_d2e_BITS_56_TO_45__q1 = proc_m5_elt_d2e[56:45] ;
  assign proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 =
	     proc_m8_elt_e2w[56:45] + 12'h004 ;
  assign proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 =
	     proc_m8_elt_e2w[56:45] + y__h66605 ;
  assign proc_m8_elt_e2w_41_BIT_32_42_EQ_proc_m7_eEpoch_43___d444 =
	     proc_m8_elt_e2w[32] == proc_m7_eEpoch ;
  assign x0223_MINUS_y0385__q5 = x__h50223 - y__h50385 ;
  assign x6319_MINUS_y6481__q6 = x__h66319 - y__h66481 ;
  assign x_5__h26747 = proc_m9_pc + 12'h004 ;
  assign x_5__h34482 =
	     (proc_m2_elt_f2d[31:25] == 7'h63) ?
	       5'h0 :
	       proc_m2_elt_f2d[36:32] ;
  assign x__h25971 = ~proc_m9_pinitRqOfs ;
  assign x__h26006 = { 20'd0, proc_m9_pinitRqOfs, 2'd0 } ;
  assign x__h26230 = ~proc_m9_pinitRsOfs ;
  assign x__h28977 =
	     SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 +
	     { {20{proc_m2_elt_f2d_BITS_56_TO_45__q3[11]}},
	       proc_m2_elt_f2d_BITS_56_TO_45__q3 } ;
  assign x__h34125 =
	     SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 +
	     { {20{x__h34175[11]}}, x__h34175 } ;
  assign x__h34175 = { proc_m2_elt_f2d[56:50], proc_m2_elt_f2d[36:32] } ;
  assign x__h38346 = { 20'd0, proc_m5_elt_d2e[24:13] } ;
  assign x__h38409 = proc_m5_elt_d2e[24:13] + 12'h004 ;
  assign y__h38517 =
	     { {20{proc_m5_elt_d2e_BITS_56_TO_45__q1[11]}},
	       proc_m5_elt_d2e_BITS_56_TO_45__q1 } ;
  assign y__h38641 = { 20'd0, proc_m5_elt_d2e[56:45] } ;
  assign y__h50065 = { proc_m12_stalled[45], proc_m12_stalled[55:46], 1'd0 } ;
  assign y__h50509 =
	     { proc_m12_stalled[32],
	       proc_m12_stalled[55:50],
	       proc_m12_stalled[36:33],
	       1'd0 } ;
  assign y__h66163 = { proc_m8_elt_e2w[77], proc_m8_elt_e2w[87:78], 1'd0 } ;
  assign y__h66605 =
	     { proc_m8_elt_e2w[64],
	       proc_m8_elt_e2w[87:82],
	       proc_m8_elt_e2w[68:65],
	       1'd0 } ;
  always@(proc_m2_elt_f2d)
  begin
    case (proc_m2_elt_f2d[31:25])
      7'h03: x_4__h27027 = 2'h0;
      7'h23: x_4__h27027 = 2'h1;
      default: x_4__h27027 = 2'h3;
    endcase
  end
  always@(proc_m2_elt_f2d or proc_m3_rf)
  begin
    case (proc_m2_elt_f2d[49:45])
      5'd0: x__h34229 = proc_m3_rf[31:0];
      5'd1: x__h34229 = proc_m3_rf[63:32];
      5'd2: x__h34229 = proc_m3_rf[95:64];
      5'd3: x__h34229 = proc_m3_rf[127:96];
      5'd4: x__h34229 = proc_m3_rf[159:128];
      5'd5: x__h34229 = proc_m3_rf[191:160];
      5'd6: x__h34229 = proc_m3_rf[223:192];
      5'd7: x__h34229 = proc_m3_rf[255:224];
      5'd8: x__h34229 = proc_m3_rf[287:256];
      5'd9: x__h34229 = proc_m3_rf[319:288];
      5'd10: x__h34229 = proc_m3_rf[351:320];
      5'd11: x__h34229 = proc_m3_rf[383:352];
      5'd12: x__h34229 = proc_m3_rf[415:384];
      5'd13: x__h34229 = proc_m3_rf[447:416];
      5'd14: x__h34229 = proc_m3_rf[479:448];
      5'd15: x__h34229 = proc_m3_rf[511:480];
      5'd16: x__h34229 = proc_m3_rf[543:512];
      5'd17: x__h34229 = proc_m3_rf[575:544];
      5'd18: x__h34229 = proc_m3_rf[607:576];
      5'd19: x__h34229 = proc_m3_rf[639:608];
      5'd20: x__h34229 = proc_m3_rf[671:640];
      5'd21: x__h34229 = proc_m3_rf[703:672];
      5'd22: x__h34229 = proc_m3_rf[735:704];
      5'd23: x__h34229 = proc_m3_rf[767:736];
      5'd24: x__h34229 = proc_m3_rf[799:768];
      5'd25: x__h34229 = proc_m3_rf[831:800];
      5'd26: x__h34229 = proc_m3_rf[863:832];
      5'd27: x__h34229 = proc_m3_rf[895:864];
      5'd28: x__h34229 = proc_m3_rf[927:896];
      5'd29: x__h34229 = proc_m3_rf[959:928];
      5'd30: x__h34229 = proc_m3_rf[991:960];
      5'd31: x__h34229 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m12_stalled or proc_m3_rf)
  begin
    case (proc_m12_stalled[44:40])
      5'd0: x__h50223 = proc_m3_rf[31:0];
      5'd1: x__h50223 = proc_m3_rf[63:32];
      5'd2: x__h50223 = proc_m3_rf[95:64];
      5'd3: x__h50223 = proc_m3_rf[127:96];
      5'd4: x__h50223 = proc_m3_rf[159:128];
      5'd5: x__h50223 = proc_m3_rf[191:160];
      5'd6: x__h50223 = proc_m3_rf[223:192];
      5'd7: x__h50223 = proc_m3_rf[255:224];
      5'd8: x__h50223 = proc_m3_rf[287:256];
      5'd9: x__h50223 = proc_m3_rf[319:288];
      5'd10: x__h50223 = proc_m3_rf[351:320];
      5'd11: x__h50223 = proc_m3_rf[383:352];
      5'd12: x__h50223 = proc_m3_rf[415:384];
      5'd13: x__h50223 = proc_m3_rf[447:416];
      5'd14: x__h50223 = proc_m3_rf[479:448];
      5'd15: x__h50223 = proc_m3_rf[511:480];
      5'd16: x__h50223 = proc_m3_rf[543:512];
      5'd17: x__h50223 = proc_m3_rf[575:544];
      5'd18: x__h50223 = proc_m3_rf[607:576];
      5'd19: x__h50223 = proc_m3_rf[639:608];
      5'd20: x__h50223 = proc_m3_rf[671:640];
      5'd21: x__h50223 = proc_m3_rf[703:672];
      5'd22: x__h50223 = proc_m3_rf[735:704];
      5'd23: x__h50223 = proc_m3_rf[767:736];
      5'd24: x__h50223 = proc_m3_rf[799:768];
      5'd25: x__h50223 = proc_m3_rf[831:800];
      5'd26: x__h50223 = proc_m3_rf[863:832];
      5'd27: x__h50223 = proc_m3_rf[895:864];
      5'd28: x__h50223 = proc_m3_rf[927:896];
      5'd29: x__h50223 = proc_m3_rf[959:928];
      5'd30: x__h50223 = proc_m3_rf[991:960];
      5'd31: x__h50223 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m12_stalled or proc_m3_rf)
  begin
    case (proc_m12_stalled[49:45])
      5'd0: y__h50385 = proc_m3_rf[31:0];
      5'd1: y__h50385 = proc_m3_rf[63:32];
      5'd2: y__h50385 = proc_m3_rf[95:64];
      5'd3: y__h50385 = proc_m3_rf[127:96];
      5'd4: y__h50385 = proc_m3_rf[159:128];
      5'd5: y__h50385 = proc_m3_rf[191:160];
      5'd6: y__h50385 = proc_m3_rf[223:192];
      5'd7: y__h50385 = proc_m3_rf[255:224];
      5'd8: y__h50385 = proc_m3_rf[287:256];
      5'd9: y__h50385 = proc_m3_rf[319:288];
      5'd10: y__h50385 = proc_m3_rf[351:320];
      5'd11: y__h50385 = proc_m3_rf[383:352];
      5'd12: y__h50385 = proc_m3_rf[415:384];
      5'd13: y__h50385 = proc_m3_rf[447:416];
      5'd14: y__h50385 = proc_m3_rf[479:448];
      5'd15: y__h50385 = proc_m3_rf[511:480];
      5'd16: y__h50385 = proc_m3_rf[543:512];
      5'd17: y__h50385 = proc_m3_rf[575:544];
      5'd18: y__h50385 = proc_m3_rf[607:576];
      5'd19: y__h50385 = proc_m3_rf[639:608];
      5'd20: y__h50385 = proc_m3_rf[671:640];
      5'd21: y__h50385 = proc_m3_rf[703:672];
      5'd22: y__h50385 = proc_m3_rf[735:704];
      5'd23: y__h50385 = proc_m3_rf[767:736];
      5'd24: y__h50385 = proc_m3_rf[799:768];
      5'd25: y__h50385 = proc_m3_rf[831:800];
      5'd26: y__h50385 = proc_m3_rf[863:832];
      5'd27: y__h50385 = proc_m3_rf[895:864];
      5'd28: y__h50385 = proc_m3_rf[927:896];
      5'd29: y__h50385 = proc_m3_rf[959:928];
      5'd30: y__h50385 = proc_m3_rf[991:960];
      5'd31: y__h50385 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m8_elt_e2w or proc_m3_rf)
  begin
    case (proc_m8_elt_e2w[76:72])
      5'd0: x__h66319 = proc_m3_rf[31:0];
      5'd1: x__h66319 = proc_m3_rf[63:32];
      5'd2: x__h66319 = proc_m3_rf[95:64];
      5'd3: x__h66319 = proc_m3_rf[127:96];
      5'd4: x__h66319 = proc_m3_rf[159:128];
      5'd5: x__h66319 = proc_m3_rf[191:160];
      5'd6: x__h66319 = proc_m3_rf[223:192];
      5'd7: x__h66319 = proc_m3_rf[255:224];
      5'd8: x__h66319 = proc_m3_rf[287:256];
      5'd9: x__h66319 = proc_m3_rf[319:288];
      5'd10: x__h66319 = proc_m3_rf[351:320];
      5'd11: x__h66319 = proc_m3_rf[383:352];
      5'd12: x__h66319 = proc_m3_rf[415:384];
      5'd13: x__h66319 = proc_m3_rf[447:416];
      5'd14: x__h66319 = proc_m3_rf[479:448];
      5'd15: x__h66319 = proc_m3_rf[511:480];
      5'd16: x__h66319 = proc_m3_rf[543:512];
      5'd17: x__h66319 = proc_m3_rf[575:544];
      5'd18: x__h66319 = proc_m3_rf[607:576];
      5'd19: x__h66319 = proc_m3_rf[639:608];
      5'd20: x__h66319 = proc_m3_rf[671:640];
      5'd21: x__h66319 = proc_m3_rf[703:672];
      5'd22: x__h66319 = proc_m3_rf[735:704];
      5'd23: x__h66319 = proc_m3_rf[767:736];
      5'd24: x__h66319 = proc_m3_rf[799:768];
      5'd25: x__h66319 = proc_m3_rf[831:800];
      5'd26: x__h66319 = proc_m3_rf[863:832];
      5'd27: x__h66319 = proc_m3_rf[895:864];
      5'd28: x__h66319 = proc_m3_rf[927:896];
      5'd29: x__h66319 = proc_m3_rf[959:928];
      5'd30: x__h66319 = proc_m3_rf[991:960];
      5'd31: x__h66319 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m8_elt_e2w or proc_m3_rf)
  begin
    case (proc_m8_elt_e2w[81:77])
      5'd0: y__h66481 = proc_m3_rf[31:0];
      5'd1: y__h66481 = proc_m3_rf[63:32];
      5'd2: y__h66481 = proc_m3_rf[95:64];
      5'd3: y__h66481 = proc_m3_rf[127:96];
      5'd4: y__h66481 = proc_m3_rf[159:128];
      5'd5: y__h66481 = proc_m3_rf[191:160];
      5'd6: y__h66481 = proc_m3_rf[223:192];
      5'd7: y__h66481 = proc_m3_rf[255:224];
      5'd8: y__h66481 = proc_m3_rf[287:256];
      5'd9: y__h66481 = proc_m3_rf[319:288];
      5'd10: y__h66481 = proc_m3_rf[351:320];
      5'd11: y__h66481 = proc_m3_rf[383:352];
      5'd12: y__h66481 = proc_m3_rf[415:384];
      5'd13: y__h66481 = proc_m3_rf[447:416];
      5'd14: y__h66481 = proc_m3_rf[479:448];
      5'd15: y__h66481 = proc_m3_rf[511:480];
      5'd16: y__h66481 = proc_m3_rf[543:512];
      5'd17: y__h66481 = proc_m3_rf[575:544];
      5'd18: y__h66481 = proc_m3_rf[607:576];
      5'd19: y__h66481 = proc_m3_rf[639:608];
      5'd20: y__h66481 = proc_m3_rf[671:640];
      5'd21: y__h66481 = proc_m3_rf[703:672];
      5'd22: y__h66481 = proc_m3_rf[735:704];
      5'd23: y__h66481 = proc_m3_rf[767:736];
      5'd24: y__h66481 = proc_m3_rf[799:768];
      5'd25: y__h66481 = proc_m3_rf[831:800];
      5'd26: y__h66481 = proc_m3_rf[863:832];
      5'd27: y__h66481 = proc_m3_rf[895:864];
      5'd28: y__h66481 = proc_m3_rf[927:896];
      5'd29: y__h66481 = proc_m3_rf[959:928];
      5'd30: y__h66481 = proc_m3_rf[991:960];
      5'd31: y__h66481 = proc_m3_rf[1023:992];
    endcase
  end
  always@(proc_m2_elt_f2d or proc_m4_sbFlags)
  begin
    case (proc_m2_elt_f2d[44:40])
      5'd0:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d94 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m2_elt_f2d or proc_m4_sbFlags)
  begin
    case (proc_m2_elt_f2d[49:45])
      5'd0:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[0];
      5'd1:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[1];
      5'd2:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[2];
      5'd3:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[3];
      5'd4:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[4];
      5'd5:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[5];
      5'd6:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[6];
      5'd7:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[7];
      5'd8:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[8];
      5'd9:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[9];
      5'd10:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[10];
      5'd11:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[11];
      5'd12:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[12];
      5'd13:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[13];
      5'd14:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[14];
      5'd15:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[15];
      5'd16:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[16];
      5'd17:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[17];
      5'd18:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[18];
      5'd19:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[19];
      5'd20:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[20];
      5'd21:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[21];
      5'd22:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[22];
      5'd23:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[23];
      5'd24:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[24];
      5'd25:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[25];
      5'd26:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[26];
      5'd27:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[27];
      5'd28:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[28];
      5'd29:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[29];
      5'd30:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[30];
      5'd31:
	  SEL_ARR_proc_m4_sbFlags_8_BIT_0_9_proc_m4_sbFl_ETC___d230 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m2_elt_f2d or proc_m4_sbFlags)
  begin
    case (proc_m2_elt_f2d[36:32])
      5'd0:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[0];
      5'd1:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[1];
      5'd2:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[2];
      5'd3:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[3];
      5'd4:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[4];
      5'd5:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[5];
      5'd6:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[6];
      5'd7:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[7];
      5'd8:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[8];
      5'd9:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[9];
      5'd10:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[10];
      5'd11:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[11];
      5'd12:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[12];
      5'd13:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[13];
      5'd14:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[14];
      5'd15:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[15];
      5'd16:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[16];
      5'd17:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[17];
      5'd18:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[18];
      5'd19:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[19];
      5'd20:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[20];
      5'd21:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[21];
      5'd22:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[22];
      5'd23:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[23];
      5'd24:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[24];
      5'd25:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[25];
      5'd26:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[26];
      5'd27:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[27];
      5'd28:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[28];
      5'd29:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[29];
      5'd30:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[30];
      5'd31:
	  CASE_proc_m2_elt_f2d_BITS_36_TO_32_0_proc_m4_s_ETC__q2 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m2_elt_f2d or proc_m3_rf)
  begin
    case (proc_m2_elt_f2d[44:40])
      5'd0:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[31:0];
      5'd1:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[63:32];
      5'd2:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[95:64];
      5'd3:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[127:96];
      5'd4:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[159:128];
      5'd5:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[191:160];
      5'd6:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[223:192];
      5'd7:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[255:224];
      5'd8:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[287:256];
      5'd9:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[319:288];
      5'd10:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[351:320];
      5'd11:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[383:352];
      5'd12:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[415:384];
      5'd13:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[447:416];
      5'd14:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[479:448];
      5'd15:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[511:480];
      5'd16:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[543:512];
      5'd17:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[575:544];
      5'd18:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[607:576];
      5'd19:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[639:608];
      5'd20:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[671:640];
      5'd21:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[703:672];
      5'd22:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[735:704];
      5'd23:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[767:736];
      5'd24:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[799:768];
      5'd25:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[831:800];
      5'd26:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[863:832];
      5'd27:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[895:864];
      5'd28:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[927:896];
      5'd29:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[959:928];
      5'd30:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[991:960];
      5'd31:
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d143 =
	      proc_m3_rf[1023:992];
    endcase
  end
  always@(x_5__h34482 or proc_m4_sbFlags)
  begin
    case (x_5__h34482)
      5'd0:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[0];
      5'd1:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[1];
      5'd2:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[2];
      5'd3:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[3];
      5'd4:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[4];
      5'd5:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[5];
      5'd6:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[6];
      5'd7:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[7];
      5'd8:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[8];
      5'd9:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[9];
      5'd10:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[10];
      5'd11:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[11];
      5'd12:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[12];
      5'd13:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[13];
      5'd14:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[14];
      5'd15:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[15];
      5'd16:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[16];
      5'd17:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[17];
      5'd18:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[18];
      5'd19:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[19];
      5'd20:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[20];
      5'd21:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[21];
      5'd22:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[22];
      5'd23:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[23];
      5'd24:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[24];
      5'd25:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[25];
      5'd26:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[26];
      5'd27:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[27];
      5'd28:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[28];
      5'd29:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[29];
      5'd30:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[30];
      5'd31:
	  CASE_x_54482_0_proc_m4_sbFlags_BIT_0_1_proc_m4_ETC__q4 =
	      proc_m4_sbFlags[31];
    endcase
  end
  always@(proc_m12_stalled or
	  proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 or
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d763 or
	  proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 or
	  IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d777 or
	  IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d779 or
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d781)
  begin
    case (proc_m12_stalled[39:37])
      3'h0:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d763 ?
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 :
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770;
      3'h1:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d763 ?
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 :
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769;
      3'h4:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d777;
      3'h5:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d779;
      3'h6:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d781 ?
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769 :
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770;
      3'h7:
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d781 ?
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 :
		proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_proc_ETC___d769;
      default: IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 =
		   proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770;
    endcase
  end
  always@(proc_m12_stalled or
	  proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770 or
	  IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790 or
	  x__h50223 or y__h50065)
  begin
    case (proc_m12_stalled[31:25])
      7'h63:
	  x_10__h49996 =
	      IF_proc_m12_stalled_78_BITS_39_TO_37_59_EQ_0x0_ETC___d790;
      7'h67: x_10__h49996 = x__h50223[11:0] + proc_m12_stalled[56:45];
      7'h6F: x_10__h49996 = proc_m12_stalled[24:13] + y__h50065;
      default: x_10__h49996 =
		   proc_m12_stalled_78_BITS_24_TO_13_47_PLUS_0x4___d770;
    endcase
  end
  always@(proc_m8_elt_e2w or
	  proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 or
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d873 or
	  proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 or
	  IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d887 or
	  IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d889 or
	  SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d891)
  begin
    case (proc_m8_elt_e2w[71:69])
      3'h0:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d873 ?
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 :
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880;
      3'h1:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d873 ?
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 :
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879;
      3'h4:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d887;
      3'h5:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      IF_SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc__ETC___d889;
      3'h6:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d891 ?
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879 :
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880;
      3'h7:
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
	      SEL_ARR_proc_m3_rf_09_BITS_31_TO_0_10_proc_m3__ETC___d891 ?
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 :
		proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_proc__ETC___d879;
      default: IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 =
		   proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880;
    endcase
  end
  always@(proc_m8_elt_e2w or
	  proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880 or
	  IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900 or
	  x__h66319 or y__h66163)
  begin
    case (proc_m8_elt_e2w[63:57])
      7'h63:
	  x_13__h66104 =
	      IF_proc_m8_elt_e2w_41_BITS_71_TO_69_69_EQ_0x0__ETC___d900;
      7'h67: x_13__h66104 = x__h66319[11:0] + proc_m8_elt_e2w[88:77];
      7'h6F: x_13__h66104 = proc_m8_elt_e2w[56:45] + y__h66163;
      default: x_13__h66104 =
		   proc_m8_elt_e2w_41_BITS_56_TO_45_57_PLUS_0x4___d880;
    endcase
  end
  always@(proc_m5_elt_d2e or y__h38517 or y__h38641)
  begin
    case (proc_m5_elt_d2e[39:37])
      3'h0:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] + y__h38517;
      3'h1:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] << proc_m5_elt_d2e[49:45];
      3'h2:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      (proc_m5_elt_d2e[120:89] < y__h38517) ? 32'h00000001 : 32'h0;
      3'h3:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      (proc_m5_elt_d2e[120:89] < y__h38641) ? 32'h00000001 : 32'h0;
      3'h4:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] ^ y__h38517;
      3'h5:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] >> proc_m5_elt_d2e[49:45];
      3'h6:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] | y__h38517;
      3'h7:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 =
	      proc_m5_elt_d2e[120:89] & y__h38517;
    endcase
  end
  always@(proc_m5_elt_d2e or
	  proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400 or
	  proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406)
  begin
    case (proc_m5_elt_d2e[39:37])
      3'h0:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e[120:89] + proc_m5_elt_d2e[88:57];
      3'h1:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e[120:89] << proc_m5_elt_d2e[61:57];
      3'h2:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400[31] ?
		32'h00000001 :
		32'h0;
      3'h3:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      (proc_m5_elt_d2e[120:89] < proc_m5_elt_d2e[88:57]) ?
		32'h00000001 :
		32'h0;
      3'h4:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e[120:89] ^ proc_m5_elt_d2e[88:57];
      3'h5:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406;
      3'h6:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e[120:89] | proc_m5_elt_d2e[88:57];
      3'h7:
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 =
	      proc_m5_elt_d2e[120:89] & proc_m5_elt_d2e[88:57];
    endcase
  end
  always@(proc_m5_elt_d2e or
	  proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400 or
	  proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406)
  begin
    case (proc_m5_elt_d2e[39:37])
      3'h0:
	  CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7 =
	      proc_m5_elt_d2e_42_BITS_120_TO_89_63_MINUS_pro_ETC___d400;
      3'h5:
	  CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7 =
	      proc_m5_elt_d2e_42_BITS_120_TO_89_63_SRL_proc__ETC___d406;
      default: CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7 = 32'h0;
    endcase
  end
  always@(proc_m5_elt_d2e or
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416 or
	  _0_CONCAT_proc_m5_elt_d2e_42_BITS_120_TO_89_63__ETC___d423 or
	  CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7)
  begin
    case (proc_m5_elt_d2e[56:50])
      7'h0:
	  IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428 =
	      IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d416;
      7'h01:
	  IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428 =
	      (proc_m5_elt_d2e[39:37] == 3'h0) ?
		_0_CONCAT_proc_m5_elt_d2e_42_BITS_120_TO_89_63__ETC___d423[31:0] :
		32'h0;
      7'h20:
	  IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428 =
	      CASE_proc_m5_elt_d2e_BITS_39_TO_37_0x0_proc_m5_ETC__q7;
      default: IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428 =
		   32'h0;
    endcase
  end
  always@(proc_m5_elt_d2e or
	  IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392 or
	  x__h38346 or
	  IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428 or
	  x__h38409)
  begin
    case (proc_m5_elt_d2e[31:25])
      7'h13:
	  x_6__h38146 =
	      IF_proc_m5_elt_d2e_42_BITS_39_TO_37_61_EQ_0x0__ETC___d392;
      7'h17: x_6__h38146 = x__h38346 + { proc_m5_elt_d2e[56:37], 12'h0 };
      7'h33:
	  x_6__h38146 =
	      IF_proc_m5_elt_d2e_42_BITS_56_TO_50_94_EQ_0x0__ETC___d428;
      7'h37: x_6__h38146 = { proc_m5_elt_d2e[56:37], 12'h0 };
      7'h67, 7'h6F: x_6__h38146 = { 20'd0, x__h38409 };
      default: x_6__h38146 = 32'h0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        proc_m12_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m12_stalled <= `BSV_ASSIGNMENT_DELAY 160'd0;
	proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m2_elt_f2d <= `BSV_ASSIGNMENT_DELAY 57'd0;
	proc_m2_full_f2d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m3_rf <= `BSV_ASSIGNMENT_DELAY 1024'd0;
	proc_m4_sbFlags <= `BSV_ASSIGNMENT_DELAY 32'd0;
	proc_m5_elt_d2e <= `BSV_ASSIGNMENT_DELAY 160'd0;
	proc_m5_full_d2e <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m6_elt_w2d <= `BSV_ASSIGNMENT_DELAY 12'd0;
	proc_m6_full_w2d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m7_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m8_elt_e2w <= `BSV_ASSIGNMENT_DELAY 192'd0;
	proc_m8_full_e2w <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_fEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_fStall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pc <= `BSV_ASSIGNMENT_DELAY 12'h0;
	proc_m9_pinit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pinitRq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_m9_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
	proc_m9_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY 10'd0;
      end
    else
      begin
        if (proc_m12_stall$EN)
	  proc_m12_stall <= `BSV_ASSIGNMENT_DELAY proc_m12_stall$D_IN;
	if (proc_m12_stalled$EN)
	  proc_m12_stalled <= `BSV_ASSIGNMENT_DELAY proc_m12_stalled$D_IN;
	if (proc_m1_readRq$EN)
	  proc_m1_readRq <= `BSV_ASSIGNMENT_DELAY proc_m1_readRq$D_IN;
	if (proc_m2_elt_f2d$EN)
	  proc_m2_elt_f2d <= `BSV_ASSIGNMENT_DELAY proc_m2_elt_f2d$D_IN;
	if (proc_m2_full_f2d$EN)
	  proc_m2_full_f2d <= `BSV_ASSIGNMENT_DELAY proc_m2_full_f2d$D_IN;
	if (proc_m3_rf$EN)
	  proc_m3_rf <= `BSV_ASSIGNMENT_DELAY proc_m3_rf$D_IN;
	if (proc_m4_sbFlags$EN)
	  proc_m4_sbFlags <= `BSV_ASSIGNMENT_DELAY proc_m4_sbFlags$D_IN;
	if (proc_m5_elt_d2e$EN)
	  proc_m5_elt_d2e <= `BSV_ASSIGNMENT_DELAY proc_m5_elt_d2e$D_IN;
	if (proc_m5_full_d2e$EN)
	  proc_m5_full_d2e <= `BSV_ASSIGNMENT_DELAY proc_m5_full_d2e$D_IN;
	if (proc_m6_elt_w2d$EN)
	  proc_m6_elt_w2d <= `BSV_ASSIGNMENT_DELAY proc_m6_elt_w2d$D_IN;
	if (proc_m6_full_w2d$EN)
	  proc_m6_full_w2d <= `BSV_ASSIGNMENT_DELAY proc_m6_full_w2d$D_IN;
	if (proc_m7_eEpoch$EN)
	  proc_m7_eEpoch <= `BSV_ASSIGNMENT_DELAY proc_m7_eEpoch$D_IN;
	if (proc_m8_elt_e2w$EN)
	  proc_m8_elt_e2w <= `BSV_ASSIGNMENT_DELAY proc_m8_elt_e2w$D_IN;
	if (proc_m8_full_e2w$EN)
	  proc_m8_full_e2w <= `BSV_ASSIGNMENT_DELAY proc_m8_full_e2w$D_IN;
	if (proc_m9_fEpoch$EN)
	  proc_m9_fEpoch <= `BSV_ASSIGNMENT_DELAY proc_m9_fEpoch$D_IN;
	if (proc_m9_fStall$EN)
	  proc_m9_fStall <= `BSV_ASSIGNMENT_DELAY proc_m9_fStall$D_IN;
	if (proc_m9_pc$EN)
	  proc_m9_pc <= `BSV_ASSIGNMENT_DELAY proc_m9_pc$D_IN;
	if (proc_m9_pinit$EN)
	  proc_m9_pinit <= `BSV_ASSIGNMENT_DELAY proc_m9_pinit$D_IN;
	if (proc_m9_pinitRq$EN)
	  proc_m9_pinitRq <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRq$D_IN;
	if (proc_m9_pinitRqOfs$EN)
	  proc_m9_pinitRqOfs <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRqOfs$D_IN;
	if (proc_m9_pinitRsOfs$EN)
	  proc_m9_pinitRsOfs <= `BSV_ASSIGNMENT_DELAY proc_m9_pinitRsOfs$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    proc_m12_stall = 1'h0;
    proc_m12_stalled = 160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m1_readRq = 1'h0;
    proc_m2_elt_f2d = 57'h0AAAAAAAAAAAAAA;
    proc_m2_full_f2d = 1'h0;
    proc_m3_rf =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m4_sbFlags = 32'hAAAAAAAA;
    proc_m5_elt_d2e = 160'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m5_full_d2e = 1'h0;
    proc_m6_elt_w2d = 12'hAAA;
    proc_m6_full_w2d = 1'h0;
    proc_m7_eEpoch = 1'h0;
    proc_m8_elt_e2w = 192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_m8_full_e2w = 1'h0;
    proc_m9_fEpoch = 1'h0;
    proc_m9_fStall = 1'h0;
    proc_m9_pc = 12'hAAA;
    proc_m9_pinit = 1'h0;
    proc_m9_pinitRq = 1'h0;
    proc_m9_pinitRqOfs = 10'h2AA;
    proc_m9_pinitRsOfs = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTop

